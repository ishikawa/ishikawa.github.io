<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>METAREAL</title>
    <link>http://ishikawa.github.io/</link>
    <description>Recent content on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Sun, 25 Sep 2016 14:47:00 +0900</lastBuildDate>
    
	<atom:link href="http://ishikawa.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Phoenix (Cowboy) の Gzip 圧縮サポート</title>
      <link>http://ishikawa.github.io/post/2016/09/gzip-compression-in-cowboy/</link>
      <pubDate>Sun, 25 Sep 2016 14:47:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/post/2016/09/gzip-compression-in-cowboy/</guid>
      <description>Phoenix framework でレスポンスの GZip 圧縮を有効にするには Cowboy に compress: true を渡すように、 Phoenix.Endpoint を設定する。
config :example_app, ExampleApp.Endpoint, http: [port: 4040, compress: true], debug_errors: true, code_reloader: true, check_origin: false, watchers: []  HTTP リクエストを送るときに Accept-Encoding ヘッダーを設定する (curl コマンドなら --compressed オプション)
Accept-Encoding: gzip, deflate  また、レスポンス・ボディのサイズが 300 バイトを超えていない場合も GZip 圧縮されないようだ。
 https://github.com/ninenines/cowboy/commit/01f57ad65d7c75fb455f48e354bb3a328c472ce4#diff-2db000a0dd01503e2f022387f23413cbR942  </description>
    </item>
    
    <item>
      <title>FileUtils in Rakefile</title>
      <link>http://ishikawa.github.io/post/2016/09/fileutils-in-rakefile/</link>
      <pubDate>Thu, 22 Sep 2016 19:26:18 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/post/2016/09/fileutils-in-rakefile/</guid>
      <description>いつまでたっても Rakefile の書き方を覚える気になれないのだが、Rakefile では FileUtils が インクルードされており cp や mkdir_p といったメソッドが使える。
mkdir_p &amp;quot;dir1/dir2&amp;quot;  また、いくつかの拡張がされており、コマンドの実行が失敗したときに例外が投げられたり、sh メソッドという Kernel.system にように外部コマンドを呼び出すメソッドが追加されている。
 Rakeのshで外部コマンドを実行する - Qiita rake/file_utils.rb at master · ruby/rake  </description>
    </item>
    
    <item>
      <title>docker build が固まる</title>
      <link>http://ishikawa.github.io/post/2015/12/hanging-up-docker-build/</link>
      <pubDate>Wed, 23 Dec 2015 12:49:25 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/post/2015/12/hanging-up-docker-build/</guid>
      <description>Docker 試してるんですが
 「docker build 遅すぎ！　コーヒー飲んでも終わってない！」
 さすがに遅すぎると思ったら、Setting up ca-certificates-java (20130815ubuntu1) … と呟いたまま固まっていました。
環境は以下の通り:
 Mac OS X El Capitan (10.11.2) VirtualBox 5.0.10 r104061 Ubuntu 64bit (trusty) Docker 1.9.1  Docker 1.9.1 hanging at build step &amp;ldquo;Setting up ca-certificates-java&amp;rdquo; · Issue #18180 · docker/docker
AUFS のバグでデッドロックしているらしい。
$ docker info … Storage Driver: aufs  Issue のコメントを読む限り、Docker のバージョンを 1.9.0 以前に戻すのが確実そう。
ただ、Docker のインストールは Vagrant の Docker Provisioner を利用していて、こいつでバージョン指定する方法が分からなかった（ソースコードを眺めた感じ、常に最新版がインストールされているみたい）。
CPU が複数ある場合は再現率がかなり低くなるようなので、仮想 CPU 数を 2 にすることで、とりあえずの対策とした。</description>
    </item>
    
    <item>
      <title>ctags に Elixir を追加する</title>
      <link>http://ishikawa.github.io/post/2015/09/elixir-ctags/</link>
      <pubDate>Fri, 25 Sep 2015 11:09:31 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/post/2015/09/elixir-ctags/</guid>
      <description>最近、Atom エディタを使っているが、シンボルの定義場所に移動するための Go to Declaration コマンドを動作させるためには ctags でインデックスしておく必要がある。
 atom/symbols-view  ただ、2015年9月の現時点では Elixir がサポートされていないようなので、自分で追加してやる必要がある。
% ctags --version Exuberant Ctags 5.8, Copyright (C) 1996-2009 Darren Hiebert Compiled: Mar 16 2015, 23:48:18 ... Optional compiled features: +wildcards, +regex  ctags はコマンドラインオプションで新しい言語を定義できる。毎回指定するのが面倒な場合は、 $HOME/.ctags からオプションを読み込んでくれるようだ。
 Exuberant Ctags: Adding support for a new language  とりあえず、defmodule によるモジュール定義を読み込めるようにしてみよう。
--langdef=Elixir --langmap=Elixir:.ex.exs --regex-elixir=/^[ \t]*defmodule[ \t]+([a-zA-Z0-9_.]+)/\1/m,modules/  ctags を実行して、生成された tags ファイルを確認する。
% ctags lib/elixir/lib/task.ex % cat tags !_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;&amp;quot; to lines/ .</description>
    </item>
    
    <item>
      <title>Aliasing Traits</title>
      <link>http://ishikawa.github.io/post/2015/07/rust-trait-alias/</link>
      <pubDate>Sun, 26 Jul 2015 10:10:37 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/post/2015/07/rust-trait-alias/</guid>
      <description>Rust の Traits による制約は Associated Types や複数の Traits を + で指定したりすると、どんどん長くなってしまう。
struct A&amp;lt;T: Iterator&amp;lt;Item=char&amp;gt;&amp;gt; { ... }  通常の型には type キーワードによる別名づけの手段が用意されているが、これは Traits には使えない。
type CharIterator = Iterator&amp;lt;Item=char&amp;gt;; // ERROR: note: `type` aliases cannot be used for traits struct A&amp;lt;T: CharIterator&amp;gt; { ... }  過去に提案はあったが却下されたようだ。
Allow type to create an alias for several trait bounds · Issue #8634 · rust-lang/rust
 別名を与えたい Trait を継承した空の Trait をつくればいい 言語に新しい機能をつけくわえるほどの価値はなさそう  たしかに、空の Trait をつくることで似たような効果を得ることはできる。</description>
    </item>
    
    <item>
      <title>ブログを Hugo に移行した</title>
      <link>http://ishikawa.github.io/post/migrate-to-hugo/</link>
      <pubDate>Sun, 21 Jun 2015 14:43:15 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/post/migrate-to-hugo/</guid>
      <description>すでに4年半近くの時が経過したが、ひさしぶりの投稿だ。Google AppEngine (Python + Django) で動かしていた自作ブログエンジンを Hugo に移行している。
Go で実装されているおかげでもあるのだろうが、サイトの生成スピードが速い。組み込みサーバには、ファイルの変更を検知してサイトを更新する機能が備わっているので、ストレスなく記事を書くことができる。ブラウザのリロードも不要。
URL を記事ごとに指定可能なのは助かった。デフォルトだと /post/title/ のような URL になるのだが、古い記事は /YYYY/MM/DD/title/ という形式で URL を決めていたので、そのままだと URL が変わってしまう。記事中の YAML (Front Matter) で URL を上書きしてやることで、URL を変えずにすんだ。
--- title: &amp;quot;Ruby-FFI 1.0.0 からは Ruby 1.9.2 以降が必要になった。&amp;quot; url: &amp;quot;/2010/12/16/ffi-requires-ruby-version-1-9-2/&amp;quot; ...  とはいえ、今後もこの指定をしていくのはしんどいので、この記事から URL の形式を /post/title/ に変えるつもり。
移行スクリプト 移行にあたっては古い記事を Markdown + Front Matter に変換する必要があり、変換スクリプトを Ruby で書いた。
 指定された記事の URL から HTML を取得 Nokogiri で HTML をパースしてタイトルや日付といったメタデータを抽出 本文を Markdown に変換 Hugo コマンドを起動してファイル作成 Markdown を書き込んで、次に実行するコマンドを出力  移行しながら発展させていき、最終的には上のようなスクリプトに落ち着いた。 最初のうちは 3 までをスクリプトでやって残りは（変換結果が正しいことを確認しつつ）手作業だったのだが、 しばらくしてから 4, 5 を実装して一気に終わらせた。</description>
    </item>
    
    <item>
      <title>映画「LOOPER」</title>
      <link>http://ishikawa.github.io/2013/01/18/looper/</link>
      <pubDate>Fri, 18 Jan 2013 00:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2013/01/18/looper/</guid>
      <description>話題の映画「LOOPER」を観てきた。
タイムトラベルものでありながら、主人公自身はタイムトラベルしないのが珍しい。先行作品へのオマージュに満ちあふれた本作だが、以下の二点において 映画「ターミネーター」がもっとも近い気がした。
 未来と現代が拮抗する物語である タイムトラベルが両者の衝突を生み出すための道具としてしか使われていない  一見、自己犠牲に見えるラストも、個人的には「ターミネーター」の別解として考えるのが腑に落ちた。
前半は最高にスリリングで、申し分のない面白さ。惜しむらくは、後半の展開が少々雑というか、色んな要素を詰め込みすぎた感はある。 未来の悪党どもに利用され蹂躙されている現代社会や、登場人物たちの悲劇の連鎖、といったループ構造が物語の本質だと思うが、飾りが多くてそこが見えづらい。とても楽しませてもらったのだけど、観賞後、冷静になってみるといまいちスッキリしないモヤモヤ感が残った（だからこそ観終わったあとに語りたくなって、話題になるのかもしれない）。
とはいえ、斬新なアイデアとサービス精神たっぷりのエンターテイメント作品であることは間違いない。新宿バルト9の前列席は音量が大きすぎて、銃撃戦は片耳を塞がないとツラかったが&amp;hellip;。</description>
    </item>
    
    <item>
      <title>Code Reading: Dump and Print Function in llvm::Module Class</title>
      <link>http://ishikawa.github.io/2013/01/14/code-reading-dump-and-print-function-in-llvm-module-class/</link>
      <pubDate>Mon, 14 Jan 2013 00:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2013/01/14/code-reading-dump-and-print-function-in-llvm-module-class/</guid>
      <description>LLVM 3.1 のソースコードから、llvm::Module の IR 出力用関数のソースコードを読んだ。
/// Print the module to an output stream with an optional /// AssemblyAnnotationWriter. void print(raw_ostream &amp;amp;OS, AssemblyAnnotationWriter *AAW) const; /// Dump the module to stderr (for debugging). void dump() const;  実装は lib/VMCore/Module.cpp ではなく、他の IR 出力用関数とともに lib/VMCore/AsmWriter.cpp にまとめられている。まずは llvm::Module::print を見てみよう。
void Module::print(raw_ostream &amp;amp;ROS, AssemblyAnnotationWriter *AAW) const { SlotTracker SlotTable(this); formatted_raw_ostream OS(ROS); AssemblyWriter W(OS, SlotTable, this, AAW); W.printModule(this); }  llvm::Module::print AssemblyWriter は lib/VMCore/AsmWriter.cpp の無名ネームスペースに定義されているクラスであり、llvm 内のさまざまな型をストリームに出力する関数を提供している。AssemblyWriter::printModule のコードをざっと眺めてみれば、やっていることの想像はつくだろう。</description>
    </item>
    
    <item>
      <title>Ruby-FFI 1.0.0 からは Ruby 1.9.2 以降が必要になった</title>
      <link>http://ishikawa.github.io/2010/12/16/ffi-requires-ruby-version-1-9-2/</link>
      <pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ishikawa.github.io/2010/12/16/ffi-requires-ruby-version-1-9-2/</guid>
      <description>Ruby-FFI 1.0.0 からは Ruby 1.9.2 以降が必要になった。
% sudo gem1.8 install ffi Password: ERROR: Error installing ffi: ffi requires Ruby version &amp;gt;= 1.9.2  そのため、Ruby 1.8 向けの gem をインストールするときはバージョン 0.6.3 を指定する。
% sudo gem1.8 install ffi --version &amp;quot;= 0.6.3&amp;quot; Password: Building native extensions. This could take a while... Successfully installed ffi-0.6.3 1 gem installed Installing ri documentation for ffi-0.6.3... Installing RDoc documentation for ffi-0.6.3...  </description>
    </item>
    
    <item>
      <title>Ruby FFI のメモリ管理についてメモ</title>
      <link>http://ishikawa.github.io/2010/12/11/1292077318/</link>
      <pubDate>Sat, 11 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://ishikawa.github.io/2010/12/11/1292077318/</guid>
      <description>Ruby FFI のメモリ管理についてメモ。FFI::MemoryPointer で確保したメモリを自分で破棄する場合は、autorelease を false にする。
error = FFI::MemoryPointer.new(:pointer) ... C.LLVMDisposeMessage(error) error.autorelease=false  そうしないと、FFI::MemoryPointer は GC 時に確保したメモリを破棄しようとする (MemoryPointer.c#L138) ので、たとえば Mac OS X では以下のようなエラーが出る。
ruby(891,0x7fff70874ca0) malloc: *** error for object 0x102e8fb10: pointer being freed was not allocated *** set a breakpoint in malloc_error_break to debug  エラー処理とかでは割と忘れがちかもしれない。</description>
    </item>
    
    <item>
      <title>LLVM 2.8 の C API 差分をチェックしてはじめて気づいたけど、2.8...</title>
      <link>http://ishikawa.github.io/2010/12/05/1291551820/</link>
      <pubDate>Sun, 05 Dec 2010 09:23:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2010/12/05/1291551820/</guid>
      <description>LLVM 2.8 の C API 差分をチェックしてはじめて気づいたけど、2.8 からは Union Type がなくなったみたい。
 The LLVM IR &amp;lsquo;Union&amp;rsquo; feature was removed. While this is a desirable feature for LLVM IR to support, the existing implementation was half baked and barely useful. We&amp;rsquo;d really like anyone interested to resurrect the work and finish it for a future release.
  LLVM 2.8 Release Notes | Major Changes and Removed Features [LLVMdev] Union type, is it really used or necessary?</description>
    </item>
    
    <item>
      <title>Google Bookmark が快適すぎる</title>
      <link>http://ishikawa.github.io/2010/02/23/google-bookmark-makes-me-feel-so-good/</link>
      <pubDate>Tue, 23 Feb 2010 23:26:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2010/02/23/google-bookmark-makes-me-feel-so-good/</guid>
      <description>Google Bookmark を使いはじめた。シンプルながら快適な使い心地で気に入っている。
 とにかく、ブックマーク編集画面が開くまでが速い ブックマーク先のページも含めて全文検索が可能  ソーシャル要素は考えず、純粋に「ブックマーク」という行為を突き詰めていくと、上記二点が非常に重要であることが分かると思う。
ちなみに、ブックマークレットにはGoogleブックマークに追加するブックマークレット（メモ欄対応版）で配布されているものを別窓で開くようにして使わせてもらっている。感謝。
javascript:var%20u=encodeURIComponent(location.href);var%20ti=encodeURIComponent(document.title);var%20te=encodeURIComponent((window.getSelection&amp;amp;&amp;amp;window.getSelection())||(document.getSelection&amp;amp;&amp;amp;document.getSelection())||(document.selection&amp;amp;&amp;amp;document.selection.createRange&amp;amp;&amp;amp;document.selection.createRange().text));window.open((te!=&#39;&#39;)?&#39;http://www.google.com/bookmarks/mark?op=add&amp;amp;bkmk=&#39;+u+&#39;&amp;amp;title=&#39;+ti+&#39;&amp;amp;annotation=&#39;+te:&#39;http://www.google.com/bookmarks/mark?op=add&amp;amp;bkmk=&#39;+u+&#39;&amp;amp;title=&#39;+ti);  </description>
    </item>
    
    <item>
      <title>Python のクロージャとレキシカル変数を使ったシングルトンっぽいもの</title>
      <link>http://ishikawa.github.io/2010/01/31/python-shared-instance-closure/</link>
      <pubDate>Sun, 31 Jan 2010 18:26:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2010/01/31/python-shared-instance-closure/</guid>
      <description>実際にはシングルトンではなくて、共有インスタンスを返すメソッドを実装する、ってだけなんだけど。
class A(object): @staticmethod def shared(): instance = A() A.shared = staticmethod(lambda: instance) return instance   共有インスタンスとなるオブジェクトを生成し、レキシカル変数にバインドする このオブジェクトを返す無名関数で、元の関数 shared を置き換える  何が嬉しいかというと、共有インスタンスを参照するための変数（今回の場合は instance）を関数外から不可視にできること。変数のスコープが必要以上に広いと不安になります。実行時に遅延インスタンス化されるのが嫌なら、クラス定義の直後に一度呼び出すなりすればいいと思う。
gist:290628 に doctest とか追加したものを置いてあります。</description>
    </item>
    
    <item>
      <title>Google AppEngine で Django 1.1 を使う</title>
      <link>http://ishikawa.github.io/2009/12/02/running-django-1-1-on-google-appengine/</link>
      <pubDate>Thu, 03 Dec 2009 12:42:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2009/12/02/running-django-1-1-on-google-appengine/</guid>
      <description>Google AppEngine の SDK および実行環境には、Web アプリケーション・フレームワークの Django がプリインストールされている。
しかし、デフォルトで有効になっているのは 0.96 という相当古いバージョンだ（もっとも、Google AppEngine リリース時点では、これが最新のバージョンであった）。すでにサポートも終了しており、バグや脆弱性の修正もされないため、できれば最新の 1.0/1.1系列を使いたい、という人が大半だろう。
しかし、これまで、バージョン 1.0 以降の Django を Google AppEngine で使うのは骨の折れる作業だった。
 使いたいバージョンの Django を丸ごとアップロードしなくてはいけなかった Django はファイル数が多いため、アップロード可能なファイル数制限を超えやすい デフォルトで有効になる古いバージョンの Django を無効化するために、呪文めいたコードが必要  だが、いまや状況は変わった。SDK 1.2.3 からは Django 1.0 が、SDK 1.2.5 からは Django 1.1 がサポートされ、Google AppEngine でも、簡単に Django 1.x を動かせるようになった。
google.appengine.dist.use_library SDK 1.2.3&amp;frasl;1.2.5 からは google.appengine.dist モジュールの use_library 関数を使うことで Django 1.0/1.1 を選択できるようになった。
使い方は簡単で、main.py に以下のような記述を追加するだけだ。
import os os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;settings&#39; from google.appengine.dist import use_library use_library(&#39;django&#39;, &#39;1.</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://ishikawa.github.io/2009/11/11/go-vim/</link>
      <pubDate>Wed, 11 Nov 2009 10:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2009/11/11/go-vim/</guid>
      <description>Io と並んで、自らの検索能力が試される名前の Go ですが、実用性と簡潔さを兼ねそなえた言語設計は好感がもてます。
% cd $GOROOT % ls misc/vim/ go.vim % cp misc/vim/go.vim ~/.vim/syntax/ % cat &amp;amp;gt; ~/.vim/ftdetect/go.vim au BufRead,BufNewFile *.go set filetype=go  今日はここまで。</description>
    </item>
    
    <item>
      <title>伊坂幸太郎「ラッシュライフ」</title>
      <link>http://ishikawa.github.io/2009/11/10/8/%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E3%83%A9%E3%82%A4%E3%83%95-%E4%BC%8A%E5%9D%82%E5%B9%B8%E5%A4%AA%E9%83%8E/</link>
      <pubDate>Wed, 11 Nov 2009 01:28:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2009/11/10/8/%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E3%83%A9%E3%82%A4%E3%83%95-%E4%BC%8A%E5%9D%82%E5%B9%B8%E5%A4%AA%E9%83%8E/</guid>
      <description>すでに本棚の肥やしと化していた「ラッシュライフ」を読了した。「オーデュポンの祈り」に引きつづき二冊目の伊坂幸太郎なので、一応、刊行順に読んでいることになる。もっとも、著者の本が文庫化されはじめた時期に衝動買いして、そのまま積んでいたというだけなのだが。
作品の感想は人それぞれ、どうやら評価の高い作品らしいので、個人的にトンデモに感じた箇所だけ挙げておく。
 豊田の連れている犬が饒舌すぎる。いっそのこと喋らせてしまえば、まだ面白かった。 ある事件の背景を、登場人物たちが「会話」で説明してくれる。 複雑にみえる構成も「偶然って不思議ね」程度の意味しかない。実は、都合のいい部分をつなげているだけなので、それほど複雑でもない。  ただ、「最高時速240キロの場所から物語が始まる」という書き出しは素晴らしい。気障だけど格好いいし、はまっている。これが本書のすべてだと思う。</description>
    </item>
    
    <item>
      <title>Sphinx 0.6.2 にアップグレードしたときのメモ</title>
      <link>http://ishikawa.github.io/2009/07/27/upgrading-sphinx-0-6-2/</link>
      <pubDate>Mon, 27 Jul 2009 10:45:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2009/07/27/upgrading-sphinx-0-6-2/</guid>
      <description>約一年ぶりに Sphinx を最新版に&amp;hellip;しようとしたら色々苦労したので、変更点や手順をメモとして残しておく。
Sphinx 0.6.2 &amp;amp; Jinja2 2.1.1 easy_install でインストールしようとしたが、Jinja2 のセットアップ・スクリプトがうまく動いていないらしく、Jinja2 に依存している Sphinx もインストールできない。原因を調べる気力はないので、ソースコードからビルドしてインストールすることにした。
まずは Jinja2 2.1.1 をビルドしてインストール。
% curl -LO http://pypi.python.org/packages/source/J/Jinja2/Jinja2-2.1.1.tar.gz % tar xvzf Jinja2-2.1.1.tar.gz % cd Jinja2-2.1.1 % sudo python setup.py install  つづいて Sphinx 0.6.2
% curl -LO http://pypi.python.org/packages/source/S/Sphinx/Sphinx-0.6.2.tar.gz % tar xvzf Sphinx-0.6.2.tar.gz % cd Sphinx-0.6.2 % sudo python setup.py install  sphinx.builder Sphinx 0.6.2 では sphinx.builder が非推奨扱いになっていた (changeset:254e0ff435e8)。
Running Sphinx v0.6.2 docs/ja/source/../../sphinxext/__init__.py:1: DeprecationWarning: The sphinx.builder module is deprecated; please import builders from the respective sphinx.</description>
    </item>
    
    <item>
      <title>WEB&#43;DB PRESS Vol.48</title>
      <link>http://ishikawa.github.io/2008/12/24/web-db-press-vol48/</link>
      <pubDate>Wed, 24 Dec 2008 01:06:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/12/24/web-db-press-vol48/</guid>
      <description>古谷楽人氏より WEB+DB PRESS Vol.48 (amazon.co.jp) を献本いただきました。ありがとうございます。わたしは当雑誌、というか雑誌全般の熱心な読者ではないのですが（ごめんなさい）、ひさしぶりの技術系雑誌を楽しく読ませてもらいました。
WEB+DB PRESS Vol.48 で氏は「[最速]JavaScript エンジン徹底比較」と題して、最近のブラウザ事情に聡いプログラマなら気になるであろう、最新 JavaScript エンジンの比較と検証記事を執筆されています。以下では、記事内容の簡単な紹介と一読した感想などを書いていきます。
[最速]JavaScript エンジン徹底比較 （ここから文体をいつもどおりに戻して&amp;hellip;）記事は三章から構成されており、それぞれの章題は：
 JavaScript エンジンの比較 SquirrelFish Extreme / WebKit の最適化手法 注目の Google Chrome に搭載された V8  である。
章題からも推測できるように、第一章が複数ベンチマークスイートによる各 JavaScript エンジンのパフォーマンス比較、第二章と第三章ではコンパイラと仮想機械の一般的な説明から始まり、WebKit の SquirrelFish Extreme、および Google の V8 が用いる最適化手法について多くのページが割かれている。
個々のトピックについては WEB 上にも詳細に解説されたサイトがあるものの、雑誌という紙媒体で、こうして一本にまとめられた情報は珍しいのではないだろうか&amp;hellip;って、普段、雑誌を読まない人が書いても説得力に乏しい。スミマセン。もっとも、珍しかろうが珍しくなかろうが、日本語で読める貴重な情報源のひとつであることに変わりはない。 特に、SquirrelFish Extreme で採用されている Polymorphic Inline Cache (PIC) や V8 の高速なプロパティ・アクセスを実現するための Hidden Class の解説は、現代的な動的言語の裏舞台を知る、という意味で興味深い。たとえ、言語処理系の実装詳細に興味がなくとも、普段使っている道具がどのように作られているかを知ることは益になるだろう。
最後に 今回、ひさしぶりに技術系雑誌を読んでみて、プロのライターと編集者による情報のパッケージングと、紙という媒体とレイアウトには、他のものには代えがたい価値がある、と感じた。腰を落ち着けて、プログラミングのさまざまなトピックスに触れるというのは、やはり、ワクワクする体験だ。</description>
    </item>
    
    <item>
      <title>道尾秀介「背の眼」</title>
      <link>http://ishikawa.github.io/2008/12/14/%E8%83%8C%E3%81%AE%E7%9C%BC/</link>
      <pubDate>Sun, 14 Dec 2008 08:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/12/14/%E8%83%8C%E3%81%AE%E7%9C%BC/</guid>
      <description>「向日葵の咲かない夏」が期待以上に楽しめた（精神的なダメージも大きかったが&amp;hellip;）ので、道尾秀介の他作品も読んでみることにした。もちろん、今後は期待値ハードルが上がっている。
選んだのは、これも文庫化されていた「背の眼」。著者のデビュー作だ。第五回ホラーサスペンス大賞特別賞を受賞しており、評価も高い。文庫版は上下巻二冊組だが、一冊の厚さが程々なので分量はそれほどでもない。
解説でも触れられているように京極夏彦『百鬼夜行シリーズ』からの影響が色濃く窺える。しかし、それも行き過ぎることはなく独自の要素が多いので、むしろ同シリーズの雰囲気が好きな人はより楽しめるのではないかと思う。デビュー作ゆえか荒削りな部分は残るものの、さまざまな謎と伏線が絡み合い、結末で「腑に落ちる」展開は熱に浮かされたような高揚感があり、本格ミステリ好きには堪らない。 個人的に、他の作品の文庫化を心待ちにしている作家のひとり。</description>
    </item>
    
    <item>
      <title>道尾秀介「向日葵の咲かない夏」</title>
      <link>http://ishikawa.github.io/2008/12/13/%E5%90%91%E6%97%A5%E8%91%B5%E3%81%AE%E5%92%B2%E3%81%8B%E3%81%AA%E3%81%84%E5%A4%8F/</link>
      <pubDate>Sat, 13 Dec 2008 12:06:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/12/13/%E5%90%91%E6%97%A5%E8%91%B5%E3%81%AE%E5%92%B2%E3%81%8B%E3%81%AA%E3%81%84%E5%A4%8F/</guid>
      <description>タイトルとあらすじから、ほろ苦い青春物語を連想していたら、凄惨な話で驚いた。
冒頭から痛ましい事件がつづく。主人公と、その家族が置かれた状況は過酷だ。感情を抑えた筆致が悲惨さを際立たせ、それが、まだ幼い主人公の視点を通して語られているのだと思うと、胸がしめつけられる。
未読の方のために詳しくは書かないが、いくつかのミステリー的な罠がしかけられている。これが、かなりの劇薬。アンフェア（というか、作者自身、そんなことは気にしていないと思う）ではあるが、筆者が結末に構築した世界は、実に見事な蜃気楼だ。まるで、砂漠にひとり、地図もなく取り残されたような気分になる。
禍々しい。非常に現代的なこの物語には、そんな古くさい形容詞がよく似合う。
向日葵の咲かない夏 (新潮文庫)</description>
    </item>
    
    <item>
      <title>GCC の警告オプションで一部の警告のみをエラー扱いにしたい</title>
      <link>http://ishikawa.github.io/2008/12/12/gcc-options-request-or-suppress-warnings-and-errors/</link>
      <pubDate>Fri, 12 Dec 2008 06:23:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/12/12/gcc-options-request-or-suppress-warnings-and-errors/</guid>
      <description>GCC の警告オプションでよく使うものといえば、以下のようなものがある：
 -Wall 一般的な警告を有効にする -Wextra (-W) -W が gcc 4 から分かりやすい名前に変更された（-W も有効） -Werror 警告をエラー扱いにする  -Wunused-parameter ところで、警告オプションのひとつ、-Wunused は -Wextra (-W) が有効な場合、-Wunused-parameter も有効にする。-Wunused-parameter は関数で使われていない引数があった場合に警告を出力するオプションだ。なお、-Wunused は -Wall によっても暗黙的に指定されるため、-Wextra (-W) と -Wall を両方指定したときも、-Wunused-parameter が有効になる。
このとき、もし、-Werror も有効になっていると、未使用の関数引数があった場合にコンパイルエラーになってしまう。意図した通りの動作ではあるものの、これでは都合が悪いときもある。たとえば、テスト駆動開発では関数の実装を空にしておくことがあるが、上記の場合は、これがエラーとなってしまう。
-Wno-unused-parameter Mac OS X Leopard (Xcode 3.1) に付属する gcc は Apple gcc 4.0 と 4.2 だが、デフォルトは gcc 4.0 が使われる。
% gcc --version i686-apple-darwin9-gcc-4.0.1 (GCC) 4.0.1 (Apple Inc. build 5490) Copyright (C) 2005 Free Software Foundation, Inc.</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; のコードを ActionScript に変換する Adobe Alchemy を試す</title>
      <link>http://ishikawa.github.io/2008/12/09/adobe-alchemy-first-impression/</link>
      <pubDate>Tue, 09 Dec 2008 08:34:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/12/09/adobe-alchemy-first-impression/</guid>
      <description>Adobe Labs の研究プロジェクト、コードネーム Alchemy を試してみた。同プロジェクトについては、すでに多くの方が書かれており、今更な感もあるが、以前に紹介記事を書いていることだし、備忘録も兼ねて残しておく。
Alchemy について Alchemy プロジェクトで配布されているツールを使うと、C/C++ コードで記述されたプログラムを ActionScript Virtual Machine (AVM2) で動作するように変換できる（AVM2 については Adobe ActionScript Virtual Machine 2 (AVM2) Overview (PDF, 400K) を参照）。
これはつまり、既存の C/C++ プログラムが Flash Player や AIR 上で動作することを意味している。また、C/C++ プログラムのコンパイルには LLVM を利用しており、そこで生成された中間コードが ActionScript 3.0 のソースコードに変換される（そのままバイトコードには変換しない）。その後、生成された ActionScript コードが Alchemy 独自の ActionScript コンパイラで ActionScript Byte Code (ABC) にコンパイルされるようだ。
 既存の C/C++ ライブラリの再利用に。特に OS 非依存なもの（例：オーディオ／ビデオ、XML パース、暗号処理、シミュレーション） CPU バウンドなプログラムなら Alchemy でコンパイルすると 10 倍ほども速くなるかもしれない。これは、LLVM による最適化の恩恵と、ByteArray に関する最適化された命令が理由（ActionScript コンパイラではまだ使われていない） C/C++ コードは ActionScript 3.</description>
    </item>
    
    <item>
      <title>Safari で開いているページのリンクを Evernote クライアントに送る</title>
      <link>http://ishikawa.github.io/2008/12/09/copy-link-to-evernote-client-applescript/</link>
      <pubDate>Tue, 09 Dec 2008 03:37:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/12/09/copy-link-to-evernote-client-applescript/</guid>
      <description>最近、プログラミング関係のまとめやインストール手順の記録といったものには Evernote を利用している。
画像中の手書き文字認識や「脳を拡張する」といった誇大広告ばかりが取り沙汰されるサービスだが、単純にメモツールとして優れており、特に Mac クライアントと iPhone クライアントの出来がすばらしい。
Evernote: Mac クライアント プログラミング関係の話題をノートにまとめていると、興味深いページへのリンクを多く埋め込むことになる。ノートの編集は Mac のクライアントで行うことが多いのだが、この作業がけっこう面倒だ：
 Safari で開いているページのタイトルをコピーして、Evernote クライアントにペースト コピーしたタイトルを選択 リンクを追加するためのシートを表示 Safari で開いているページの URL をコピーして、Evernote クライアントにペースト OK ボタンをクリック  この手順を毎回、繰り返さなければならない。慣れれば無意識に出来るような単純作業ではあるが、単純作業なら自動化した方がいい。
AppleScript Mac で自動化といえば AppleScript の出番なのだが、残念ながら Mac 向け Evernote クライアントの AppleScript 対応は今回の要件には不十分である。そのため、今回は System Events による GUI スクリプティングにより、上記手順のキー操作やボタンクリックをエミュレートすることにした。
-- EvernoteCopyLink.applescript -- Copy title and URL in the front most window of Safari to Evernote with link -- Author: Takanori Ishikawa on copyLinkToEvernote(theTitle, theURL) tell application &amp;quot;System Events&amp;quot; -- copy &amp;amp;amp; paste set the clipboard to theTitle as text keystroke &amp;quot;v&amp;quot; using command down tell process &amp;quot;Evernote&amp;quot; -- Select pasted text -- Note 1: &#39;ASCII character 28&#39; means &#39;move left&#39;.</description>
    </item>
    
    <item>
      <title>Cocoa で独自の Text View を実装する</title>
      <link>http://ishikawa.github.io/2008/11/08/cocoa-custom-text-view/</link>
      <pubDate>Sat, 08 Nov 2008 03:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/11/08/cocoa-custom-text-view/</guid>
      <description>iPhone も盛り上がっていることだし、ひさしぶりに Cocoa プログラミングを始めてみる。
Mac Dev Center をつらつらと眺めてみると、Managing Concurrency with NSOperation という記事に興味が湧く。NSOperation と NSOperationQueue（優先順位付きキュー）を使うことで、タスクのスケジューリングと並行処理が手軽に行えるようになったようだ。Java の concurrency パッケージに感銘を受けた身としては、こういう拡張は嬉しい。今後、マルチスレッドが必要になったときに、改めて詳しく調べてみよう。
テキストシステム周りも、ひところに比べると充実してきている。Mac OS X 10.3 では NSATSTypesetter が公開された。更に Mac OS X 10.5 では NSTextInputClient プロトコルと Input Method Kit が追加されている（他にもあるかも）。
さて、Cocoa プログラミングのリハビリとして、今回は独自の Text View を実装してみようと思う。
ここでいう Text View とは NSTextView のように、IM からの入力を受け取り、テキストを表示、編集できるクラスのことだ。エディタやワープロといったアプリケーションを開発するときには必要になってくるだろう。
NSView のサブクラス ドキュメントによると、独自の Text View を実装する場合は NSTextView のサブクラスか、NSView のサブクラスを作るようなので、今回は NSView のサブクラスとして作成することにする。
NSView のサブクラスを作るとして、名前は単純に MyTextView としよう。まずは MyTextView.h で、クラスの @interface を書く。
#import &amp;amp;lt;Cocoa/Cocoa.h&amp;amp;gt; @interface MyTextView : NSView { NSMutableAttributedString *_text; } @end  インスタンス変数として NSMutableAttributedString をひとつ持つ。ここに表示、編集するテキストの内容を保持するわけだ（MVC も糞もない設計だが、今回のはあくまで例なので単純さを優先する）。</description>
    </item>
    
    <item>
      <title>Google App Engine 1.1.3 の zipserve で静的ファイルをまとめてアップロード</title>
      <link>http://ishikawa.github.io/2008/10/03/google-app-engine-113-zipserve/</link>
      <pubDate>Fri, 03 Oct 2008 05:48:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/10/03/google-app-engine-113-zipserve/</guid>
      <description>Google App Engine SDK 1.1.3 で追加された zipserve を使うと、静的ファイルを zip にまとめてアップロードできるらしい。ただ、Developer&amp;rsquo;s Guide 内を検索してもドキュメントが見つからない。しかたがないので、ソースコードのコメントを頼りに zipserve を試してみる。
zipserve するもの 今回は、このブログのレイアウトに使っている CSS フレームワークの YAML を zipserve したいと思う。ファイル数もそれなりにあり、しかも、まず変更することはないので、zipserve するにはうってつけなのだ。
app.yaml YAML の CSS ファイルは /stylesheets/yaml/ 以下に置いてあるので、まずは app.yaml で以下のように設定する。
- url: /stylesheets/yaml/.* script: $PYTHON_LIB/google/appengine/ext/zipserve  $PYTHON_LIB/google/appengine/ext/zipserve というのが、さきほどソースコードをみた zipserve モジュールなのが分かるだろう。
zip ファイルの作成と設置 アプリケーション側の設定もすんだし、zip ファイルをつくるわけだが、そのまえに実際に配置されるファイルと zip ファイルの対応関係を確認しておこう。
URL で指定されたパスの最初のディレクトリが zip ファイル名、それ以降が zip 内のファイルパスになる。
つまり、今回の例でいうと、/stylesheets/yaml/core/base.css というリクエストに対して、stylesheets.zip から yaml/core/base.css が返されるわけだ。また、zip ファイルはアプリケーションのルートディレクトリに置くようだ。
それでは早速、zip コマンドで zip ファイルをつくってみよう。
% zip -r -9 stylesheets.</description>
    </item>
    
    <item>
      <title>Google App Engine で Django 1.0 を動かす</title>
      <link>http://ishikawa.github.io/2008/10/02/running-django-1-0-on-google-app-engine/</link>
      <pubDate>Thu, 02 Oct 2008 10:26:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/10/02/running-django-1-0-on-google-app-engine/</guid>
      <description>このブログは Google App Engine と Django で動かしているのだが、いままで Django はすこし古い開発版を使っていた。
しかし、先頃めでたく Django 1.0 もリリースされたことだし、このブログも最新の開発版にアップデートすることにした。とりあえず、すこしソースコードを修正するだけで、動くだけは動いたので、変更点を残しておく。もっとも、このブログは機能がすくない分、Django に依存している箇所もすくないので、他のプログラムではこれ以上の修正が必要かもしれない。
また、Django を Google App Engine 上で動かす方法については、もともと、Running Django on Google App Engine を参考にしている。そのため、他の手段、たとえば Google App Engine Helper for Django を使っている人にとっては、この記事は役に立たないだろう。
django.dispatch.dispatcher.connect django.dispatch.dispatcher.connect, django.dispatch.dispatcher.disconnect は使えなくなっていた。
--- ../metareal.django.0.9/main.py 2008-06-06 17:33:42.000000000 +0900 +++ ./main.py 2008-10-02 21:14:00.000000000 +0900 @@ -53,20 +53,17 @@ import django.core.handlers.wsgi import django.core.signals -import django.db -import django.dispatch.dispatcher +from django.db import _rollback_on_exception +from django.core import signals def log_exception(*args, **kwds): logging.</description>
    </item>
    
    <item>
      <title>Python の dis モジュールでさまざまな import 文を disassemble する (2)</title>
      <link>http://ishikawa.github.io/2008/09/25/disassembling-python-import-statements-take2/</link>
      <pubDate>Thu, 25 Sep 2008 17:39:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/09/25/disassembling-python-import-statements-take2/</guid>
      <description>前回の記事への追記が長くなりそうなので、新しい記事にまとめました。
import  と import  as  import &amp;lt;module&amp;gt; と import &amp;lt;module&amp;gt; as &amp;lt;name&amp;gt; では、どのようなバイトコードにコンパイルされるか、つまり、実行時の振る舞いが微妙に異なることに注意しよう。
&amp;gt;&amp;gt;&amp;gt; dis.disassemble(compile(&#39;import os.path&#39;, &#39;&#39;, &#39;exec&#39;)) 1 0 LOAD_CONST 0 (-1) 3 LOAD_CONST 1 (None) 6 IMPORT_NAME 0 (os.path) 9 STORE_NAME 1 (os) 12 LOAD_CONST 1 (None) 15 RETURN_VALUE &amp;gt;&amp;gt;&amp;gt; dis.disassemble(compile(&#39;import os.path as os_path&#39;, &#39;&#39;, &#39;exec&#39;)) 1 0 LOAD_CONST 0 (-1) 3 LOAD_CONST 1 (None) 6 IMPORT_NAME 0 (os.path) 9 LOAD_ATTR 1 (path) 12 STORE_NAME 2 (os_path) 15 LOAD_CONST 1 (None) 18 RETURN_VALUE  前者では IMPORT_NAME os.</description>
    </item>
    
    <item>
      <title>Python の dis モジュールでさまざまな import 文を disassemble する</title>
      <link>http://ishikawa.github.io/2008/09/25/disassembling-python-import-statements/</link>
      <pubDate>Thu, 25 Sep 2008 09:34:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/09/25/disassembling-python-import-statements/</guid>
      <description>Python Reference Manual の 6.12 The import statement を参考に、さまざまな形式の import 文を dis モジュールで disassemble してみた。
import &amp;hellip; まずは、もっとも単純な import ...
&amp;gt;&amp;gt;&amp;gt; dis.disassemble(compile(&#39;import os&#39;, &#39;&#39;, &#39;exec&#39;)) 1 0 LOAD_CONST 0 (-1) 3 LOAD_CONST 1 (None) 6 IMPORT_NAME 0 (os) 9 STORE_NAME 0 (os) 12 LOAD_CONST 1 (None) 15 RETURN_VALUE  IMPORT_NAME で import するモジュールが指定されていることが分かる。では、as を使って別名をつけるとどうなるだろうか。
&amp;gt;&amp;gt;&amp;gt; dis.disassemble(compile(&#39;import os as os2&#39;, &#39;&#39;, &#39;exec&#39;)) 1 0 LOAD_CONST 0 (-1) 3 LOAD_CONST 1 (None) 6 IMPORT_NAME 0 (os) 9 STORE_NAME 1 (os2) 12 LOAD_CONST 1 (None) 15 RETURN_VALUE  STORE_NAME の引数が os から os2 に変わった。つまり、登録するシンボル名は STORE_NAME で指定されるということだろう。</description>
    </item>
    
    <item>
      <title>O記法で対数の底が省略される理由</title>
      <link>http://ishikawa.github.io/2008/09/07/logarithm-and-big-o-notation/</link>
      <pubDate>Mon, 08 Sep 2008 02:25:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/09/07/logarithm-and-big-o-notation/</guid>
      <description>プログラムにスピードを求めるなら多項式時間アルゴリズム、特に対数時間で解けるアルゴリズムが重要になる。なにしろ、Steven S. Skiena 氏がその著書 &amp;ldquo;The Algorithm Design Manual&amp;rdquo; で述べているように、Logarithm is an anagram of algorithm なのだ。
ところで、アルゴリズムの性能評価でお世話になる O 記法では、対数の底がしばしば省略される。たとえば、n 個のデータから二分探索で検索する場合、時間計算量は O(log2n) だが、これを O(log n) と表記することがある。
では、どうして、対数の底を省略するのだろうか？
恥ずかしながら、いままで「まあ、省略しても対数時間ということは分かるし、 そういうもんなんだろう」程度にしか考えていなかったが、書籍「アルゴリズムデザイン」に分かりやすい説明があった。
説明 まず、対数自体を忘れかけている自分自身のために、ものすごく基本的なところから。対数 logbn とは bx = n になる x に等しい数のことである。
そして、底の変換公式により、異なる底をもつ対数同士を相互に変換できる。

そして、右辺を変形すると：

ここで大事なのは、1/logba は定数になる、ということだ。
つまり、左辺と右辺では定数係数のみが異なることになる。O 記法においては定数係数は無視できるため、異なる底をもつ対数は等価とみなせる。よって、O 記法では対数の底がしばしば省略されるのである。
但し書き 最後に、ふたつばかり但し書きを。
書籍「アルゴリズムデザイン」では上記の説明を、最終的に：

となることから結論づけているが、O 以外の記号を導入するのが面倒だったので、この記事の説明では端折ってある。
また、使用している数式の画像は Formula という Web サービスを利用した。Formula は LaTex 形式で入力された数式の画像を生成し、簡単に貼りつけられるようにしてくれるサービスである（参考：Formula: 数式をブログに貼り付けて共有するサービス - Hello, world! - s21g）。</description>
    </item>
    
    <item>
      <title>Google Chrome に搭載されたオープンソースの JavaScript エンジン &#34;v8&#34; を試す</title>
      <link>http://ishikawa.github.io/2008/09/03/getting-started-with-v8-google-open-source-javascript-engine/</link>
      <pubDate>Wed, 03 Sep 2008 09:28:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/09/03/getting-started-with-v8-google-open-source-javascript-engine/</guid>
      <description>その発表から世間を騒がせた、Google の Web ブラウザ Chrome が遂に公開された。
Mac ユーザなうえに、日々の Web ブラウジングは Safari と iPhone で満足していることもあり、Chrome 自体への興味は薄い。しかし、オープンソースの JavaScript エンジンも独自開発している、となると話は別だ。しかも、Strongtalk や HotSpot Java VM の開発者が関わっている、というのだから俄然興味が湧いてくる（参考記事）。
Google が開発、公開している JavaScript 処理系は、その名も v8。
v8 の特徴 では、v8 には既存の処理系に比べて、どのような利点があるのだろうか。Google がわざわざ独自に開発し、Chrome という重要なプロダクトに搭載して公開するくらいだから、そこには他の処理系では達成できないアドバンテージがあるはずである。
Google Code で公開されている文書 Design Elements から概観をつかんでみよう。
オブジェクトのプロパティへのアクセスが高速 JavaScript ではオブジェクトのプロパティを自由に追加・削除できる。
これを実現するためには、ハッシュ表や二分木といった辞書による実装が一般的だが、そうするとプロパティにアクセスするたびに辞書を検索しなくてはいけない。
v8 では hidden class という実装テクニックを用いることにより、オブジェクトのプロパティへのアクセス方法が、オブジェクトの格納されているメモリのオフセットへのアクセスとなる。そのため、無駄な検索を省くことができ、高速なアクセスを実現している。
動的なマシンコード生成 JavaScript のコードは最初に実行されるときにマシンコードに変換される。バイトコードやインタプリタはない。また、プロパティへのアクセスは特別扱いされ、インライン・キャッシュという Smalltalk 実装系由来の技法が使われているらしい（参考：Efficient Implementation of the Smalltalk-80 System）
効率的なガベージコレクション v8 のガベージコレクションの特徴は以下のとおりである：
 stop-the-world ガベージコレクション中はプログラムが停止する 世代別ガベージコレクション 一度のガベージコレクションではオブジェクトの一部のみを検査することにより、プログラム停止時間を短縮 &amp;ldquo;保守的&amp;rdquo;ではない このため、未使用のオブジェクトをポインタと判定してしまい、メモリリークすることがない メモリ・コンパクションができる メモリのフラグメンテーションを防ぐ  総じて、バランスの良い実装を選びながら、特にメモリ効率に気をつかっている印象を受ける。</description>
    </item>
    
    <item>
      <title>Python でプロパティリストを読み込む</title>
      <link>http://ishikawa.github.io/2008/08/04/propertylist-parser-for-python/</link>
      <pubDate>Tue, 05 Aug 2008 12:21:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/08/04/propertylist-parser-for-python/</guid>
      <description>Python でプロパティリストを読み込み、オブジェクトに変換するライブラリ plist_parser を書いた。GitHub で公開している。Python 2.4 以降で動作確認済み。ただし、対応するフォーマットは XML のみで、書き込みにも対応していない。
使い方は至って単純だ。たとえば、以下のプロパティリストは iTunes Music Library.xml から一部抜粋したものだが、
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;Track ID&amp;lt;/key&amp;gt; &amp;lt;integer&amp;gt;4154&amp;lt;/integer&amp;gt; &amp;lt;key&amp;gt;Artist&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;Megadeth&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;Name&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;Architecture Of Aggression&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;Date Added&amp;lt;/key&amp;gt; &amp;lt;date&amp;gt;2008-06-23T12:20:17Z&amp;lt;/date&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt;  このプロパティリストが music.xml という名前で保存されているとして、このファイルを読み込んでオブジェクトに変換するコードは以下のとおり。
from plist_parser import XmlPropertyListParser, \ PropertyListParseError f = open(&#39;music.plist&#39;) try: print XmlPropertyListParser().parse(f) # =&amp;gt; # { # &#39;Date Added&#39;: datetime.datetime(2008, 6, 23, 12, 20, 17), # &#39;Track ID&#39;: 4154, # &#39;Name&#39;: &#39;Architecture Of Aggression&#39;, # &#39;Artist&#39;: &#39;Megadeth&#39; # } except PropertyListParseError: raise finally: f.</description>
    </item>
    
    <item>
      <title>C 言語で書かれたソフトウェアが Flash で動くようになるかもしれない</title>
      <link>http://ishikawa.github.io/2008/07/06/running-legacy-applications-on-flash-player/</link>
      <pubDate>Sun, 06 Jul 2008 09:35:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/07/06/running-legacy-applications-on-flash-player/</guid>
      <description>lucille development blog 経由。
Running C and Python Code on The Web によると、Adobe の Scott Petersen 氏が大変興味深いツールを開発中のようだ。このツールを使うと、C 言語で書かれたソフトウェアを Flash Player で実行できるようになる。また、このツールはオープンソースで公開されるとのこと。
LLVM, Tamarin ソフトウェアを Flash Player で実行可能な形式に変換するためには、ソフトウェアのソースコードが必要になる。変換の手順は以下のとおり。
 C 言語で書かれたソースコードを llvm-gcc で LLVM のアセンブリにコンパイルする LLVM のアセンブリを ActionScript で実装した独自 VM 向けの命令群に変換する  ActionScript で実装された独自 VM は、Flash Player の Tamarin VM で実行される、というカラクリだ。
先進的な最適化を備えたバックエンドとして注目を集める LLVM プロジェクトだが、その成果物を、フロントエンドとして利用しているのが面白い（もちろん、LLVM アセンブリの段階でも、定数畳み込みやデッドコード削除といった従来の最適化は施されているはずなので、フロントエンドとしてのみ利点があるわけではない）。
Quake, Nintendo もっとも、命令単位の変換はそれほど難しいものでもないし、実用的なアプリケーションが動作するのかどうか、気になるところだ。そこで、コンパイラだけではなく、インフラも整備されている。
 POSIX API Flash のマルチメディア機能を操作するためのライブラリ ネイティブのバイト配列など、Tamarin VM への機能追加  結果として、さまざまな種類のソフトウェアが、実用的な速度で動作するらしい。
Mozilla で行われたデモでは、Quake や、C 言語で書かれたエミュレータでゼルダが動いていた、しかも、ゲームは操作でき BGM も再現されていた、というのでなかなかのインパクトだ（ただ、2.</description>
    </item>
    
    <item>
      <title>kilim で Java でもジェネレーター</title>
      <link>http://ishikawa.github.io/2008/06/26/java-generater-by-using-kilim/</link>
      <pubDate>Fri, 27 Jun 2008 03:41:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/06/26/java-generater-by-using-kilim/</guid>
      <description>Twitter と Erlang をきっかけに注目を集めるようになった軽量プロセス（とかマイクロスレッドとか）を Java で実現するためのライブラリに kilim があります。
 Isolation-typed actors for Java (PDF) InfoQ: Kilim - actors and message passing in Java  夜中に突然 Java が書きたくなって、まだ、Examples を動かしてみた程度ですが、とりあえず Python のジェネレーターっぽいことができるのは分かったので記事にしておきます。暇と知識が増えたら、もうすこし突っ込んだ記事もあげる予定です（自信がないので今回、ですます調）。
ジェネレーターの例 では、本当につまらない例です。フィボナッチ数を求めるプログラムをどうぞ。
import kilim.Generator; import kilim.pausable; public class Fib extends Generator&amp;lt;Integer&amp;gt; { public @pausable void execute() { // (1) int fib1 = 0; int fib2 = 1; while (true) { yield(fib1); // (2) fib2 = fib1 + fib2; fib1 = fib2 - fib1; } } public static void main(String[] args) { final Fib fib = new Fib(); for (int i = 0; i &amp;lt;= 10; i++) { System.</description>
    </item>
    
    <item>
      <title>Flickr の JSON フィードで自作ブログパーツ</title>
      <link>http://ishikawa.github.io/2008/06/15/display-flickr-photos-on-your-website-using-json-feed-api/</link>
      <pubDate>Sun, 15 Jun 2008 10:09:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/06/15/display-flickr-photos-on-your-website-using-json-feed-api/</guid>
      <description>写真を撮るのが好きじゃない。
カメラは荷物になるし、壊れやすいから気をつかう。いざ撮影になると、バッグから取り出して、電源ボタンを押す、レンズを向ける、ピントを合わせて、と面倒だ。衆人環視の中、うんうん唸りながらシャッターを切るのも粋じゃない。
では、何が楽しくて写真を撮るのかといえば、補正が楽しい。Photoshop Elements の自動補正がよく出来ていて、何も考えずにボタンを押していくだけで、それなりの見栄えになってくれる。これは楽しい（ただし、たまに自力で補正に挑戦しても、自動補正の方がキレイで気分が悪い）。
そのうち、出来上がった写真を他人に見せびらかしたくなるのが自然の流れ。写真を Flickr にアップロードするようになった。さらに、このブログをリニューアルするさいには、Flickr にアップロードした写真を表示するブログパーツを追加するつもりだった。
公式のブログパーツは Flickr Badge という名前で Flash 版と HTML 版が用意されている。しかし、いくつかの理由により、どちらも使う気になれなかった。幸い、Flickr ではさまざまなフィードが提供されている。これらを利用すれば、自作のブログパーツをつくるのは難しくない。
公式ブログパーツの不満点 提供されているもので満足なら自作する必要はない。公式ブログパーツの不満点も挙げておこう。
まずは、Flash 版だが、
 サムネイルがちいさい 一定時間ごとにアニメーションで拡大するのは面白いが、読者からすれば煩わしいものだ  という不満がある。
一方、HTML 版はというと、サムネイルの大きさは選択可能、レイアウトも CSS で設定できるので自由度も高い。ただし、ブログパーツを挿入するための JavaScript が好みじゃない（以下、一部整形済み）。
var b_txt = &#39;&#39;; b_txt+= &#39;&amp;lt;div class=&amp;quot;flickr_badge_image&amp;quot; id=&amp;quot;flickr_badge_image1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://www.flickr.com/photos/ishikawa_takanori/2555186680/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://farm4.static.flickr.com/3006/2555186680_7c18b8cc1a_s.jpg&amp;quot; alt=&amp;quot;A photo on Flickr&amp;quot; title=&amp;quot;BUFFET STYLE&amp;quot; height=&amp;quot;75&amp;quot; width=&amp;quot;75&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&#39;; b_txt+= &#39;&amp;lt;div class=&amp;quot;flickr_badge_image&amp;quot; id=&amp;quot;flickr_badge_image2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://www.flickr.com/photos/ishikawa_takanori/2555186616/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://farm4.static.flickr.com/3140/2555186616_823d69311e_s.jpg&amp;quot; alt=&amp;quot;A photo on Flickr&amp;quot; title=&amp;quot;spaghetti with Genova style basil sauce&amp;quot; height=&amp;quot;75&amp;quot; width=&amp;quot;75&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&#39;; b_txt+= &#39;&amp;lt;div class=&amp;quot;flickr_badge_image&amp;quot; id=&amp;quot;flickr_badge_image3&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>280Slides in Objective-J</title>
      <link>http://ishikawa.github.io/2008/06/06/280slides-in-objective-j/</link>
      <pubDate>Fri, 06 Jun 2008 12:42:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/06/06/280slides-in-objective-j/</guid>
      <description>280Slides という Web サービスがすごい。
 Dru’s Blog » New Web Site in Objective-C via Javascript New 280 Slides Web Site translates Objective-C to Javascript | reddit  Keynote 風のプレゼンテーションツールとしての UI も素晴らしいが、圧巻なのは、その実装技術。
「どんな JavaScript や Flash を使ってるんだ？」と思うだろう。さあ、FireBug なり Safari の Web インスペクタなりで、ページに読み込まれているスクリプトを確認してみよう。その大半が馴染みのない拡張子 .j であることに驚くに違いない。
 main.j Document.j DocumentController.j  上にあげたのは、.j ファイルの一例だが、あなたが Mac OS X の開発者であれば、見覚えのある名前ばかりだろう。これは Mac OS X の MVC フレームワーク Cocoa を構成するクラス名と酷似している。
Objective-J 試しに DocumentController.j を覗いてみようか。
// // DocumentController.j // Editor // // Created by Francisco Tolmasky.</description>
    </item>
    
    <item>
      <title>Django のキャッシュで Google App Engine の Memcache API を使う</title>
      <link>http://ishikawa.github.io/2008/05/29/django-cache-framework-meets-appengine-memcache-api/</link>
      <pubDate>Thu, 29 May 2008 01:48:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/05/29/django-cache-framework-meets-appengine-memcache-api/</guid>
      <description>Google App Engine ブログで新しい動きがあった。トピックは以下の通り。
 アカウント数の制限を撤廃 課金の料金体系について 画像操作のための API Memcache API  どれひとつとっても、重大な発表ばかりだ。プラットホームとしての Google App Engine に注目している方は 1. 2. が特に気になるだろうし、利用者からすれば、3. 4. は待ち焦がれていた機能だろう。
重いページをキャッシュする このブログを Google App Engine に移行して一週間が経った。しかし、Admin Console でログを確認してみると、ところどころで警告が出ている。
 &amp;quot;GET /index.xml HTTP/1.1&amp;quot; 200 117413 - - ... This request used a high amount of CPU, and was roughly 5.5 times over the average request CPU limit. High CPU requests have a small quota, and if you exceed this quota, your app will be temporarily disabled.</description>
    </item>
    
    <item>
      <title>XViewMiddleware の謎</title>
      <link>http://ishikawa.github.io/2008/05/24/django-xview-middleware-tour/</link>
      <pubDate>Sat, 24 May 2008 09:12:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/05/24/django-xview-middleware-tour/</guid>
      <description>疑問に思ったことはないだろうか。
Django の Middleware（和訳）である。まずは、settings.py を見てほしい。
MIDDLEWARE_CLASSES = ( &#39;django.middleware.common.CommonMiddleware&#39;, &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;, &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;, &#39;django.middleware.doc.XViewMiddleware&#39;, )  デフォルトではこのような設定になっている。上から三つは問題ないだろう。名前からだいたいの機能は想像できるはずだし、おそらくあなたは間違っていない。
MIDDLEWARE_CLASSES = ( ... &#39;django.middleware.doc.XViewMiddleware&#39;, )  問題はこれだ。XViewMiddleware ——名前だけでは、どんな働きをするのか見当もつかない。
XViewMiddleware を試す まずはドキュメントを読んでみようか。XViewMiddleware のドキュメント（和訳）によると、
 Sends custom X-View HTTP headers to HEAD requests that come from IP addresses defined in the INTERNAL_IPS setting. This is used by Django’s automatic documentation system.
 INTERNAL_IPS 設定に定義されている IP アドレスから来た HEAD リクエストに 対してカスタムの X-View HTTP ヘッダを送信します。このミドルウェアは Django の自動ドキュメントシステムで使われています。
まとめると、XViewMiddleware は、</description>
    </item>
    
    <item>
      <title>Google App Engine への移行</title>
      <link>http://ishikawa.github.io/2008/05/20/porting-weblog-to-google-app-engine/</link>
      <pubDate>Tue, 20 May 2008 07:39:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/05/20/porting-weblog-to-google-app-engine/</guid>
      <description>ここ数日というもの、Mac の前に座ってやっていたことといえば、Twitter か RSS フィードの消化か、でなければブログの移行作業だ。
もともと、このブログは Wordpress で運営していたのだが、色々と不満もたまってきたので、いつの日かつくりなおしたい、と思っていた。おりしも Django の勉強をはじめたばかりである。ちょうどよい。教材代わりに簡単なブログシステムを細々とつくっていた。
それを更に、Google App Engine に移植しましたよ、というのが今回のお話。
Google App Engine に移植した理由 まずは、Google App Engine（以下、GAE）に移植した理由から説明させてほしい。いままで Wordpress を動かしていたサーバでそのまま新しいブログシステムを動かすこともできた。
それでも、わざわざ時間を割いてまで GAE に移植したのは、GAE が話題になってるとか、Django が使えるらしい、というのも重要だったが、自宅サーバの管理から解放されたい 、という理由が実は一番大きい。
うん、自宅サーバの、しかも個人ブログの管理の手間なんて、たかがしれている（そりゃ、セキュリティとかは神経使うけどさ）。それよりは今後、もし、転居や契約している回線業者を変更する場合を考えると、そのあいだは自宅サーバは停めなきゃならないわけで、いまのうちに GAE に移植しておけば、あとあと困らないだろう、というわけである。
実際の移植作業には 4 日程度を要した。
GAE のオンラインドキュメント を参考に、ほとんど単純作業による変換だったが、細かい変更や思わぬ問題などもあったので、開発中にとったメモを片手につらつらと書いてみる。
Django Django は Running Django on Google App Engine を参考に、開発版のものを動かしている。
GAE では Django の Database API（和訳）は動作せず、GAE の Datastore API を使う必要があるが、当然の帰結として、Database API に依存した機能やアドオンも使えない。Django の売りのひとつである Admin Interface も、サイトマップを手軽に生成できる Sitemap framework も、Generic View でさえ使えない。また、Sites も RequestSite オブジェクトで代替してやらなくてはいけない。</description>
    </item>
    
    <item>
      <title>Django のテンプレートでフォームの要素が hidden かどうかを調べる</title>
      <link>http://ishikawa.github.io/2008/05/12/checking-whether-field-has-a-hidden-widget-in-django-template/</link>
      <pubDate>Mon, 12 May 2008 10:37:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/05/12/checking-whether-field-has-a-hidden-widget-in-django-template/</guid>
      <description>Django の newforms library は、それだけでちいさな MVC の世界だ。テキストフィールドやラジオボタンといった View は django.newforms.widgets の Widget クラスとそのサブクラスが担当している。
フォーム要素の HTML をテンプレートで出力する簡単な例は以下のとおり。
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt; {% for field in form %} {{ field.label_tag }} {{ field }}&amp;lt;br /&amp;gt; {% endfor %} &amp;lt;input type=&amp;quot;submit&amp;quot; /&amp;gt; &amp;lt;/form&amp;gt;  しかし、このままだと hidden 要素でも  が出力されて具合が悪い。
実は、Widget クラスには is_hidden という、その要素が hidden 要素の場合は True を返すメソッドが定義されているので、テンプレート中でこれをチェックすればいい。
&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt; {% for field in form %} {% if field.field.widget.is_hidden %} {{ field }} {% else %} {{ field.</description>
    </item>
    
    <item>
      <title>Django の urlresolvers.py を読む</title>
      <link>http://ishikawa.github.io/2008/04/22/django-code-reading-core-urlresolvers/</link>
      <pubDate>Tue, 22 Apr 2008 10:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/04/22/django-code-reading-core-urlresolvers/</guid>
      <description>一身上の都合により Django の URL dispatcher について調べている。ドキュメントでだいたいの動作は把握したので、今回は urls.py に定義した URL のマッピングが実際にはどのように解決されているのか、ソースコードを読むことで理解を深めたい、と思う。
なお、参照したソースコードは SVN の Revision 7438 である。公開リリースの 0.96.1 とは内容が大きく異なる可能性があること、 Trac での議論やドキュメントを読むかぎり、このへんの実装については今後大きく変更されるかもしれないことを、あらかじめお断りしておく。
urlresolvers.py まずは、調べるソースコードを特定しよう。URL の逆マッピングをしてくれる reverse() 関数が用意されていることは分かっているので、これを手がかりにソースコードを探すのがよさそうだ。
試しに def reverse( を検索してみると、簡単に見つかった。django/core/urlresolvers.py で定義されている。ソースコードのコメントにも、
 This module converts requested URLs to callback view functions.
 と書かれているので、これが探していたソースコード（モジュール）だろう。
reverse() と resolve() urlresolvers.py では reverse() だけでなく、resolve() も定義されている。
def resolve(path, urlconf=None): return get_resolver(urlconf).resolve(path) def reverse(viewname, urlconf=None, args=None, kwargs=None): args = args or [] kwargs = kwargs or {} return iri_to_uri(u&#39;/&#39; + get_resolver(urlconf).</description>
    </item>
    
    <item>
      <title>ruby-openid でログの出力先を変更する</title>
      <link>http://ishikawa.github.io/2008/04/18/ruby-openid-util-logger/</link>
      <pubDate>Fri, 18 Apr 2008 07:41:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/04/18/ruby-openid-util-logger/</guid>
      <description>ruby-openid は Ruby の OpenID ライブラリだが、そのままだとログの出力先が標準エラー出力に向けられている。これでは何かと困ることもあるだろう（たとえば、ユニットテストの結果に ruby-openid のデバッグ出力が混じって鬱陶しい、とか）。
幸い OpenID::Util モジュールに、内部で使われているロガーを変更するためのメソッドが用意されている。以下のようにすれば、Rails 標準のロガーに置き換えることが可能だ。
# ruby-openid の Logger を Rails 標準のもので置き換える OpenID::Util.logger = RAILS_DEFAULT_LOGGER  RAILS_DEFAULT_LOGGER 定数など、Rails のロガー周りについては Wiki のまとめが参考になる。</description>
    </item>
    
    <item>
      <title>Django と Python-Markdown 1.7 で UnicodeDecodeError</title>
      <link>http://ishikawa.github.io/2008/04/14/python-markdown-1-7-with-django/</link>
      <pubDate>Tue, 15 Apr 2008 08:57:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/04/14/python-markdown-1-7-with-django/</guid>
      <description>Python Markdown の最新版である 1.7 を Django で使うと、日本語など ASCII 以外の文字で UnicodeDecodeError が発生する。
MARKDOWN-CRITICAL: &amp;quot;UnicodeDecodeError: Markdown only accepts unicode or ascii input.&amp;quot;  すでにチケットも登録されているが、とりあえず古いバージョンに戻すのがよさそう。1.6b はバグで同様のエラーが出るようなので、1.6a にしよう。
% sudo easy_install markdown==1.6a  蛇足だが、この問題を調べている途中で見つけた。python-markdown2 という、別の Markdown ライブラリも存在するようだ。</description>
    </item>
    
    <item>
      <title>Django のモデルで日本語を使うと UnicodeEncodeError が発生する</title>
      <link>http://ishikawa.github.io/2008/04/11/django-unicode-encode-error/</link>
      <pubDate>Sat, 12 Apr 2008 07:16:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/04/11/django-unicode-encode-error/</guid>
      <description>ちょっと前から Django で遊んでいる。教則本代わりの Django Book も含めて、完成度の高さに驚くことしきり。
ただ、実際に管理インターフェースでモデルの詳細を表示しようとすると、UnicodeEncodeError とかいう嫌らしいエラーが出て、萎える。
しかたなく python UnicodeEncodeError django で検索したら sitecustomize.py でデフォルトのエンコーディングを変更するとか、いや、str 関数に渡したい場合はそりゃそうなんだろうけど、せっかくフレームワーク使ってるんだし、この解決法じゃないんだろうな、っていうのしか見つけられなくてますます萎えてたわけだけど、やっと納得できる解決法が見つかったので残しておく。
ちなみに ``svn trunk`` な Django を使っている。
System Message: WARNING/2 (&amp;lt;string&amp;gt;, line 7); backlink
Inline literal start-string without end-string.
モデルには str ではなく unicode を実装する Django オンラインドキュメント和訳の str() と unicode() のどちらを使うべきかに、そのものズバリの回答があった。
 モデルに str() メソッドを定義する代わりに unicode() メソッドを実装するよう推奨します． unicode() メソッ ドの中では，モデルのフィールド値を使って好きな値を作成でき，その値がバイト 文字列として適切に表現されるかを気にせず返してかまいません
 本当だ。モデルに書いていた str メソッドを unicode に変えるだけで解決しちゃったよ。
force_unicode エラーのスタックトレースを辿って、Django の django/utils/encodings.py を見てみると、
def force_unicode(s, encoding=&#39;utf-8&#39;, strings_only=False, errors=&#39;strict&#39;): .</description>
    </item>
    
    <item>
      <title>Mac の Python をビルドするときに GNU Readline ライブラリを有効にする</title>
      <link>http://ishikawa.github.io/2008/04/11/building-readline-enabled-python-on-mac/</link>
      <pubDate>Fri, 11 Apr 2008 10:05:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/04/11/building-readline-enabled-python-on-mac/</guid>
      <description>Mac OS X では GNU の Readline ライブラリがインストールには含まれておらず、Readline 互換の Libedit というライブラリへのシンボリックリンクとなっている（こうなっている理由はライセンス上の問題からだと思われる。GNU の Readline ライブラリは GPL で、Libedit は BSD ライセンスだ）。
しかし、これが原因で Readline 対応のプログラムがコンパイルできない、コンパイルできてもヒストリ機能などが使えない、といった問題がしばしば起こる。
Python は後者の例で、configure スクリプトはちゃんと readline ライブラリを認識し make も問題なく通るのだが、実際には Readline ライブラリが無効になったバイナリがインストールされてしまう。
% ./configure ... checking for readline in -lreadline... yes checking for rl_callback_handler_install in -lreadline... yes checking for rl_pre_input_hook in -lreadline... yes checking for rl_completion_matches in -lreadline... no ... % make ... % find . -name readline.so # readline.so が出来ていない  ヒストリ機能やキャレット移動のショートカットが使えないのは、やはり不便だ。これはなんとかしたい。</description>
    </item>
    
    <item>
      <title>Apple によるロケール周りの変更点を Python 2.5.2 にも適用する</title>
      <link>http://ishikawa.github.io/2008/04/02/fixup-python-locale-problems-by-apple-darwin-patch-for-2-5-2/</link>
      <pubDate>Wed, 02 Apr 2008 10:23:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/04/02/fixup-python-locale-problems-by-apple-darwin-patch-for-2-5-2/</guid>
      <description>最近 Python を 2.5.2 にアップデートして同じ作業を繰り返したことと、Apple によるロケール周りの変更点を Python 2.5.1 にも適用するのときはパッチの適用方法について言及がなかったこともあり、そのへんも含めて手順をまとめておく。
まずは Python 2.5.2 をダウンロードし展開。
 % curl -LO http://www.python.org/ftp/python/2.5.2/Python-2.5.2.tar.bz2 % tar xjf Python-2.5.2.tar.bz2  Apple によるロケール周りの変更点を Python 2.5.1 にも適用するで公開したパッチをあてる。
 % curl -LO http://www.metareal.org/wp-content/uploads/2007/09/python251_apple_locale.txt % cd Python-2.5.2 % patch -p2 -d . &amp;lt; ../python251_apple_locale.txt  最後の patch コマンドによりパッチを適用している。-p2 オプションの指定をしないとパッチがうまく適用されないので注意。あとは通常どおり confgure, make すればいい。
 % ./configure % make % sudo make install  2.5.3 がリリースされたら、また同じパターンで記事が一本できるな。
【追記】こうしてインストールされた Python インタプリタではヒストリ機能などが有効になっていないかもしれない。その場合は Mac の Python をビルドするときに GNU Readline ライブラリを有効にするをどうぞ。</description>
    </item>
    
    <item>
      <title>Mac OS X に Hyper Estraier をインストールする</title>
      <link>http://ishikawa.github.io/2008/03/03/how-to-install-hyper-estraier-with-the-source-package-on-mac-os-x/</link>
      <pubDate>Tue, 04 Mar 2008 12:12:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/03/03/how-to-install-hyper-estraier-with-the-source-package-on-mac-os-x/</guid>
      <description>Mac OS X に Hyper Estraier をソースパッケージからインストールしたときのメモ。
 Mac OS X 10.4.11 libiconv と libz はインストール済み /usr/lib/libiconv.2.2.0.dylib /usr/lib/libz.1.2.3.dylib  QDBM まずは QDBM をインストールする。バージョンは最新の 1.8.77 を選択した。
 % curl -LO http://qdbm.sourceforge.net/qdbm-1.8.77.tar.gz % tar xvzf qdbm-1.8.77.tar.gz % cd qdbm-1.8.77  Hyper Estraier のインストールガイドによると、zlib を有効化すると Hyper Estraier の作るインデックスが小さくなるそうなので有効にしておく。
 % ./configure --enable-zlib % make mac % make check-mac % sudo make install-mac  /usr/local/lib/libqdbm.dylib にライブラリがインストールされる。
Hyper Estraier 最新のソースパッケージであるバージョン 1.4.13 を選択した。
 % curl -LO http://hyperestraier.</description>
    </item>
    
    <item>
      <title>find | xargs rcov</title>
      <link>http://ishikawa.github.io/2008/02/17/find-xargs-rcov/</link>
      <pubDate>Sun, 17 Feb 2008 09:55:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/02/17/find-xargs-rcov/</guid>
      <description>Rails アプリのコードカヴァレッジに rcov を使ってみた。面倒な設定も必要なく、そこそこの速度でカヴァレッジを測定できるので便利だ。異常系のテスト洩れ確認に重宝している。
Rails アプリなので、test ディレクトリ以下のテストコードを実行したいわけだが、
rcov test/*/*_test.rb  このように、シェルのワイルドカード指定では再帰的に深いディレクトリを扱うことができない（zsh なら ** でいいね）。こういう場合は find, xargs を組み合わせればいい。
find test -name &#39;*_test.rb&#39; -print | xargs rcov --aggregate log/coverage/aggregate.info  rcov は --aggregate オプションで指定されたファイルに実行結果を保存し、次回実行時に利用することができる。ファイル数が多いと xargs はコマンドを複数回実行するので、結果が上書きされないように --aggregate オプションを指定するようにしよう。</description>
    </item>
    
    <item>
      <title>Array#product For Ruby 1.8</title>
      <link>http://ishikawa.github.io/2008/02/16/array-product-for-ruby-1-8/</link>
      <pubDate>Sun, 17 Feb 2008 07:07:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/02/16/array-product-for-ruby-1-8/</guid>
      <description>Ruby 1.9 には配列同士の組み合わせを列挙する Array#product があるらしいのだが、Ruby 1.8 でも使いたくなったので実装してみた。
class Array # Array#product # ------------- # Returns the cartesian product of the receiver and the arrays given as arguments. # # Usage: # [1, 2, 3].product([4, 5]) # =&amp;gt; [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]] # [1, 2].product([1, 2]) # =&amp;gt; [[1, 1], [1, 2], [2, 1], [2, 2]] # [1, 2].product([3, 4],[5, 6]) # =&amp;gt; [[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], # # [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6]] # [1, 2].</description>
    </item>
    
    <item>
      <title>Mime::Type の register メソッドで定義される定数</title>
      <link>http://ishikawa.github.io/2008/02/15/rails-mime-type-register/</link>
      <pubDate>Fri, 15 Feb 2008 08:10:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/02/15/rails-mime-type-register/</guid>
      <description>Mime::Type.register は、登録された Mime::Type ではなく拡張子の配列を返す、という謎の挙動になっている。
Mime::Type.register &amp;quot;image/jpeg&amp;quot;, :jpeg, [], [&amp;quot;jpg&amp;quot;, &amp;quot;pjpeg&amp;quot;] # =&amp;gt; [&amp;quot;jpeg&amp;quot;, &amp;quot;jpg&amp;quot;, &amp;quot;pjpeg&amp;quot;]  そのため、登録された Mime::Type を参照するには、改めて Mime::Type.lookup する。
Mime::Type.lookup(&amp;quot;image/jpeg&amp;quot;) # =&amp;gt; #&amp;lt;Mime::Type:0x30601dc @string=&amp;quot;image/jpeg&amp;quot;, @synonyms=[], @symbol=:jpeg&amp;gt;  しかし、この方法は &amp;quot;image/jpeg&amp;quot; を二ヶ所にハードコードしてしまう。
代わりに、Mime::Type#register で Mime モジュールに定義される定数を使うことができる。
Mime::JPEG # =&amp;gt; #&amp;lt;Mime::Type:0x30601dc @string=&amp;quot;image/jpeg&amp;quot;, @synonyms=[], @symbol=:jpeg&amp;gt;  Mime::Type#register の第二引数に指定したシンボルを大文字にした定数が定義されているようだ。</description>
    </item>
    
    <item>
      <title>ActiveRecord::Base.with_failsave (2)</title>
      <link>http://ishikawa.github.io/2008/02/13/activerecord-base-with-failsave-take2/</link>
      <pubDate>Thu, 14 Feb 2008 08:12:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/02/13/activerecord-base-with-failsave-take2/</guid>
      <description>実際に ActiveRecord::Base.with_failsave でテストを書いているうちに、いくつか使い勝手の悪い部分が見つかった。というわけで、すこし改良。
class ActiveRecord::Base def create_or_update_with_fail; false end alias_method :create_or_update_without_fail, :create_or_update # ブロックが与えられた場合はブロックを実行し、そのあいだは save! や save が必ず失敗する # # ActiveRecord::Base.with_failsave do # ... # end # # また、サブクラスのみに適用することもできる。 # # SomethingModel.with_failsave do # ... # end def self.with_failsave # ActiveRecord::Base のサブクラスで呼び出された場合は alias_method によって、 # サブクラス側にも create_or_update が定義されてしまうためか、再度の alias_method による # 定義の差し替えだけでは元の挙動に戻らない。そのため、ensure 節で remove_method している。 subclass = !private_instance_methods(false).include?(&amp;quot;create_or_update&amp;quot;) alias_method :create_or_update, :create_or_update_with_fail yield ensure alias_method :create_or_update, :create_or_update_without_fail remove_method :create_or_update if subclass end end  変更点はふたつ。</description>
    </item>
    
    <item>
      <title>ActiveRecord::Base.with_failsave</title>
      <link>http://ishikawa.github.io/2008/02/12/activerecord-base-with_failsave/</link>
      <pubDate>Wed, 13 Feb 2008 04:28:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/02/12/activerecord-base-with_failsave/</guid>
      <description>failmalloc の精神で、必ず失敗する ActiveRecord::Base#save を書いてみた。
class ActiveRecord::Base def create_or_update_with_fail; false end alias_method :create_or_update_without_fail, :create_or_update # ブロックが与えられた場合はブロックを実行し、そのあいだは save! や save が必ず失敗する # # ActiveRecord::Base.with_failsave do # ... # end # def self.with_failsave alias_method :create_or_update, :create_or_update_with_fail yield alias_method :create_or_update, :create_or_update_without_fail end end  テストコードで以下のように使うのが目的
assert_nothing_raised{ model.save! } ActiveRecord::Base.with_failsave do assert_raise(ActiveRecord::RecordNotSaved){ model.save! } end  これで例外処理コードのカバレッジも稼げるよ！</description>
    </item>
    
    <item>
      <title>Rails の Migration で MySQL の型を指定する</title>
      <link>http://ishikawa.github.io/2008/02/06/using-mysql-data-types-in-rails-migration/</link>
      <pubDate>Thu, 07 Feb 2008 08:37:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/02/06/using-mysql-data-types-in-rails-migration/</guid>
      <description>たとえば、こんな感じの Migration を考えてみる。
class CreatePepsi &amp;lt; ActiveRecord::Migration def self.up create_table :pepsies do |t| t.column :coke, :string, :limit =&amp;gt; 64 t.column :jolt, :integer t.column :created_at, :datetime t.column :updated_at, :datetime end end def self.down drop_table :addresses end end  Rails 2.0 の sexy migration ではこんなふうにも書けるんだけど、個人的に馴染まないので今回はスルー。
class CreatePepsi &amp;lt; ActiveRecord::Migration def self.up create_table :pepsies do |t| t.string :coke, :limit =&amp;gt; 64 t.integer :jolt t.timestamps end end def self.down drop_table :addresses end end  rake db:migrate したときの CREATE TABLE はこうなる。</description>
    </item>
    
    <item>
      <title>Rails 2.0 で追加された Migration 関連の Rake タスク</title>
      <link>http://ishikawa.github.io/2008/01/31/rails-2-0-migration-related-rake-tasks/</link>
      <pubDate>Fri, 01 Feb 2008 03:08:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/01/31/rails-2-0-migration-related-rake-tasks/</guid>
      <description> db:migrate:reset   DROP DATABASE して db:migrate 毎回、VERSION=0 とか指定していたので、こういうのが欲しかった 問答無用で DEFAULT CHARACTER SET &#39;utf8&#39; な気もするが&amp;hellip;   db:migrate:redo [STEP=n]   STEP で指定した数だけ遡って db:migrate をやりなおす STEP のデフォルトは 1   </description>
    </item>
    
    <item>
      <title>Prototype 1.6.0.2 公開</title>
      <link>http://ishikawa.github.io/2008/01/30/prototype-1-6-0-2-bug-fixes-performance-improvements-and-security/</link>
      <pubDate>Thu, 31 Jan 2008 12:40:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/01/30/prototype-1-6-0-2-bug-fixes-performance-improvements-and-security/</guid>
      <description>気づけば Prototype 1.6.0.2 がリリースされていた。
 28 のバグ修正と性能の向上 Safari 3 における Element#getElementsBySelector の性能向上 すべてのブラウザで以下のメソッドの性能向上 Element#up, Element#down Element#next, Element#previous Event#findElement
 Opera 9.25 以降が公式にサポート対象となった
 ブラウザ以外の環境での XSS 脆弱性の可能性を修正
  Safari 3 における getElementsBySelector Safari では無効になっていた DOM 3 XPath が有効になったようだ（無効になっていたのは Safari のバグ絡み？）。ただし、Selector#shouldUseXPath が false を返した場合は、いままでどおり無効になる。
ブラウザ以外の環境での XSS 脆弱性の修正 これまで Ajax.Request における JavaScript の実行（Automatic JavaScript response evaluation）では、
 オプションで evalJS が設定されていること Content-Type が JavaScript であること  をチェックしており、同じドメイン（プロトコルやポートも）に属しているかどうかの制約はブラウザの実装に任されていた。
しかし、Opera のウィジェットのようなブラウザ以外の環境では、こうした制約を課していないため XSS 脆弱性の原因となる可能性があった。そのため、今回のバージョンから自前でチェックするようになったようだ（Ajax.Request#isSameOrigin）。
また、同様のセキュリティに関する修正が施された 1.</description>
    </item>
    
    <item>
      <title>JavaScript ベンチマーク SunSpider 0.9</title>
      <link>http://ishikawa.github.io/2007/12/19/new-javascript-benchmark-sunspider/</link>
      <pubDate>Thu, 20 Dec 2007 08:28:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/19/new-javascript-benchmark-sunspider/</guid>
      <description>WebKit の開発者たちは素晴らしいレンダリング・エンジンだけではなく、Drosera や Web Inspector などの Web 開発者向けツールも提供してきたが、今度は JavaScript ベンチマークをリリースしたようだ。
このベンチマークはJavaScript 言語のコアに絞ったベンチマークを提供しており、これまでの、Web 開発者が使うツールというよりは言語処理系開発者向けのツールといえる。
SunSpider 0.9 このベンチマークは Surfin’ Safari のブログ上で公開がアナウンスされている。
 Surfin’ Safari - Blog Archive » Announcing SunSpider 0.9  この記事では、他にも多くの JavaScript ベンチマークが存在することを認めたうえで、SunSpider には以下のような特徴があるとしている。
 マイクロベンチマークではなく、実際にアプリケーションで使用されているコードである テスト対象に DOM は含まず、JavaScript 言語のコアのベンチマークに焦点を合わせている ブラウザ／コンソール両方で簡単に実行できる 実行時間のブレも計測できるので、どの程度安定した計測なのかが分かる  このページでベンチマークを実行することができる。実際に実行してみると計測結果をパーマリンクとして保存できたり、それらを比較できたりと興味深い。</description>
    </item>
    
    <item>
      <title>PostgreSQL で使われていないインデックスを調べる</title>
      <link>http://ishikawa.github.io/2007/12/18/postgresql-looking-for-unused-indexes/</link>
      <pubDate>Wed, 19 Dec 2007 07:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/18/postgresql-looking-for-unused-indexes/</guid>
      <description> PostgreSQL で使われていないインデックスを調べる方法について。いつも忘れるのでこちらにも書く。
統計情報の収集 まずは、インデックスの使用状況を統計情報として残すよう、PostgreSQL の設定ファイル postgresql.conf で以下の変数を true にする。
 stats_start_collector stats_row_level  各々の詳細についてはリンク先の PostgreSQL ドキュメントを参照してほしい。
統計情報ビュー 収集した統計情報の表示のために多くのビューが用意されている。
使われていないインデックスを調べるには pg_stat_user_indexes を見るのが手っ取り早い。
select indexrelname, idx_scan, idx_tup_read, idx_tup_fetch from pg_stat_user_indexes where indexrelname not like &#39;%_pkey&#39; and idx_scan = 0;  プライマリーキーっぽいものは除いてみた。
indexrelname がインデックスの名前、relname がテーブルの名前。なので、特定のテーブルのインデックスに絞ることも簡単にできる。
select indexrelname, idx_scan, idx_tup_read, idx_tup_fetch from pg_stat_user_indexes where relname = &#39;users&#39;;  </description>
    </item>
    
    <item>
      <title>rparsec での繰り返しと選択</title>
      <link>http://ishikawa.github.io/2007/12/16/rparsec-quantifier-and-alternation/</link>
      <pubDate>Sun, 16 Dec 2007 11:10:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/16/rparsec-quantifier-and-alternation/</guid>
      <description>rparsec では文法要素の繰り返しを指定する方法が複数用意されている。
繰り返し まずは「RParsec の many と many_ の違い」でも解説した many と many_ があり、これで m 回以上の繰り返しを指定できる（正規表現でいう *, +, {n,}）。
repeat, repeat_ は m 回以上、最大 n 回の繰り返しを指定できる（正規表現でいえば {m,n}）。また、some, some_ では最大 n 回の繰り返しを指定できる（正規表現でいえば {0,n}。実際のところ、some は min 引数に 0 を指定して、repeat を呼び出しているにすぎない）。
なお、メソッド名の最後にあるアンダースコアの有無については、「RParsec の many と many_ の違い」で解説したとおりで、アンダースコアのつかないメソッドはすべての結果を配列で返し、アンダースコアのつくメソッドは最後の結果のみを返す。
選択 正規表現でいうところの選択も用意されている。このためのメソッドは | なので、見た目は正規表現と似通っている。
たとえば、以下のコードは、
number | word  数値、または一般的な識別子を解釈するためのパーサになる。
また、文法要素のグループ化は簡単で、通常の Ruby プログラムと同じく括弧で囲めばよい。たとえば、空白区切りの数値、または識別子を解釈するためのパーサは以下のように書ける。
parser = ((number | word) &amp;lt;&amp;lt; whitespace.many_).many parser.parse(&amp;quot;123 abc 56.7&amp;quot;) =&amp;gt; [&amp;quot;123&amp;quot;, &amp;quot;abc&amp;quot;, &amp;quot;56.</description>
    </item>
    
    <item>
      <title>rparsec の四則演算デモを浮動小数点に対応させる</title>
      <link>http://ishikawa.github.io/2007/12/14/floating-point-arithmetic-of-rparsec-calculator-demo/</link>
      <pubDate>Fri, 14 Dec 2007 10:05:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/14/floating-point-arithmetic-of-rparsec-calculator-demo/</guid>
      <description>rparsec の四則演算デモを試しているうちに、整数による演算しかできないことに気づくことと思う。
四則演算デモが calculator.rb にあるとして、
require &#39;calculator.rb&#39; parser = Calculator.new.parser parser.parse &#39;1+2*(3-1)&#39; =&amp;gt; 5 parser.parse &#39;4 * 2.5&#39; =&amp;gt; 8  小数を計算させてみると、エラーにはならないものの、計算結果がおかしなことになっている。
実は、この四則演算デモは数値として整数しか解釈しない。そのため、4 * 2.5 を計算させたときは、2.5 の &amp;quot;.&amp;quot; で解釈をやめてしまい、そこまでの 4 * 2 を計算して返した、という具合だ。
ソースコードで数値をパースしている箇所は、
term = integer.map(&amp;amp;To_i) | char(&#39;(&#39;) &amp;gt;&amp;gt; lazy{expr} &amp;lt;&amp;lt; char(&#39;)&#39;)  どうみても、この行の左半分なので、ここを API リファレンスを参考に、
term = number.map(&amp;amp;To_f) | char(&#39;(&#39;) &amp;gt;&amp;gt; lazy{expr} &amp;lt;&amp;lt; char(&#39;)&#39;)  こう書き換えれば動く。
parser.parse &#39;4 * 2.5&#39; =&amp;gt; 10.0  </description>
    </item>
    
    <item>
      <title>RParsec の many と many_ の違い</title>
      <link>http://ishikawa.github.io/2007/12/13/what-is-the-difference-between-many-and-many_-of-rparsec/</link>
      <pubDate>Thu, 13 Dec 2007 09:09:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/13/what-is-the-difference-between-many-and-many_-of-rparsec/</guid>
      <description>前回の四則演算デモで真っ先に目を引いたのは many_ という奇妙な名前のメソッドだった。
delim = whitespace.many_  他にもっと注目すべきところがあるだろうと言われそうだが、非公開の関数か一時変数のようなメソッドが公開 API の一部というのに驚いた。
また、many_ は Parser クラスのメソッドだが、このクラスには他にも many というメソッドが用意されている。
両者の違いは何だろう？
many と many_ の違い 上記リンク先の API リファレンスによれば、
 many は複数回マッチしたそれぞれの結果を配列で返し、 many_ は最後にマッチした結果のみを返す  という違いだけのようだ。irb で実際に動作を確認してみよう。
% irb irb(main):001:0&amp;gt; require &#39;rubygems&#39; irb(main):002:0&amp;gt; require &#39;rparsec&#39; irb(main):003:0&amp;gt; include Parsers  まずは必要な require や include を済ませておく。
irb(main):004:0&amp;gt; whitespace.many.parse(&amp;quot;\t\r\n&amp;quot;) =&amp;gt; [9, 13, 10] irb(main):005:0&amp;gt; whitespace.many_.parse(&amp;quot;\t\r\n&amp;quot;) =&amp;gt; 10  many では引数で渡した文字列（タブと改行）の各文字が配列で返されるのにたいして、many_ では最後の改行文字のみが返されているのが確認できた。
irb(main):007:0&amp;gt; whitespace.many.parse(&amp;quot;&amp;quot;) =&amp;gt; [] irb(main):006:0&amp;gt; whitespace.many_.parse(&amp;quot;&amp;quot;) =&amp;gt; nil  ちなみに、一度もマッチしなかった場合は many では空の配列、many_ では nil が返されるようだ。</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 の JDBC ドライバをビルド</title>
      <link>http://ishikawa.github.io/2007/12/12/building-postgresql-7-4-jdbc-driver/</link>
      <pubDate>Wed, 12 Dec 2007 03:59:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/12/building-postgresql-7-4-jdbc-driver/</guid>
      <description>PostgreSQL 7.4.13 以降で起こる異なるエンコーディング間の変換エラーがいまだに尾を引いている。
悩んだ末、JDBC ドライバのソースコードを読むだけではなく、実際にビルドして動作を確認してみた方がいいだろう、ということになった。JDBC ドライバにパッチを当てて問題を回避することも視野に入れている。できれば、やりたくないけれど&amp;hellip;。
PostgreSQL 7.4 の JDBC ドライバをビルドするために必要な手順は、おおまかに分けると以下のようになる。
 CVS からソースコードを取得 build.properties を用意 ビルド  CVS からソースコードを取得 PostgreSQL JDBC ドライバの CVS リポジトリからバージョン 7.4 リリース時のタグを指定してソースコードを取得する。
cvs -d :pserver:anonymous@cvs.pgfoundry.org:/cvsroot/jdbc login cvs -z3 -d :pserver:anonymous@cvs.pgfoundry.org:/cvsroot/jdbc co **-r REL7_4_STABLE** -P pgjdbc  build.properties を用意 バージョン番号情報などを指定するための build.properties がないとビルドが失敗してしまう。 トップディレクトリに build.properties を作成し、以下のように書いておこう。
major=7 minor=4 fullversion=7.4.5 edition=JDBC3 def_pgport=5432 enable_debug=no connectclass=org.postgresql.jdbc3.Jdbc3Connection  major, minor, fullversion, edition は org.postgresql.Driver.getVersion() で使われる。
それ以外の変数には以下のような意味があるようだ。
 def_pgport デフォルトの接続ポート番号 enable_debug デバッグ情報つきでコンパイルする場合は yes connectclass java.</description>
    </item>
    
    <item>
      <title>Ruby によるパーサ・コンビネータ rparsec</title>
      <link>http://ishikawa.github.io/2007/12/11/studying-rparsec-introduction/</link>
      <pubDate>Tue, 11 Dec 2007 10:52:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/11/studying-rparsec-introduction/</guid>
      <description>Java による parsec の実装 JParsec を Ruby に移植した rparsec を勉強中。
 rparsec overview rparsec RDoc  パーサ・コンビネータ Parsec、パーサ・コンビネータについては「最強のパーザー、Parser Combinator - 純粋関数型雑記帳」が参考になる。
Yacc や Bison などのコンパイラ・コンパイラと比較したときのパーサ・コンビネータの強味としては、
 パーサを実装言語と同じ言語で書ける プログラムがそのまま文法定義のように読める パーサは普通の関数やオブジェクトなので、パーサをラップした別のパーサを生成する関数を定義したりするのも簡単にできる  などがあるようだ。
rparsec のインストール 普通に RubyForge で gem がホスティングされているので、gem コマンド一発でインストールできる。
% sudo gem install rparsec  四則演算デモ まずは公式ページにもデモとして紹介されている四則演算から。
#!/usr/local/bin/ruby require &#39;rubygems&#39; require &#39;rparsec&#39; class Calculator include Parsers include Functors def parser ops = OperatorTable.new. infixl(char(?+) &amp;gt;&amp;gt; Plus, 20). infixl(char(?-) &amp;gt;&amp;gt; Minus, 20).</description>
    </item>
    
    <item>
      <title>Ruby で16進数表記の整数を UTF-8 文字列として出力する</title>
      <link>http://ishikawa.github.io/2007/12/10/packing-integer-into-utf8-sequence-bytes/</link>
      <pubDate>Mon, 10 Dec 2007 10:16:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/10/packing-integer-into-utf8-sequence-bytes/</guid>
      <description>前回の記事「PostgreSQL 7.4.13 以降、異なるエンコーディングでの変換エラー」でも書いたように、PostgreSQL で以下のようなエラーが出るようになった。
ERROR: 22P05: character 0xe28094 of encoding &amp;quot;UNICODE&amp;quot; has no equivalent in &amp;quot;EUC_JP&amp;quot;  では、character 0xe28094 とは、どの文字なのか。
PostgreSQL では UNICODE という名前のエンコーディングは UTF-8 のことなので、Ruby の Array#pack を使えば、0xe28094 という16進数表記の整数を UTF-8 文字列に変換できる。
ruby -e &#39;puts [ARGV[0]].pack(&amp;quot;H*&amp;quot;)&#39; &amp;quot;e28094&amp;quot;  </description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4.13 以降、異なるエンコーディングでの変換エラー</title>
      <link>http://ishikawa.github.io/2007/12/10/postgresql-rejects-invalidly-encoded-multibyte-character/</link>
      <pubDate>Mon, 10 Dec 2007 09:54:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/10/postgresql-rejects-invalidly-encoded-multibyte-character/</guid>
      <description>PostgreSQL 7.4.18 で以下のようなエラーが出力されるようになった。
ERROR: 22P05: character 0xe28094 of encoding &amp;quot;UNICODE&amp;quot; has no equivalent in &amp;quot;EUC_JP&amp;quot;  PostgreSQL の JDBC ドライバはバックエンド (PostgreSQL) のバージョンが 7.3 以降の場合、接続時に必ず set client_encoding = &amp;quot;UNICODE&amp;quot; を発行する。
以下は org/postgresql/jdbc1/Attic/AbstractJdbc1Connection.java の 509 行目から抜粋。
if (haveMinimumServerVersion(&amp;quot;7.3&amp;quot;)) { BaseResultSet acRset = //TODO: if protocol V3 we can set the client encoding in startup execSQL(&amp;quot;set client_encoding = &#39;UNICODE&#39;&amp;quot;); //set encoding to be unicode encoding = Encoding.getEncoding(&amp;quot;UNICODE&amp;quot;, null); }  また、PostgreSQL 7.4.13 からは変換できないバイト列をすべてエラー扱いするようになった。</description>
    </item>
    
    <item>
      <title>ffmpeg を MacPorts でインストール</title>
      <link>http://ishikawa.github.io/2007/12/09/install-ffmpeg-using-macports/</link>
      <pubDate>Sun, 09 Dec 2007 09:57:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/09/install-ffmpeg-using-macports/</guid>
      <description>動画の変換がやりたくて Mac に ffmpeg をインストールした。そのときのメモ。
MacPorts でインストールするのがよさげ。variants のおかげで、H.264 や AAC を有効にするのも簡単だ。
% sudo port install x264 % sudo port install faac % sudo port install faad2 % sudo port install a52dec % sudo port install ffmpeg +faac +faad +a52 +x264  関連するライブラリを先にインストールして、+faac のように指定してやるだけ。</description>
    </item>
    
    <item>
      <title>Mail.app や iGTD の vacuum を cron で自動化する</title>
      <link>http://ishikawa.github.io/2007/12/08/vacuum-analyze-sqlite-automatically-by-cron/</link>
      <pubDate>Sat, 08 Dec 2007 10:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/08/vacuum-analyze-sqlite-automatically-by-cron/</guid>
      <description>Warning
この方法でデータベースを VACUUM すると、Mail.app で問題が起こるようだ。Mail.app を起動中に cron が実行されるとメールを送信できない、下書き保存できない、などの問題があった。というわけで、この方法は使わないか、問題が起こらないように改良する必要がある。
「Mail.app を vacuum して高速化」や「iGTD も vacuum すると速くなる」でも書いたように、Mac のアプリケーションのいくつかは、ターミナルから VACUUM ANALYZE という SQL を実行することで高速に動作するようになる。
しかし、このコマンドを毎回手動で実行するのは面倒なので、自動化することにした。自動化、といっても大層なものではなく crontab にコマンドを書いておき、毎日実行されるようにしただけ。
% **crontab -e** 0 15 * * * sqlite3 ~/Library/Application\ Support/iGTD/iGTD.sql &amp;quot;vacuum analyze&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 0 15 * * * sqlite3 ~/Library/Mail/Envelope\ Index &amp;quot;vacuum analyze&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1  sqlite コマンドを直接書いているので見苦しいが、別スクリプトにした場合の管理を考えると面倒だった。ここでは標準エラー出力を /dev/null に捨てている（ただし、アプリケーションがデータベースをロックしていると、VACUUM ANALYZE は &amp;ldquo;database is locked&amp;rdquo; というエラーで即座に終了する）。</description>
    </item>
    
    <item>
      <title>iGTD も vacuum すると速くなる</title>
      <link>http://ishikawa.github.io/2007/12/05/optimize-the-igtd-database/</link>
      <pubDate>Thu, 06 Dec 2007 08:08:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/05/optimize-the-igtd-database/</guid>
      <description> 日々の ToDo 管理には iGTD を愛用している。だが、最近、目に見えて動作が重くなってしまった。
おそらく、完了したタスクも削除されることはなく、ずっと溜まっているのが原因だろう。iGTD は内部のデータベースとして SQLite を使っているので、Mail.app を vacuum して高速化と同じ方法で高速化できる。
VACUUM ANALYZE 手順は簡単で、ターミナルから以下のコマンドを実行するだけだ（iGTD が起動中なら終了する必要があるかもしれない）。
% sqlite3 ~/Library/Application\ Support/iGTD/iGTD.sql &amp;quot;vacuum analyze&amp;quot;  このコマンドはデータベースから不要な領域を回収し、統計情報を更新することで実行速度を向上させる。これだけで体感的にはかなり速くなった。
参考  SQLite Query Language: ANALYZE SQLite Query Language: VACUUM  </description>
    </item>
    
    <item>
      <title>Ruby の CSS パーサはどこですか？</title>
      <link>http://ishikawa.github.io/2007/11/23/looking-for-ruby-css-parser/</link>
      <pubDate>Sat, 24 Nov 2007 02:58:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/11/23/looking-for-ruby-css-parser/</guid>
      <description>「Ruby で書かれた CSS パーサを探しています」メモ。
Ruby CSS Parser 最近 RubyForge に登録されたばかりのプロジェクト
 gem install css_parser で試してみる いきなり、ドキュメントと実際の挙動が違う。 CssParser::Parser#load_file! というメソッドはなくて CssParser::Parser#load_uri! とりあえずローカルファイルを読み込む方法がないようだ W3C のスタイルシートで試してみたがエラー まだ実用ではない、ということだろう  csspool W3C で公開されている CSS パーサのための共通 API SAC（和訳）の Ruby による実装。
 なので、委員会っぽい API あらかじめ racc, flexmock のインストールが必要 何を間違ったのか、gem でインストールしたあとに、手動で rake しないと動かなかった パースできるファイルとできないファイルがある @charset 規則があるものは駄目  うーん、単に特定のプロパティをもつセレクタを抜き出したいだけなんだが、どちらのライブラリでも出来ないという罠。自分で書き捨てのスクリプトでも書いて、急場を凌ぐしかないのか。</description>
    </item>
    
    <item>
      <title>Ruby で平仮名にマッチする正規表現</title>
      <link>http://ishikawa.github.io/2007/11/18/ruby-needs-unicode-regular-expressions/</link>
      <pubDate>Mon, 19 Nov 2007 02:31:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/11/18/ruby-needs-unicode-regular-expressions/</guid>
      <description> Ruby 1.8 系で平仮名にマッチする正規表現を書きたい。
正規表現で Unicode ブロックが使えれば楽なのだが、残念ながら Ruby 1.8 ではサポートされていない。
鬼車 ちなみに 1.9 で搭載される予定の鬼車では、以下のような形式で Unicode ブロックやカテゴリを指定できるようだ（参考：鬼車 正規表現 Version 5.6.0）。
 \p{property-name} \p{^property-name}（否定） \P{property-name}（否定）  もっとも、実際に試したわけではないので、現状の Ruby 1.9 で上記のような使い方ができるのかは分からない。
Ruby 1.8 結局、Ruby 1.8 では平仮名に相当するコードポイントの範囲を直接、正規表現で指定してやるのが簡単そうだ。
Unicode Character Database の Block.txt によると平仮名（Hiragana）の範囲は 0x3040 から 0x309f なので、Ruby リファレンスマニュアルの FAQ「10.7 SJISの機種依存コード84BF から 889Fまでを空白に置き換えたいのですが」を参考に正規表現を書いてみる（ただし、UTF-8 限定）。
/#{&amp;quot;[#{[0x3040].pack(&#39;U&#39;)}-#{[0x309f].pack(&#39;U&#39;)}]&amp;quot;}/u  コードポイントから UTF-8 リテラル文字列への変換に Array#pack を利用しているため読みづらくなっている。もっといい方法があるのかもしれない。
参考  Unicode Regular Expressions 鬼車  </description>
    </item>
    
    <item>
      <title>Safari で ExternalInterface を使うときは this に気をつけないと無限ループ</title>
      <link>http://ishikawa.github.io/2007/11/05/safari-external-interface-infinite-loop/</link>
      <pubDate>Tue, 06 Nov 2007 03:23:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/11/05/safari-external-interface-infinite-loop/</guid>
      <description>以下のサイトを参考に、JavaScript から ActionScript のコードを呼び出そうとしている。
 throw Life - JavaScriptからFlash ActionScriptを呼び出す最も簡単なサンプル Firefox &amp;amp; Safari  以前、haXe で遊んでたときは組み込みの JavaScript インターフェースを使っていたので、ExternalInterface を使うのは初めて。
document[&amp;quot;as&amp;quot;].callFlash();  サンプルどおり、こんなふうに呼び出すのは問題ない。だが、もうすこし汎用的にしようと思って、以下のようなクラスを試しにつくってみた。
var SWFInterface = Class.create(); SWFInterface.prototype = { initialize: function(name) { this.name = name; }, call: function(iname) { var embed = document[this.name]; if (embed) { var fn = embed[iname]; alert(fn()); } } };  だが、このクラス経由で呼び出すと Safari が反応しなくなってしまった。
new SWFInterface(&amp;quot;as&amp;quot;).call(&amp;quot;callFlash&amp;quot;); // Safari が反応しなくなる  どうやら、呼び出す関数の this は embed 要素に束縛しないといけないようだ。
call: function(iname) { var embed = document[this.</description>
    </item>
    
    <item>
      <title>雫井脩介「犯人に告ぐ」</title>
      <link>http://ishikawa.github.io/2007/10/20/%E7%8A%AF%E4%BA%BA%E3%81%AB%E5%91%8A%E3%81%90/</link>
      <pubDate>Sat, 20 Oct 2007 08:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/10/20/%E7%8A%AF%E4%BA%BA%E3%81%AB%E5%91%8A%E3%81%90/</guid>
      <description>雫井脩介とは実家に帰省したときに買った「火の粉」以来の付き合い。それから「栄光一途」「虚貌」と、文庫化しているものを順に読んできたが相変わらずの高いリーダビリティを保っている。
警察側がテレビ番組を利用して犯人を追い詰める。
筋書きだけでワクワクする。想像するのは、エンターテインメント性たっぷりの二転三転する筋書きだ。しかし、中心はあくまで人間ドラマ。犯人に取り憑かれた警視の執念が、合間合間、隙間隙間に見え隠れする。
テレビが活躍する犯罪モノとしては天藤真「大誘拐」や都井邦彦「遊びの時間は終わらない」（北村薫編「謎のギャラリー―謎の部屋」収蔵）が個人的には傑作として思い浮かぶのだが、それらのエンターテインメント性を追い求めた作品とも一味違う。渋い。
物足りない感もあるにはある。余談だが、映画で主演の豊川悦司はイメージにぴったり……、というか文庫版の帯に載ってるから、どうじてもキャラクター像が固定されちゃうよね。
あと、余談ついでに、北村薫編「謎のギャラリー―謎の部屋」ではジェラルド・カーシュ「豚の島の女王」も傑作です。残酷で美しい逸品。Amazon で調べてみたら「豚の島の女王」は「壜の中の手記」に収録されてるのか。これは買うしか。
犯人に告ぐ〈上〉 (双葉文庫)</description>
    </item>
    
    <item>
      <title>MacBook に内蔵された iSight を Flash から利用できるようにする</title>
      <link>http://ishikawa.github.io/2007/10/10/setting-flash-camera-with-macbook-isight/</link>
      <pubDate>Thu, 11 Oct 2007 05:20:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/10/10/setting-flash-camera-with-macbook-isight/</guid>
      <description>Flash の flash.media.Camera オブジェクトを使うと、Webcam からの入力をキャプチャすることができる。
しかし、そのままだと MacBook に内蔵された iSight では映像をとることができない。どうやら、設定を変更する必要があるようだ。
 ページに表示された Flash を右クリックして「Adobe Flash Player 設定」を開く。 左下のアイコンから、一番右のカメラをクリック カメラの種類を選択するプルダウンメニューが表示されるので「USB Video Class Video」を選択  これで iSight からの入力を受け取れるようになる。
ちなみに、ここまでして見たかったページは Quasimondo : Incubator : Processing : Minority Cube、Webcam に映した手の動きでキューブを回せる、というデモ。実際に操作してみると、不思議な満足感がある。面白い。</description>
    </item>
    
    <item>
      <title>Ruby で外部プログラムの標準エラー出力を得る方法</title>
      <link>http://ishikawa.github.io/2007/10/09/capture-stderr-of-external-program-into-ruby-string/</link>
      <pubDate>Wed, 10 Oct 2007 06:37:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/10/09/capture-stderr-of-external-program-into-ruby-string/</guid>
      <description>Ruby で外部プログラムを実行するにはバッククォート文字列がもっとも簡単だ。
s = `command`  こうすると command コマンドを実行し、標準出力の結果を返り値で受け取ることができる。
だが、標準エラーへの出力を得るには別の手段を用いなくてはいけない。
open3 もちろん、あくまでバッククォート文字列にこだわって、標準エラーを標準出力にリダイレクトする、なんてのもあるわけだが、
s = `command 2&amp;gt;&amp;amp;1`  これだと返り値には標準出力と標準エラーがまじってしまうので、添付ライブラリの open3 を使うのがいいだろう。
require &#39;open3&#39; Open3.popen3(&amp;quot;command&amp;quot;) do |stdin, stdout, stderr| ... end  Open3.popen3 で外部プログラムを実行し、そのプロセスの標準入力・標準出力・ 標準エラー出力を IO オブジェクトとして取得できる。</description>
    </item>
    
    <item>
      <title>InnoDB の AUTO_INCREMENT とロック</title>
      <link>http://ishikawa.github.io/2007/10/08/scalability-issue-with-innodb-auto-increment-column/</link>
      <pubDate>Tue, 09 Oct 2007 12:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/10/08/scalability-issue-with-innodb-auto-increment-column/</guid>
      <description>きっかけは MySQL Users Conference Japan 2007 の講演資料「新ストレージエンジン Falcon のアーキテクチャ詳細技術解説」だった。
Falcon とは MySQL 6.0 で搭載予定の新しいストレージエンジンである。
 MySQL AB :: Falcon Storage Engine Guide MySQLの新ストレージエンジン Falcon 徹底リサーチ | マイコミジャーナル  この講演資料で Falcon が InnoDB より優れている点として、
 AUTO_INCREMENT の割当にテーブルロックをかけない
 があげられており、少々驚いた。
これはつまり、InnoDB の AUTO_INCREMENT がテーブルロックをかける、ということであり、そのことをいままで知らなかったからだ。
恥ずかしながら、AUTO_INCREMENT のスケーラビリティについては、いままであまり意識したことがなかった。
InnoDB の特別なテーブルロックモード AUTO-INC リファレンスマニュアルの「13.5.16. InnoDB テーブル上の制約」にもあるように、AUTO_INCREMENT を使うときはテーブルロックが必要だ。
 自動インクリメント カウンタにアクセスする時、InnoDB は、トランザクション全体の最後までではなく、現在の SQL ステートメントの最後まで続く、特別なテーブル ロック モード AUTO-INC を利用します。AUTO-INC テーブル ロックが行われている間は、別のクライアントはテーブルに挿入ができない事に注意してください。
 AUTO_INCREMENT が設定された InnoDB のテーブルでは、AUTO-INC テーブルロックを同時にひとつのトランザクションしか利用できない。これはスケーラビリティの点で問題になりうる。</description>
    </item>
    
    <item>
      <title>Java で要素がひとつだけのコレクションをつくる</title>
      <link>http://ishikawa.github.io/2007/10/07/java-singleton-collection/</link>
      <pubDate>Sun, 07 Oct 2007 11:11:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/10/07/java-singleton-collection/</guid>
      <description>Java でときどき、要素がひとつだけのコレクションがほしくなるときがある。たとえば、利用しているライブラリのメソッドが引数としてコレクションを要求しているが、渡したいオブジェクトがひとつしかないとか。
こういう場合、コレクションの型が List だとすると、まず思いつくのは、新しく生成した ArrayList に要素をひとつだけ追加する方法だ。
List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(); list.add(&amp;quot;element&amp;quot;); doSomething(list);  だが、この方法は変換に一時変数が必要になり不格好だ。
Arrays.asList を使う方法 この変換は Arrays.asList を使うことで簡単にできる。
doSomething(Arrays.asList(new String[]{&amp;quot;element&amp;quot;}));  要素がひとつだけの配列をリストに変換する、と捉え直すわけだ。そして、Java 1.5 から Arrays.asList は配列ではなく可変長引数をとるようになったので、更に簡単に書ける。
doSomething(Arrays.asList(&amp;quot;element&amp;quot;));  Collectios.singleton 系メソッド Arrays.asList ではリスト以外のコレクションには変換できない上、要素がひとつだけのコレクションのために配列を用意しているため、まだまだメモリ的に非効率だ。
実は java.util.Collections にはこうした用途に使えるメソッドがすでに用意されている。
 singleton singletonList singletonMap  上記のメソッドはそれぞれ、渡されたオブジェクトを要素がひとつだけのコレクションに変換するメソッドだ。
Set&amp;lt;String&amp;gt; set = Collections.singleton(&amp;quot;element&amp;quot;); List&amp;lt;String&amp;gt; list = Collections.singletonList(&amp;quot;element&amp;quot;); Map&amp;lt;String, String&amp;gt; map = Collections.singletonMap(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;)  また、変換後のコレクションには、要素をインスタンス変数として直接もつ独自のコレクション・クラスを利用しているため、メモリ効率も一番良い。</description>
    </item>
    
    <item>
      <title>Ruby の String#to_i と組み込み関数の Integer() は違う</title>
      <link>http://ishikawa.github.io/2007/10/06/ruby-to-i-and-integer-function/</link>
      <pubDate>Sat, 06 Oct 2007 10:37:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/10/06/ruby-to-i-and-integer-function/</guid>
      <description>文字列から数値への変換に String.to_i を使っていると、思わぬ問題に出くわすことがある。
Ruby リファレンスマニュアルには、
 整数とみなせない文字があればそこまでを変換対象とします。変換対象が 空文字列であれば 0 を返します。
 このように説明されているが、これをそのまま解釈すると、以下のような挙動が予想できる。
irb(main):001:0&amp;gt; &amp;quot;10&amp;quot;.to_i =&amp;gt; 10 irb(main):002:0&amp;gt; &amp;quot;10fixnum&amp;quot;.to_i =&amp;gt; 10 irb(main):003:0&amp;gt; &amp;quot;&amp;quot;.to_i =&amp;gt; 0  ただ、次のような挙動は意外だった。
irb(main):001:0&amp;gt; &amp;quot; 10&amp;quot;.to_i =&amp;gt; 10 irb(main):002:0&amp;gt; &amp;quot;fixnum&amp;quot;.to_i =&amp;gt; 0  最初の例は「文字列中の先頭の空白文字は無視される」と推測できるが、次の例はどうだろうか。明らかに数値ではない文字列の場合はエラーになりそうだが、この場合、
 先頭の文字 f が整数とみなせない よって空文字列が変換対象 変換対象が 空文字列であれば 0 を返す  という挙動らしい。
変換できない場合はエラーにする 変換できないときに 0 を返すのはコードをシンプルにできるが、バグの原因にもなりやすい。
変換できない場合はエラーにしたいところだが、Ruby の Time.parse で文字列を Time に変換するときのエラーチェックと同様、String.to_i にはエラーを検出する仕組みがない。
どうするか、というと組み込み関数の Integer を使う。
irb(main):001:0&amp;gt; Integer(&amp;quot;10fixnum&amp;quot;) ArgumentError: invalid value for Integer: &amp;quot;10fixnum&amp;quot; from (irb):7:in `Integer&#39; from (irb):7 from :0  リファレンスマニュアルにもあるように、変換できない場合は、例外 ArgumentError が発生する。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API（目次）</title>
      <link>http://ishikawa.github.io/2007/09/23/prototype-1-6-0-event-overhaul-release-toc/</link>
      <pubDate>Mon, 24 Sep 2007 12:10:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/23/prototype-1-6-0-event-overhaul-release-toc/</guid>
      <description>Prototype 1.6.0 RC の変更点、特にイベント周りの API の変更についてまとめた記事のインデックス。
 Event.observe で登録したコールバックの this イベントオブジェクトの拡張 Event.stopObserving で複数のイベント登録を解除できるようになった カスタム・イベント クロスブラウザな DOMContentLoaded イベント  </description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API (4)</title>
      <link>http://ishikawa.github.io/2007/09/23/prototype-1-6-0-event-overhaul-release-take-4/</link>
      <pubDate>Mon, 24 Sep 2007 12:02:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/23/prototype-1-6-0-event-overhaul-release-take-4/</guid>
      <description>Prototype 1.6.0 RC のイベント API について紹介するシリーズも今回が最後。
カスタム・イベント あらかじめ定義された組み込みのイベント click や submit 以外にも、ユーザーが好きなイベントを発生させることができるようになった。
たとえば、こんな HTML があるとして、
&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;&amp;lt;span id=&amp;quot;title&amp;quot;&amp;gt;Release notes&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt; ... &amp;lt;/div&amp;gt;  Element#fire（実体は Event.fire）メソッドを使って、タイトルが変更された、という通知を送る（イベントを発生させる）ことができる。
$(&amp;quot;title&amp;quot;).fire(&amp;quot;titleChanged&amp;quot;);  当然、受け手も必要なわけで、組み込みのイベントと同様、Element#observe でコールバック関数を登録できる。
$(&amp;quot;container&amp;quot;).observe(&amp;quot;titleChanged&amp;quot;, function(event) { this.highlight({ duration: 0.5 }); });  ちなみに、Event.fire メソッドは内部で次のどちらかの処理を行う。
 ブラウザが DOM Events をサポートしていれば、document.createEvent でイベントを作成し、element.dispatchEvent でイベントを発生 そうでなければ、document.createEventObject でイベントを作成し、element.fireEvent でイベントを発生  クロスブラウザな DOMContentLoaded イベント window.onload 前でも DOM 処理が可能なら通知してくれる domready.js でも紹介した DOMContentLoaded がサポートされた。
document.observe(&amp;quot;contentloaded&amp;quot;, function() { ... })  従来の Element#observe メソッドを通して、透過的に扱うことができる。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API (3)</title>
      <link>http://ishikawa.github.io/2007/09/22/prototype-1-6-0-event-overhaul-release-take-3/</link>
      <pubDate>Sat, 22 Sep 2007 09:28:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/22/prototype-1-6-0-event-overhaul-release-take-3/</guid>
      <description>Prototype 1.6.0 RC イベント API の進化、更なるつづき。
Event.stopObserving で複数のイベント登録を解除できるようになった イベントのコールバック関数は Event.observe や Element#observe で登録し、
 Event.stopObserving Element#stopObserving  で登録を解除できる。
これまで stopObserving() で登録を解除するには observe() に渡した引数と同じものを渡す必要があった。つまり、
Event.observe(&#39;signinForm&#39;, &#39;submit&#39;, checkForm);  でコールバック関数 checkForm を登録した場合は、
Event.stopObserving(&#39;signinForm&#39;, &#39;submit&#39;, checkForm);  としていたはず。
1.6.0 では引数を省略することで、対応するコールバック関数すべてを解除できるようになった。
// checkForm を解除 Event.stopObserving(&#39;signinForm&#39;, &#39;submit&#39;, checkForm); // signinForm の submit イベントに登録されたコールバック関数を解除 Event.stopObserving(&#39;signinForm&#39;, &#39;submit&#39;); // signinForm に登録されたコールバック関数を解除 Event.stopObserving(&#39;signinForm&#39;);  これまで removeEventListener や detachEvent の単なるラッパーに近かった stopObserving だが、これでだいぶ使いやすくなった。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API (2)</title>
      <link>http://ishikawa.github.io/2007/09/21/prototype-1-6-0-event-overhaul-release-take-2/</link>
      <pubDate>Fri, 21 Sep 2007 05:41:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/21/prototype-1-6-0-event-overhaul-release-take-2/</guid>
      <description>随分と間が空いてしまった。前回の記事 Prototype 1.6.0 で大きく進化したイベント API に引き続き、Prototype 1.6.0 RC で導入された、イベント API の変更点を見ていく。
イベントオブジェクトの拡張 これまでも、たとえば $() から返された DOM 要素は Element.extend で色々と便利なメソッドが追加されていたが、1.6.0 からはイベントのコールバックに渡されるイベントオブジェクトでも Event.extend されるようになった。
これからはコールバック関数でこんなふうに書ける。
function onClickListener(event) { if (event.isLeftClick()) { ... } }  また、IE の場合は他のモダンブラウザとの差異をなくすため、以下のプロパティも追加されている。
 target relatedTarget pageX pageY  また、Document Object Model Events に準拠した、
 stopPropagation() preventDefault()  メソッドも追加されているようだ。（更につづく）</description>
    </item>
    
    <item>
      <title>Java のプロジェクトで一番長いクラス名</title>
      <link>http://ishikawa.github.io/2007/09/18/longest-java-class-name/</link>
      <pubDate>Wed, 19 Sep 2007 07:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/18/longest-java-class-name/</guid>
      <description>ふと気になって書いてみた。
カレントディレクトリ以下の .java ファイルを、ファイル名の長さでソートするスクリプト。
% find . -name &amp;quot;*.java&amp;quot; -exec basename -s .java {} \; | ruby -ne &#39;$_.chomp!; puts &amp;quot;#{$_.size} #{$_}&amp;quot;&#39; | sort -n  JRuby だとこんな感じ。
3 Dir 3 Pwd 4 Glob 4 Iter 4 Java ... 30 DumpingInvocationMethodFactory 32 DumpingInvocationCallbackFactory 32 MultipleAssignmentReWriteVisitor 32 OSEnvironmentReaderFromApacheAnt 34 OSEnvironmentReaderFromRuntimeExec 40 OSEnvironmentReaderFromJava5SystemGetenv  左側の数字がファイル名の文字数だ。つまり、一番長いファイル名（クラス名）は OSEnvironmentReaderFromJava5SystemGetenv で 40 文字。
ちなみに、いま仕事で関わっているプロジェクトでは 37 文字が最長だった。負けた。</description>
    </item>
    
    <item>
      <title>時をかける少女</title>
      <link>http://ishikawa.github.io/2007/09/12/%E6%99%82%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B%E5%B0%91%E5%A5%B3/</link>
      <pubDate>Thu, 13 Sep 2007 08:33:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/12/%E6%99%82%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B%E5%B0%91%E5%A5%B3/</guid>
      <description>今年度の星雲賞を受賞したアニメ「時をかける少女」を観た。星雲賞は SF の賞だけど、SF とか小難しいことをまったく意識させない（だが、まぎれもなく SF）。アニメ好きではない知り合いにも安心してお薦めできる。
時間を過去にさかのぼれる「タイムリープ」という能力がストーリーの肝になる。主人公は気の向くまま、惜しみなく何度も使ってしまう。視聴者からすれば、一度観たシーンが巻き戻されたテープレコーダーのように繰り返されるわけで、その、目眩にも似た既視感が心地よい刺激になっている。
不用意で間抜けで元気だけはありあまった、つまりは普通の高校生の、青春とか恋愛とかそういうものを、真面目に丁寧に描いた傑作。
時をかける少女 通常版</description>
    </item>
    
    <item>
      <title>クリストファー・プリースト「奇術師」</title>
      <link>http://ishikawa.github.io/2007/09/12/%E5%A5%87%E8%A1%93%E5%B8%AB/</link>
      <pubDate>Thu, 13 Sep 2007 06:59:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/12/%E5%A5%87%E8%A1%93%E5%B8%AB/</guid>
      <description>映画「プレステージ」の予習として原作を買っておいたら、積ん読にしているうちに映画の上映もおわってしまった。初プリースト。
ネタ自体はさほど驚きもしなかったのだけれど（これは日本の本格ミステリーとかでバカネタに慣れすぎたせいだと思う）、それでも引き込まれる。決して短い話ではないのだが、語りが抜群に巧い。物語の魅力か。
〈プラチナファンタジイ〉 奇術師 (ハヤカワ文庫 FT)</description>
    </item>
    
    <item>
      <title>今日の Ruby 落とし穴</title>
      <link>http://ishikawa.github.io/2007/09/11/ruby-pitfall-today/</link>
      <pubDate>Wed, 12 Sep 2007 06:31:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/11/ruby-pitfall-today/</guid>
      <description>Ruby の落とし穴には載っていないようなので。
def def foo # ... end  上記スクリプトは SyntaxError にならない（def がふたつあるのに注意）。
しかし、実際にメソッド foo を呼び出そうとすると、
def def foo # ... end foo  % ruby test.rb test.rb:5: undefined local variable or method `foo&#39; for main:Object (NameError)  未定義だと怒られる。
あと、
p [1, 2, 3].map do |v| v + 1 end  このコードは意図通りに動作しないどころか、ブロックが実行されない、というのには驚いた。</description>
    </item>
    
    <item>
      <title>Apple によるロケール周りの変更点を Python 2.5.1 にも適用する</title>
      <link>http://ishikawa.github.io/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/</link>
      <pubDate>Sun, 09 Sep 2007 11:49:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/</guid>
      <description>Python: Mac OS X での locale.getpreferredencoding() では、Mac OS X に Python 2.5.1 をソースコードからインストールした場合に発生する、ロケール周りの問題点について書いた。
要約すると、
 locale.getpreferredencoding() の返すエンコーディングが X-MAC-JAPANESE になってしまう Python では X-MAC-JAPANESE がデフォルトではサポートされていないため、locale.getpreferredencoding() を利用したエンコード、デコードができない _localmodule.c を変更して、X-MAC-JAPANESE の代わりに shift_jis を返すようにして解決  という内容だった。
しかし、しばらくして「っき」さんよりコメントをいただいた。
 上記のlocale.getpreferredencoding()の返り値ですが、10.4.9に含まれているOS標準のPython 2.3.5では、デフォルトがUS-ASCIIになっていて、LANG環境変数も見てくれます。
これは、Appleがパッケージングの際に、
http://www.opensource.apple.com/darwinsource/10.4.9.x86/python-16.1.3/
以下に含まれているパッチを適用して、ロケール周りのdefined(APPLE)や ‘darwin’ を無効にしているからです。
 たしかに、前回の記事では Mac OS X に標準でバンドルされている Python にまで考えが及んでいなかった。「っき」さんの指摘通り、互換性のことも考慮すると、Apple のパッケージングを見習うのがよさそうだ。
というわけで、Apple のパッチを適用した Python 2.5.1 のパッチファイルをアップしておく。以降は、このパッチファイルを作成するまでの詳細である。
Mac OS X に標準でパッケージングされている Python Apple Developer Connection の Open Source ページでは Mac OS X のベースとなっている Darwin のソースコードが公開されている。現時点での最新版は Mac OS X 10.</description>
    </item>
    
    <item>
      <title>WebKit のブラウザ判定と iPhone、そして iPod touch</title>
      <link>http://ishikawa.github.io/2007/09/08/webkit-detect-script-for-iphone-and-ipod-touch/</link>
      <pubDate>Sun, 09 Sep 2007 05:05:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/08/webkit-detect-script-for-iphone-and-ipod-touch/</guid>
      <description>Prototype 1.6.0 のブラウザ判定と iPhone では、
 prototype.js には 1.5.1 から、各種ブラウザを判定するための Prototype.Browser が定義されている。
 として prototype.js のブラウザ判定コードを紹介した。iPhone を含む WebKit ベースのブラウザも判別できる。
WebKit Detect script Surfin’ Safari の WebKit Detect script updated for iPhone and iPod touch で知った。WebKit detection script というものがあるらしい。
記事では iPhone と iPod touch もサポートしたよ、と書かれている。ソースコードではこんな感じ、
WebKitDetect.isWebKit = function isWebKit() { return RegExp(&amp;quot; AppleWebKit/&amp;quot;).test(navigator.userAgent); } ... WebKitDetect.isMobile = function isMobile() { return WebKitDetect.isWebKit() &amp;amp;amp;&amp;amp;amp; RegExp(&amp;quot; Mobile/&amp;quot;).test(navigator.userAgent); }  つまり、User-Agent に、
 &amp;ldquo;AppleWebKit/&amp;rdquo; があれば WebKit &amp;ldquo;Mobile/&amp;rdquo; があれば携帯端末  ということのようだ。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API</title>
      <link>http://ishikawa.github.io/2007/09/02/prototype-1-6-0-event-overhaul-release/</link>
      <pubDate>Sun, 02 Sep 2007 09:55:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/02/prototype-1-6-0-event-overhaul-release/</guid>
      <description>Prototype 1.6.0 RC にはいくつもの変更点がある。
特に イベント周りの API で顕著だ。Event.observe メソッドなど、お馴染みの API が大幅に手を加えられている。
Event.observe で登録したコールバックの this いままで Event.observe でコールバック関数を登録するときは、コールバックが呼ばれたときの this を固定するため（と、引数に event が確実に渡ってくるように）、
var element = $(&#39;mybutton&#39;); Event.observe(element, &#39;click&#39;, onClickEventListener.bindAsEventListener(element));  Function#bindAsEventListener を使っていたと思う。
これが 1.6.0 では、Event.observe や Element.observe で登録したコールバック関数はすべてのブラウザで、this がイベントの発生した DOM 要素となるように変更された。
そのため、上記のコードはシンプルに、
var element = $(&#39;mybutton&#39;); Event.observe(element, &#39;click&#39;, onClickEventListener);  と書けるようになった。
もっとも、コールバック関数を登録するオブジェクト（コントローラー）自身を this にすることの方が多いかもしれない。その場合は bind する必要がある。
var element = $(&#39;mybutton&#39;); Event.observe(element, &#39;click&#39;, onClickEventListener.bind(this));  コールバック関数の this を固定する処理 すでに Function#bind や Function#bindAsEventListener が紹介されつくしているご時世に今更な感もあるが、Event.</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 のブラウザ判定と iPhone </title>
      <link>http://ishikawa.github.io/2007/09/01/prototype-1-6-0-has-detection-for-iphone/</link>
      <pubDate>Sat, 01 Sep 2007 08:30:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/09/01/prototype-1-6-0-has-detection-for-iphone/</guid>
      <description>prototype.js には 1.5.1 から、各種ブラウザを判定するための Prototype.Browser が定義されている。
var Prototype = { ... Browser: { IE: !!(window.attachEvent &amp;amp;&amp;amp; !window.opera), Opera: !!window.opera, WebKit: navigator.userAgent.indexOf(&#39;AppleWebKit/&#39;) &amp;gt; -1, Gecko: navigator.userAgent.indexOf(&#39;Gecko&#39;) &amp;gt; -1 &amp;amp;&amp;amp; navigator.userAgent.indexOf(&#39;KHTML&#39;) == -1, ...  使い方は一目瞭然だろう。
たとえば Internet Explorer の場合は Prototype.Browser.IE が、Safari など WebKit を利用しているブラウザでは Prototype.Browser.WebKit が true になる。
Prototype 1.6.0 RC での Prototype.Browser そして、Prototype 1.6.0 RC では、ここに新しい定義が追加された。
iPhone だ。
var Prototype = { Version: &#39;1.6.0_rc0&#39;, Browser: { IE: !!(window.attachEvent &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>Ruby の Mongrel でお手軽 HTTP サーバ</title>
      <link>http://ishikawa.github.io/2007/08/30/setup-simple-http-server-with-mongrel/</link>
      <pubDate>Thu, 30 Aug 2007 10:25:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/30/setup-simple-http-server-with-mongrel/</guid>
      <description>先日、やっつけスクリプトのサーバ部分に Mongrel を使ってみたんだけど、Rails で使う以外だとドキュメント少ないのね。
とりあえず、Ruby の Webrick でお手軽 HTTP サーバの Mongrel 版はこんな感じ。
#!/usr/local/bin/ruby require &#39;rubygems&#39; require &#39;mongrel&#39; def mongrel(config = {}) server = Mongrel::HttpServer.new(&#39;localhost&#39;, config[:Port]) server.register(&amp;quot;/&amp;quot;, Mongrel::DirHandler.new(config[:DocumentRoot])) server.run.join end mongrel :DocumentRoot =&amp;gt; &#39;/Users/ishikawa/Sites/spotwide&#39;, :Port =&amp;gt; 5001  まあ、これくらいなら API ドキュメント眺めたら書ける（というか載ってる）けど。</description>
    </item>
    
    <item>
      <title>Java 1.5 で追加された配列の便利メソッド</title>
      <link>http://ishikawa.github.io/2007/08/26/java-util-arrays-1-5/</link>
      <pubDate>Sun, 26 Aug 2007 09:55:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/26/java-util-arrays-1-5/</guid>
      <description>Java 1.5 (J2SE 5.0) では java.util.Arrays に、いくつかのメソッドが追加されている。地味ながらも、自前で書くのは面倒くさいものばかりだ。
hashCode, toString 配列そのものではなく、配列の各要素を比較する Arrays.equals は 1.5 以前からあったが、Java 1.5 では、同様に配列の各要素を使う
 Arrays.hashCode Arrays.toString  が用意された。
deepEquals, deepHashCode, deepToString Arrays.equals, Arrays.hashCode, Arrays.toString はどれも「浅い」処理しか行わないため、入れ子になった配列では期待通りに動作しない。Java 1.5 では、入れ子になった配列にも対応したバージョンが用意されている。
 Arrays.deepEquals Arrays.deepHashCode Arrays.deepToString  J2SE 6.0 更に Java 1.6 (J2SE 6.0) では範囲を指定できる二分探索や配列のコピー操作が追加されているようだ。</description>
    </item>
    
    <item>
      <title>Ruby の Webrick でお手軽 HTTP サーバ</title>
      <link>http://ishikawa.github.io/2007/08/25/setup-simple-http-server-with-webrick/</link>
      <pubDate>Sun, 26 Aug 2007 02:12:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/25/setup-simple-http-server-with-webrick/</guid>
      <description>サイトの HTML や CSS を自分のパソコン上で編集するとき、不便に感じるのは画像や外部 CSS ファイルの指定方法の違いだ。
サイト上の HTML や CSS では、たとえば、
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/stylesheets/application.css&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; charset=&amp;quot;utf-8&amp;quot; /&amp;gt;  とか、
div#header div.logo h1 { width: 250px; height: 50px; background: url(/images/logo.png) no-repeat center center; }  になっているのに、自分のパソコン上で編集するときには、これらを
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./stylesheets/application.css&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; charset=&amp;quot;utf-8&amp;quot; /&amp;gt; ... div#header div.logo h1 { width: 250px; height: 50px; background: url(./images/logo.png) no-repeat center center; }  いちいち、相対パスに変換しなくてはいけないのだ。面倒だし、誤って別の箇所を削ってしまったり、一部だけ変更し忘れるなんてことがないとも限らない。
変更しなくても済むように こういうときは、ローカルに HTTP サーバを用意すると便利だ。
ローカルに HTTP サーバを用意して、そこで編集中のサイトを表示させるようにすれば、画像や外部 CSS ファイルのパスを実際のサイトのものから書き換えなくても、正常に表示できるようになる。</description>
    </item>
    
    <item>
      <title>Mail.app を vacuum して高速化</title>
      <link>http://ishikawa.github.io/2007/08/23/optimize-the-apple-mail-app-database/</link>
      <pubDate>Fri, 24 Aug 2007 05:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/23/optimize-the-apple-mail-app-database/</guid>
      <description>SQLite の vacuum コマンドで Mail.app を高速化する。ターミナルで、
% cd ~/Library/Mail/; sqlite3 Envelope\ Index &amp;quot;vacuum;&amp;quot;  Automator で自動化する Mail Vacuum なんてのもある。
個人的には、以下のような AppleScript を、
tell application &amp;quot;Terminal&amp;quot; activate do script &amp;quot;cd ~/Library/Mail/; sqlite3 Envelope\\ Index \&amp;quot;vacuum;\&amp;quot;&amp;quot; end tell  Optimize Mail.app.scpt として保存し、QuickSilver から実行できるようにしている。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 と DOMContentLoaded</title>
      <link>http://ishikawa.github.io/2007/08/22/prototype-1-6-0-features-dom-content-loaded-event/</link>
      <pubDate>Wed, 22 Aug 2007 05:32:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/22/prototype-1-6-0-features-dom-content-loaded-event/</guid>
      <description>Prototype 1.6.0 のリリース候補版が公開されたようだ。
 Prototype JavaScript framework: Prototype 1.6.0 release candidate Riding Rails: Prototype 1.6.0 release candidate  変更点が多い。目を引くものとしては、クラスの継承がサポートされた。新しい Class.create では親クラスを指定できる。いままでは Object.extend によるコピーで擬似的な継承をしていただけなので、これは嬉しいかもしれない。
クロスブラウザな DOMContentLoaded イベント また、「window.onload 前でも DOM 処理が可能なら通知してくれる domready.js」という記事でも書いた、DOMContentLoaded がサポートされた。
document.observe(&amp;quot;contentloaded&amp;quot;, function() { ... })  従来の Element#observe メソッドを通して、透過的に扱うことができる。これで、先の記事にアップしていた domready.js は不要になるだろう。
1.6.0 には他にも色々面白そうな機能が追加されている。暇があるときに追々調べていくつもり。</description>
    </item>
    
    <item>
      <title>Xcode でプロジェクトの名前を変更したくなったら</title>
      <link>http://ishikawa.github.io/2007/08/21/rename-xcode-project/</link>
      <pubDate>Tue, 21 Aug 2007 05:24:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/21/rename-xcode-project/</guid>
      <description>Xcode でプロジェクトの名前を変えたくなった。
だが、簡単にはいかない。変更箇所が散在している。面倒くさい。以下に手順をまとめてみる。
プロジェクト・ファイル名の変更  Finder で Xcode のプロジェクト・ディレクトリの名前を変更する .xcodeproj ファイルの名前を変更する  ターゲットの変更  Xcode でターゲット名を変更する ターゲットエディタの「ビルド」パネルを表示し、「PRODUCT」で検索して表示される「プロダクト名」を変更 「PREFIX」で検索して表示されるプレフィックスヘッダのパスにアプリケーション名が含まれているなら変更。 プレフィックスヘッダの名前も、この機会に prefix.pch とかアプリケーション名に依存しない名前にしてしまうのもアリ  ソースコードの変更  クラス名の先頭にアプリケーション名の頭文字とか使ってたら悲惨 Finder でソースファイル名を変更すると、Xocde 上でのリンクがなくなってしまう .nib ファイルから参照されている場合はそちらも変更する必要が これもアプリケーション名に依存しないようにしておけばいいんだけど、それはそれで。  プロパティ設定の変更  ターゲットエディタの「プロパティ」パネルを表示 識別子にアプリケーション名が含まれているなら変更する 主要クラスとかも変える必要があれば変更する  これくらいかな。他にあるかもしれんけど。あとはプロジェクトをクリーンして再ビルド。
今回の記事を書くにあたってウェブを検索してみると、どうやら、Rename Xcode Project なんて、そのまんまなソフトウェアもあるらしい（試していない）。</description>
    </item>
    
    <item>
      <title>rsync で ssh のポートを指定する方法</title>
      <link>http://ishikawa.github.io/2007/08/20/how-does-rsync-specify-ssh-port-in-command-line/</link>
      <pubDate>Mon, 20 Aug 2007 11:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/20/how-does-rsync-specify-ssh-port-in-command-line/</guid>
      <description>rsync で ssh のポートを指定するには -e または --rsh オプションを使う。
rsync **-e &amp;quot;ssh -p 2234&amp;quot;** ...  </description>
    </item>
    
    <item>
      <title>安田均「ゲームを斬る」</title>
      <link>http://ishikawa.github.io/2007/08/19/%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E6%96%AC%E3%82%8B/</link>
      <pubDate>Mon, 20 Aug 2007 02:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/19/%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%92%E6%96%AC%E3%82%8B/</guid>
      <description>もともと、テーブルトーク RPG が好きでよく遊んでいた。中高生の頃だ。
最初に遊んだゲームこそダンジョンズ＆ドラゴンズだったが、おりしも世間はグループ SNE 全盛の時代。ソードワールド、ロードス島戦記、クリスタニア&amp;hellip;、と次々出されるテーブルトーク RPG を遊びまくった（ちなみに、これらのゲームは背景世界は同じだが、システムはどれも異なっていた）。
本書「ゲームを斬る (Role&amp;amp;Roll Books)」は、グループ SNE の中心的人物でもある安田均の評論・エッセイ集。これは読まないわけにはいかない。ゲーム攻略本にまじって書店の隅に置かれていたのを見つけ、思わず購入してしまった。
二部構成になっていて第一部がボードゲーム、第二部が RPG の話になっている。そして、第二部の前半はボードゲームを RPG の観点から紹介したら、という趣向。なので、純粋に RPG の内容といえば全体の四分の一程度。ボードゲームはそれほど熱心なプレイヤーではなかった。しかし、それでも楽しめる内容。
なにしろ、紹介されるゲームはどれも素晴らしいアイデアとゲーム性に富んだ作品ばかりだ。そして、ただの紹介記事に留まらず、実際に遊んだときのゲームの感触や、アナログゲームの歴史、その作品のデザイナー個人の歴史とも絡めて、それぞれのゲームが楽しく語られている。
ゲーム好きなら、この本を読んでわいわいゲームをやりたくなるか、自分でゲームを作りたくなるかのどちらかだろう。
ゲームを斬る! (Role&amp;amp;Roll Books)</description>
    </item>
    
    <item>
      <title>テーブルトークとブレインストーミング</title>
      <link>http://ishikawa.github.io/2007/08/18/tabletalking-and-brainstorming/</link>
      <pubDate>Sun, 19 Aug 2007 01:23:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/18/tabletalking-and-brainstorming/</guid>
      <description>そういえば、テーブルトーク RPG って、まさにブレインストーミングだ。
Lifehacking.jp の記事「ブレインストーミングは死んだ！ ブレインストーミング万歳！」より（強調は引用者）。
  セッションのまとめ役の経験不足： 意見の交通整理をしたり、理解しにくいアイディアをかみくだいて全員に提示したり、時間管理や、問題から議論の流れが外れたときの対応など、D&amp;amp;D のダンジョンマスターのような経験をもっている公平なまとめ役がいない。   この記事で触れられている D&amp;amp;D（ダンジョンズ＆ドラゴンズ）こそ、テーブルトーク RPG の元祖。コンピュータゲームや映画、小説にもなっているため知っている人もすくなくないだろう（そもそも、テーブルトーク RPG がどんなものか、については Wikipedia の解説なりをどうぞ）。
テーブルトーク RPG のセッションで、ゲームマスターが用意するものといえば、最低限のストーリー進行と場面場面のイベント設定、そして、妥当なエンディングをひとつかふたつくらい。
あとはプレイヤーとの会話や駆け引きで場を演出し、ひとつのゲーム体験をつくっていく。
ブレインストーミングのノリに近いと思うし、失敗する原因もだいたい似ているんじゃないか。プレイヤーたちのひょんな行動から思いもよらぬ方向へストーリーが進んだり、迷惑なプレイヤー（ルールの重箱の隅をつつくのが好き、奇抜な行動しかとりたがらない、&amp;hellip; etc）のせいで悲惨なセッションになったり。</description>
    </item>
    
    <item>
      <title>iGTD と QuickSilver の連携</title>
      <link>http://ishikawa.github.io/2007/08/15/about-igtd-quicksilver-plugin/</link>
      <pubDate>Wed, 15 Aug 2007 05:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/15/about-igtd-quicksilver-plugin/</guid>
      <description>iGTD のインストール用ディスクイメージには QuickSilver と連携するためのプラグインが同梱されている（参考：iGTD &amp;amp; Quicksilver）。
このプラグインで追加される Put into iGTD inbox を使えば、QuickSilver で選択したものは何でも（テキスト、ファイル、ブックマーク、あるいはアプリケーションも）iGTD の inbox に放り込むことが可能だ。QuickSilver でテキストを入力すれば、それがそのままタスクの名前になるし、ファイルやブックマークはタスクにリンクが付随したかたちで登録される。
また、タスクを登録するときは、あらかじめ決められたフォーマットに従うことで、たとえば、登録先のコンテキストやプロジェクトを指定することができる。
以下に、使用できるフォーマットをまとめた。
 コンテキストを指定する    @development Remove a bug with link field @dev Remove a bug with link field    プロジェクトを指定する    A nice new feature [igtd] A nice new feature [ig]    ノートを指定する    @dev A nice new feature [igtd]: quicksilver integration @dev A nice new feature: quicksilver integration [igtd]    優先度を指定する    @dev A nice new feature!</description>
    </item>
    
    <item>
      <title>Mac の GTD アプリ、iGTD を試してみた (2)</title>
      <link>http://ishikawa.github.io/2007/08/11/review-my-igtd-experience/</link>
      <pubDate>Sat, 11 Aug 2007 08:59:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/11/review-my-igtd-experience/</guid>
      <description>© Takanori Ishikawa, Some rights reserved
前回書いたように、Remember The Milk から iGTD に乗り換えた。
数日使ってみて、コンテキスト（背景）には「仕事」「プライベート」の二種類、そして、三つのプロジェクトを登録してある（シンプルな人生だ）。段々と日常的なワークフローに組み込まれつつある感じ。いまのところ全般的な使い勝手はいい。
もっとも、最初から順風満帆だったわけではなく、最初使ってみたときは戸惑う部分もあった。ヘルプを読むまで分からなかった「直感的に」使えなかった部分をまとめてみる。
 タスクを手動で並び替える。タスクを名前や優先度で並び替えるのは簡単にできる。その項目名をクリックするだけだ。しかし、手動で並び替えをしようとタスクをドラッグ＆ドロップしてもできない。メニューの「View」&amp;gt;「Toggle natural sorting」を選択すると、タスクをドラッグ＆ドロップで並び替えできるようになる（Sorting tasks）。 完了したタスクが表示されないようにする。完了したタスクのチェックボックスをチェックしても、タスクは消えるわけじゃない。タスクの「掃除」をするまでは未完了のまま残ることになる。手動で「Tasks」&amp;gt;「Clean up」を実行するか。自動的に実行されるように、環境設定で設定しておこう（Cleaning up）。  ふたつしかない。荒削りな部分もあるが、UI はまとまっていると思う。
ちょっとした不満 これらはヘルプを読んでも片づかなかった不満。
 フォントサイズ Large だと Priority の表示がずれてしまう 検索 表示中のタスクからしか検索できない（すべてひっくるめて大域的に検索できない） 並び替え プロジェクトやアーカイブ表示で手動による並び替えができない アーカイブ アイデアや興味深いリンクやファイル、といったタスク以外の諸々をまとめておけるアーカイブ。是非欲しかった機能だが、まだまだ発展途上。並び替えができないのも痛いが、アイデアがタスクになったとき（「今日は、このアイデアやってみよう」）に、アーカイブからタスクに移動できない アイコン かわいくない  最後に やはり、デスクトップ・アプリケーションの強みなのだが、
 速い。タスクの粒度がちょっと大きいかなー、と思ったらサクサク分割していける。 常駐しやすい。ひとつの Web アプリケーションをずっと表示している、というのは稀だ。  この二点は GTD アプリケーションとしては重要な反面、Web アプリケーションではなかなか得難いのではないか、と思う。</description>
    </item>
    
    <item>
      <title>Mac の GTD アプリ、iGTD を試してみた</title>
      <link>http://ishikawa.github.io/2007/08/10/igtd-first-impression/</link>
      <pubDate>Fri, 10 Aug 2007 05:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/10/igtd-first-impression/</guid>
      <description>© Takanori Ishikawa, Some rights reserved
これまで TODO 管理には Remember The Milk を愛用していた。
ユーザーインターフェースはシンプルかつ高機能だし、タスクに期限を設定するとメールやメッセンジャーで通知してくれる。
この機能が非常に便利で重宝していた（かつて、checkpad から移行した理由でもある）。そして、なにより名前が洒落ている。そうだ、牛乳買わなきゃ。
でも、今日、iGTD に乗り換えた。何故か？
何故、Remember The Milk では駄目になったのか  重い。特にログイン後、タスクを表示するときが重い。 パスワード入力が面倒。クッキーは頻繁に削除するので自動ログインは使っていない。もちろん、Safari が自動入力してくれるのだが、ログイン画面で Enter を毎回押すのは、想像する以上の精神的負担だ。 オンラインでないと使えない。Google Gears をインストールすればオフラインでも使えるが、Safari に対応していない（開発中ではある）。  他にも「マニュアルでソートできない」とか細かい不満もあるのだが、こうしてみると、自分にとっての GTD アプリは「思いついたときに、即座に使えること」が重要なのが分かる。
Web アプリケーションと GTD そして、上にあげた不満点は Remember The Milk に限った話ではなく、多かれ少なかれ、すべての Web アプリケーションに当てはまるものばかりだ。今回、デスクトップ・アプリケーションである iGTD に乗り換えたのは必然、といえば必然の流れなのかもしれない。
Web アプリケーションにも利点はある。たとえば、Remember The Milk のメール通知機能は便利なので、これからも「来週控えている用事を忘れないように」といった用途専用に使いつづけるだろう。
そもそも、Remember The Milk はこういった素朴な TODO 管理、というか備忘メモ的な方が向いているのかもしれない（「そうだ、牛乳買わなきゃ」）。
いうなれば防御的。
でも、GTD から受ける印象は、どちらかというと攻撃的だ。積極的にタスクを切りだしては片づけていく。攻撃こそ最大の防御ということか。</description>
    </item>
    
    <item>
      <title>IE でリンクをクリックするとフォントサイズが小さくなる</title>
      <link>http://ishikawa.github.io/2007/08/08/hit-a-link-and-font-away/</link>
      <pubDate>Wed, 08 Aug 2007 10:15:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/08/hit-a-link-and-font-away/</guid>
      <description>ひさしぶりに Windows IE 6 でブログの確認をしていたら妙なことに気がついた。リンクをクリックすると、一瞬、クリックしたリンクのフォントサイズが小さくなるのだ。
図解入りバージョン ひさしぶりに Windows IE 6 でブログの確認をしていたら妙なことに気がついた。

リンクをクリックすると、一瞬、

クリックしたリンクのフォントサイズが小さくなるのだ。
考えられる原因とか対策  YUI の Reset CSS や Fonts CSS を使っているせいかも？ てか、いま気づいたけど、YUI に Base CSS なんて追加されたのね（他にも色々増えたようだ） いやいや、メイリオとか日本語の場合だけ駄目とか 検証する気力がない  とりあえず、強制的に font-size を指定してやることで、この問題は起きなくなるようだ。
* {font-size:100%;}  このブログの場合、上記 CSS を reset.css の最後に追加した。
結論 CSS ハックも可能な IE って面白いですね。</description>
    </item>
    
    <item>
      <title>グレッグ・イーガン「宇宙消失」</title>
      <link>http://ishikawa.github.io/2007/08/07/%E5%AE%87%E5%AE%99%E6%B6%88%E5%A4%B1/</link>
      <pubDate>Tue, 07 Aug 2007 10:44:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/07/%E5%AE%87%E5%AE%99%E6%B6%88%E5%A4%B1/</guid>
      <description>前回の「万物理論」に引きつづき読み返してしまった。
SF マガジン誌上の 1999 年ベストにも輝いたこの作品、グレッグ・イーガンの本邦デビュー作であるだけでなく、実はわたしの記念すべき SF 読者デビュー作でもある（いや、待てよ。嘘かもしれない。ジェイムズ・P・ホーガン「星を継ぐもの」が先だったか。なにしろ数年前の話なので&amp;hellip;）。
最初に読んだときは、間髪入れず繰り出される専門用語と知識、そして繰り広げられる物語の意味も分からぬまま雪崩れ込んだ結末に、ただただ呆然としていたような気がする。簡潔にいえば唖然。
それは今回の再読でも同じだった。違うことといえば、物語にうまく乗れたことだろうか。取り残されるのではなく。あれから何冊も SF を読んだおかげでジャーゴン（専門用語）への耐性と SF 的展開への慣れが身についたのかもしれない。以前は圧倒されるだけだった結末も、実は美しく、感動的でさえあることに気づかされる。
もちろん、欠点がないわけではなくて、娯楽作品としては退屈だったり冗長な展開だったりする部分もあるわけだが、読み終わった直後の今は、そういう瑣末なことがどうでもよい。安心して傑作だと言える。
宇宙消失 (創元SF文庫)</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 のインデックスと smallint と JDBC</title>
      <link>http://ishikawa.github.io/2007/08/02/postgresql-7-4-smallint-with-index-and-jdbc/</link>
      <pubDate>Fri, 03 Aug 2007 05:41:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/02/postgresql-7-4-smallint-with-index-and-jdbc/</guid>
      <description>PostgreSQL 7.4 のマニュアル「8.1.1. 整数データ型」には以下のような記述がある。
 注意: インデックスが付けられた smallint あるいは bigint の列がテーブルにある場合、システムがそのインデックスを使用しようとした時に問題を引き起こすことがあります。 例えば句が次のような形式の場合、
&amp;hellip; WHERE smallint_column = 42
システムはインデックスを使用しません。 なぜなら42という定数にシステムが integer を割り当てるからです。 今の所PostgreSQLは2つの異なるデータ型が混在している時には、インデックスを使うことができません。 問題を回避するには以下のように定数部分を単一引用符で括ります。
&amp;hellip; WHERE smallint_column = &amp;lsquo;42&amp;rsquo;
こうすると、システムは型分析を後廻しにしてこの定数に正しいデータ型を割り振ります。
 （なお、PostgreSQL 8.x のドキュメントからは該当する部分が削除されているので、バージョン 8 以降にはこの制限はないのかもしれない。未確認）
なんにせよ、PostgreSQL 7.4 では smallint のカラムを条件に含める場合は、 smallint_column = &#39;42&#39; と単一引用符で囲むか、smallint_column = 42::smallint みたいに型を指定しないと、インデックスが使われないらしい。
こういう些細な注意事項は忘れてしまうのが常なので、よほどサイズが重要でないかぎりは int を使うのが安全。どうしても smallint を使う場合は、ちゃんと SQL を explain してみて引用符で囲み、理由をコメントなりで書いておくようにするべきだろう。
ただ、問題は JDBC とかの抽象層をかます場合で、このときにどんな SQL が発行されるかを把握しておく必要がある。
PostgreSQL 側で、実際に発行されている SQL をログに記録して確認してみた。Java のコードと PostgreSQL のログに残されていた SQL ステートメントの両方を載せてある。</description>
    </item>
    
    <item>
      <title>グレッグ・イーガン「万物理論」</title>
      <link>http://ishikawa.github.io/2007/07/31/%E4%B8%87%E7%89%A9%E7%90%86%E8%AB%96/</link>
      <pubDate>Tue, 31 Jul 2007 10:55:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/31/%E4%B8%87%E7%89%A9%E7%90%86%E8%AB%96/</guid>
      <description>個人的には「順列都市」がグレッグ・イーガンの最高傑作なのだが、SF に馴染みの薄い友人に薦めるとしたら「万物理論」を選ぶ。
邦題にもなっている万物理論（原題は DISTRESS）だが、物語の主眼はそこにはない。これはジャーナリズムの話だ。もちろん、これは表層的、一面的な捉え方だろう。もしかすると、作品のテーマを取り違えているかもしれない。しかし、そうした捉え方も許容する懐の深さが、この長編をイーガンの他長編より際立たせている。
気宇壮大な SF と社会的テーマが見事に融合した傑作。
万物理論 (創元SF文庫)</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 を Intel Mac にインストールする方法</title>
      <link>http://ishikawa.github.io/2007/07/24/postgresql-7-4-11-compilation-failed-on-mac-intel/</link>
      <pubDate>Wed, 25 Jul 2007 04:24:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/24/postgresql-7-4-11-compilation-failed-on-mac-intel/</guid>
      <description>理由あって PostgreSQL 7.4 を Mac OS X にインストールすることになった。早速、ダウンロードページから手に入る中で最新の 7.4.17 をダウンロードしてインストールしようとするも、エラーが出てコンパイルできない。
% ./configure % make ... gcc -no-cpp-precomp -O2 -fno-strict-aliasing -Wall -Wmissing-prototypes -Wmissing-declarations -I../../../../src/include -c -o xlog.o xlog.c In file included from ../../../../src/include/storage/spin.h:50, from xlog.c:35: ../../../../src/include/storage/s_lock.h:543:2: error: #error **PostgreSQL does not have native spinlock support on this platform. To continue the compilation, rerun configure using --disable-spinlocks. However, performance will be poor. Please report this to pgsql-bugs@postgresql.org.** In file included from ../../../../src/include/storage/spin.h:50, from xlog.</description>
    </item>
    
    <item>
      <title>Rails で MySQL を使うときの注意点</title>
      <link>http://ishikawa.github.io/2007/07/24/notes-on-rubyonrails-with-mysql/</link>
      <pubDate>Tue, 24 Jul 2007 09:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/24/notes-on-rubyonrails-with-mysql/</guid>
      <description>Rails のブログでも取り上げられていた、&amp;rdquo;Rubyisms - MySQL-dump&amp;rdquo; が面白かったので、特に興味深かった一時テーブルまわりの要約を載せてみる。要約、というか読みながら書いたメモそのまんまですが。
Rubyisms - MySQL-dump http://mysqldump.azundris.com/archives/72-Rubyisms.html
&amp;ldquo;select *&amp;rdquo; が多すぎる ActiveRecord は、特に何も指定しないと select * で、すべてのカラムを取ってくる。SQL は動的に生成されて、どのカラムが存在するかチェックしているので、スキームが変更されても大丈夫。
でも、必要のないデータまで取ってきてしまう、という問題はあるよね。そして、何が無駄かっていうと、必要のないデータのために一時的なテーブルが使われるかもしれない、ってことなんだ（SQL を EXPLAIN してみて、&amp;rdquo;using temporary&amp;rdquo; となっていれば、そういう事態が発生しているサインだ）。
 TEXT や BLOB をもつテーブルではもっと悪くて、一時テーブルはディスク上に作られる これには tmp_table_size や max_heap_table_size の設定は関係ない  そういう場合は、SQL を二段階に分けるといい
 まず、最初の SQL でレコードの ID だけを SELECT する（int だけなので、このときの一時テーブルはメモリ上に作られる） 次に、その ID で必要な TEXT や BLOB を SELECT するんだ（これは ID による単純な検索なので一時テーブルは使われない） ActiveRecord では find([id1, id2, ...])  では、ActiveRecord で select * を避けるにはどうするか？
 find(.</description>
    </item>
    
    <item>
      <title>LLVM で Hello, World</title>
      <link>http://ishikawa.github.io/2007/07/22/hello-world-llvm/</link>
      <pubDate>Sun, 22 Jul 2007 10:23:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/22/hello-world-llvm/</guid>
      <description>LLVM で Hello, World プログラム。
@.LC0 = internal constant [13 x i8] c&amp;quot;Hello world!\00&amp;quot; declare i32 @puts(i8 *) define i32 @main() { %cast210 = getelementptr [13 x i8]* @.LC0, i64 0, i64 0 call i32 @puts(i8 * %cast210) ret i32 0 }  バイトコードにコンパイルして実行。
% llvm-as -f hello.ll % lli hello.bc Hello world!  まあ、プログラム自体は LLVM Assembly Language Reference Manual からの抜粋なわけだが。</description>
    </item>
    
    <item>
      <title>LLVM で Hello, World の puts 関数</title>
      <link>http://ishikawa.github.io/2007/07/22/hello-world-llvm-and-runtime-libraries/</link>
      <pubDate>Sun, 22 Jul 2007 02:06:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/22/hello-world-llvm-and-runtime-libraries/</guid>
      <description>前回のように簡単なプログラムでも、実際に書いてみると疑問が湧いてくる。
まず、文字列を出力している puts 関数。こいつの実体はどこにあるんだろう？ C のプログラムなら、リンカが標準ライブラリをこっそりリンクしている、という結末になるのだが&amp;hellip;。検索してみると、やはり、同じように疑問をもった人がいるようで、lli が実行時のライブラリとして標準 C ライブラリを利用しているらしい。
ということは printf なんかも使えるはずだよね。
@.LC0 = internal constant [14 x i8] c&amp;quot;Hello world!\0A\00&amp;quot; **declare i32 @printf(i8 *, ...)** define i32 @main() { %cast210 = getelementptr [14 x i8]* @.LC0, i64 0, i64 0 **call i32 (i8 *, ...)* @printf(i8 * %cast210)** ret i32 0 }  では、コンパイル、実行。
% llvm-as -f hello-printf.ll % lli hello-printf.bc Hello world!  うんうん。
 書籍「GNU開発ツール」 CC プログラミング工房 書籍 Vol.</description>
    </item>
    
    <item>
      <title>Python: Mac OS X での locale.getpreferredencoding() </title>
      <link>http://ishikawa.github.io/2007/07/19/problem-with-python-getpreferredencoding-in-trac-mac-os-x/</link>
      <pubDate>Thu, 19 Jul 2007 10:30:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/19/problem-with-python-getpreferredencoding-in-trac-mac-os-x/</guid>
      <description>（追記）この記事に載せているパッチよりも Apple によるロケール周りの変更点を Python 2.5.1 にも適用するのパッチを使った方がよさそうです。Mac OS X 標準の Python との互換性があります。
TracInstall に従って、Mac OS X で Trac を動かそうとしている。以前試したときは頓挫したのだが、今回は Python を含むすべてのライブラリを一からインストールして、じっくりやってみることにした。
とりあえず、tracd を起動するところまでは問題なくいったのだけれど、URL にアクセスしてみると早速こんなエラーが。
Traceback (most recent call last): File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 406, in dispatch_request dispatcher.dispatch(req) File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 207, in dispatch populate_hdf(req.hdf, self.env, req) File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 77, in populate_hdf &#39;time&#39;: format_datetime(), File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/util/datefmt.py&amp;quot;, line 65, in format_datetime return unicode(text, encoding, &#39;replace&#39;) LookupError: unknown encoding: X-MAC-JAPANESE  じっくりやってみる、と書いた矢先にくじけそうになりましたが、諦めずに原因を追ってみますね。
その前に、今回試したバージョンは、</description>
    </item>
    
    <item>
      <title>YUI の fonts.css だと pre &gt; code がでっかくなっちゃうね</title>
      <link>http://ishikawa.github.io/2007/07/17/yui-fonts-css-bigger-pre-code/</link>
      <pubDate>Tue, 17 Jul 2007 10:31:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/17/yui-fonts-css-bigger-pre-code/</guid>
      <description>Yahoo! UI Library (YUI) の fonts.css では pre と code を次のようにスタイルづけしている。
/** * Bump up !IE to get to 13px equivalent */ pre, code {font:115% monospace;*font-size:100%;}  要するに、
 等幅フォント IE では font-size:100% それ以外は font-size:115%  ってことなんだが、このブログみたいにサンプルコードとかを pre 要素と code 要素でマークアップしている場合は IE 以外でフォントが大きくなってしまう（font-size:115% が二回適用される）。
なので、別のスタイルシートにでも
pre &amp;gt; code { font-size: 100%; }  こういうのを追加しておくといい、と思った。ただ、実際にはインラインのコード片には code 要素を使っていて、これも font-size:115% とかされると行間がガタガタになってしまうので、単純に、
code { font-size: 100%; }  とかしてしまった方がいいかも（このへん、いつか整理しないと駄目だな&amp;hellip;）。
ちなみに、プロパティ名の先頭にアスタリスクをつける CSS ハックが、fonts.css の随所で使われているが、これについては以下のブログ記事を参照。
  アスタリスクをプロパティ名の頭につけるというCSSハック   </description>
    </item>
    
    <item>
      <title>prototype.js の $$ 関数で CSS 風に DOM プログラミング</title>
      <link>http://ishikawa.github.io/2007/07/15/css-like-dom-programming-with-prototype-get-elements-by-selector/</link>
      <pubDate>Sun, 15 Jul 2007 11:56:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/15/css-like-dom-programming-with-prototype-get-elements-by-selector/</guid>
      <description>prototype.js の $$ 関数（実際の処理は Selector.findChildElements）は CSS セレクタを受け取り、セレクタにマッチする要素を配列で返してくれる。
var links = $$(&#39;#contents a&#39;);  だが、単純にひとつのセレクタだけではなくて、複数のセレクタを引数に渡したり、CSS と同じく、カンマ区切りで複数指定することもできる（結果は重複要素のない配列となって返ってくる）。
var links = $$(&amp;quot;#contents a&amp;quot;, &amp;quot;#footer .items a&amp;quot;);  このコードは、こう書くこともできる。
var links = $$(&amp;quot;#contents a, #footer .items a&amp;quot;);  そして、いまさらながら気づいたのは、これらの特徴を利用すれば、DOM の処理を CSS のように宣言的に書くのが可能だ、ということ。
CSS 風に DOM プログラミング たとえば、フォーム入力画面で最初のテキストフィールドまたはテキストエリアを取り出す場合は、
$$( &amp;quot;form input[type=text]&amp;quot;, &amp;quot;form textarea&amp;quot; ).slice(0, 1)  と書けるので、以前の domready.js と組み合わせると、読み込み時に最初のテキストフィールドまたはテキストエリアを選択状態にするコードは以下のように書ける。
Event.domReady.add(function() { // Select initial first responder when the window is first placed onscreen. $$( &amp;quot;form input[type=text]&amp;quot;, &amp;quot;form textarea&amp;quot; ).</description>
    </item>
    
    <item>
      <title>ローレンス・Ｍ・クラウス「物理学者はマルがお好き―牛を球とみなして始める物理学的発想法」</title>
      <link>http://ishikawa.github.io/2007/07/13/%E7%89%A9%E7%90%86%E5%AD%A6%E8%80%85%E3%81%AF%E3%83%9E%E3%83%AB%E3%81%8C%E3%81%8A%E5%A5%BD%E3%81%8D/</link>
      <pubDate>Sat, 14 Jul 2007 08:14:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/13/%E7%89%A9%E7%90%86%E5%AD%A6%E8%80%85%E3%81%AF%E3%83%9E%E3%83%AB%E3%81%8C%E3%81%8A%E5%A5%BD%E3%81%8D/</guid>
      <description>「牛を球とみなして始める物理学的発想法」という副題や表紙のイラストから想像していた一般向けの物理雑学本、という当初の予想はいい意味で裏切られた。物理のさまざまな理論が構築されるに至った歴史的背景とジョークをまじえながら、数学マインドにたいする「物理マインド」とでも呼ぶべき原則を説くハードコアな本。
語り口は軽めで、第一章の牛を球に近似する話までは何とかついていける。そして、第三章の創造的剽窃（p.141「既存の法則を捨てるのではなく、その枠組みのなかで創造的に生きる方法を見出した」）の原則などは共感できる部分も多い。
しかし、第四章くらいになると、あまり真面目な学生でもなかった身にとっては、詳細を追うことが難しくなってくる。なんだか、気さくな学者に招かれて、あれこれ（アカデミック特有のジョークをまじえた）世間話を聞いているうちに、とんでもないレベルの話題に巻き込まれてしまった感じ。
ひさしぶりに体力を消耗する読書だったが、買って損はなかった。あと、数式がまったくといっていいほど出てこないのはいいね。そもそも、文系の人には読み方さえ分からない表記の数式とかあるので。
物理学者はマルがお好き (ハヤカワ文庫・NF)</description>
    </item>
    
    <item>
      <title>Tomcat 5.5 の一部バージョンでは JavaMail の JNDI リソースが動かない</title>
      <link>http://ishikawa.github.io/2007/07/12/problem-with-tomcat-5-5-2x-and-jndi-javamail/</link>
      <pubDate>Fri, 13 Jul 2007 08:45:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/12/problem-with-tomcat-5-5-2x-and-jndi-javamail/</guid>
      <description>Tomcat のバージョンを 5.5.17 から 5.5.23 にあげたところ、次のような例外が発生するようになった。
javax.naming.NamingException: Could not create resource factory instance [Root exception is java.lang.ClassNotFoundException: org.apache.naming.factory.MailSessionFactory] at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:132)  JNDI から JavaMail の javax.mail.Session を取り出すときに失敗しているようだ。
「MailSessionFactory が見つからないってことはまたクラスパス周りの問題かな、面倒くさいな&amp;hellip;」と思いきや、検索してみると、次のようなバグ報告が。
Bug 40668 - MailSessionFactory is missing in Tomcat 5.5.23 http://issues.apache.org/bugzilla/show_bug.cgi?id=40668
Tomcat 5.5.20 から現時点での最新バージョンである 5.5.23 では Tomcat 自体のビルドプロセスに問題があって（クラスパスに JavaMail が含まれていない？）、naming-factory.jar に JavaMail 関連のクラスがなくなっているらしい。
いまだに直ってない、ってのがすごいな。
この際、SMTP でメールを送信するくらいの用途なら、JNDI やめちゃうってのも手だと思う。JNDI のルックアップって非結合になっているようで、結局、新しい依存性を持ち込んでるだけ、というか、テストを考えると余計面倒だし。
Context context = new InitialContext(); Session session = (Session) context.lookup(&amp;quot;java:comp/env/mail/Session&amp;quot;);  これを
Properties props = new Properties(); props.</description>
    </item>
    
    <item>
      <title>堀晃「バビロニア・ウェーブ」</title>
      <link>http://ishikawa.github.io/2007/07/10/%E3%83%90%E3%83%93%E3%83%AD%E3%83%8B%E3%82%A2%E3%82%A6%E3%82%A7%E3%83%BC%E3%83%96/</link>
      <pubDate>Wed, 11 Jul 2007 08:51:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/10/%E3%83%90%E3%83%93%E3%83%AD%E3%83%8B%E3%82%A2%E3%82%A6%E3%82%A7%E3%83%BC%E3%83%96/</guid>
      <description>はじめて読む堀晃作品は第二十回星雲賞の日本長編部門を受賞した「バビロニア・ウェーブ」。
星雲賞受賞作を読むのは、日本長編部門のなかではこれが二作目（一作目は野尻抱介「太陽の簒奪者」）だったりする。星雲賞は海外作品やコミックだと、それなりに有名な作品は読んでいるのだが、国内作品は意外にすくない。
人類の主要なエネルギー供給源となっている巨大なレーザー光束——バビロニア・ウェーブ。この莫大なエネルギー源の謎が物語のテーマになっているのだが、個人的には、
 有り余るエネルギーを手にした文明がどうなるか エネルギー事情が一変したことにより、破棄されたコロニー コロニーの、回転する重力場で育った主人公マキタの特性  といったものに興味をそそられたし、小説内でもわりかし多くの紙面を割かれているように思う。
ただ、最終的に、これらの要素が脇道としてしか感じられなかったのは残念だ。バビロニア・ウェーブの謎も単体では求心力に乏しく、このへんや一癖ある登場人物たちがうまく絡んでいけば傑作になった気もするんだが&amp;hellip;。
バビロニア・ウェーブ

東京創元社 2007-02-21売り上げランキング : 87300**おすすめ平均 **ラストに向けてのスケールの広がりが見事。ちょっと欲求不満宇宙物理学の素養があれば、さらに楽しめますAmazonで詳しく見る by G-Tools</description>
    </item>
    
    <item>
      <title>window.onload 前でも DOM 処理が可能なら通知してくれる domready.js</title>
      <link>http://ishikawa.github.io/2007/07/10/domready-js-cross-browser-ondomcontentloaded/</link>
      <pubDate>Tue, 10 Jul 2007 12:42:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/10/domready-js-cross-browser-ondomcontentloaded/</guid>
      <description>DOM 読み込み完了のタイミングで、任意の関数を実行できるようにする JavaScript ライブラリを書いてみた。
 domready.js  mootools の同様の機能を基にしていて、単体として使いやすいように外部ライブラリへの依存性をなくし、prototype.js とも併用できるようにしたもの。
現状、手元の環境では以下のブラウザで動作確認済み。
 IE 7 (XP standalone) IE 6 SP2 Firefox 2.0.0.4 Opera 9.21 Safari 2.0.4 Mac Firefox 2.0.0.4 Mac IE 5.2.3  ただし、Mac IE では window.onload で代用するように実装してある。まあ、スクリプトエラーが出るよりマシだろう。
使い方 まず、domready.js を読み込む。
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/javascripts/domready.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  prototype.js と併用する場合は prototype.js より後に読み込む。
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/javascripts/prototype.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/javascripts/domready.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  あとは、DOM 読み込み完了のタイミングで実行したい関数を Event.domReady.add で登録するだけ。
Event.domReady.add(function() { ... });  他のイベントと登録方法が異なるのは直感的じゃない、とか言われそうだけど、正直あんまり気にならない。
経緯: window.onload の欠点 多くの Ajax 系実装では、ページ読み込み完了時に初期化などを実行するようになっている。</description>
    </item>
    
    <item>
      <title>rake コマンドで環境変数を設定する</title>
      <link>http://ishikawa.github.io/2007/07/08/setting-environment-variables-through-rake-command/</link>
      <pubDate>Sun, 08 Jul 2007 09:47:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/08/setting-environment-variables-through-rake-command/</guid>
      <description>Rake のユーザーガイドには書かれているのに、rake --help では出てこないようなのでメモ。
Rake では rake コマンドのオプションに name=value と指定することで環境変数を指定できる。
% rake [options ...] [VAR=VALUE] [targets ...]  環境変数はタスクから ENV 定数で参照できるので、コマンドオプションでてっとりばやく動作を切り替えたいときなんかは重宝するかもしれない。
というわけで、script.aculo.us の rake unittest で、対象ブラウザと対象ファイルを環境変数で指定できるようにしたパッチを送ってみた。</description>
    </item>
    
    <item>
      <title>script.aculo.us の InPlaceEditor で submitOnBlur だと Safari が落ちる</title>
      <link>http://ishikawa.github.io/2007/07/06/inplace-editor-with-submit-on-blur-enabled-crashes-safari/</link>
      <pubDate>Fri, 06 Jul 2007 10:57:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/07/06/inplace-editor-with-submit-on-blur-enabled-crashes-safari/</guid>
      <description>script.aculo.us の InPlaceEditor を試している。
設定でカスタマイズできる部分がけっこうある割に、必要なものがなかったりして（特にコールバック系）微妙に使いづらいんだが、Safari だと不意にクラッシュする、という問題もあったり。
色々調べてみると、どうやら submitOnBlur を設定して、フォーカスリング（テキストフィールドのフォーカス時に、フィールドの周囲に出る青い線）をクリックするとお亡くなりになるらしい。
まあ、普通に Safari のバグだと思うんだが、onblur の処理を適当に遅延させると大丈夫なようなので、ticket:3717 にパッチを送っておいた。</description>
    </item>
    
    <item>
      <title>Rails の便利メソッド h, html_escape は ERB:Util にあった</title>
      <link>http://ishikawa.github.io/2007/06/30/htmlescape-in-erb-util/</link>
      <pubDate>Sun, 01 Jul 2007 07:03:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/30/htmlescape-in-erb-util/</guid>
      <description>Ruby on Rails のテンプレートでしょっちゅうお世話になる h メソッド。
&amp;lt; や &amp;amp; といった、HTML にはそのまま書けない文字を実体参照に置き換えてくれるメソッドだが、これをコントローラーから使いたいときがある。たとえば、Ajax のレスポンスで ad-hoc に HTML 片を返してしまいたいときとか、けっこうあるんじゃないか。
しかし、そのままではコントローラーから使うことはできない。
def update render :text =&amp;gt; h(params[:value]) end  というか、そもそも API リファレンスにないんですけど&amp;hellip;。
ソースコードを調べてみて、やっと分かった。
どうやら、h メソッドは erb の ERB::Util モジュールで定義されているらしい。
actionpack-1.13.3 - lib/action_view/helpers/tag_helper.rb
module ActionView module Helpers #:nodoc: # Use these methods to generate HTML tags programmatically when you can&#39;t use # a Builder. By default, they output XHTML compliant tags. module TagHelper include ERB::Util .</description>
    </item>
    
    <item>
      <title>Safari の履歴検索がすごく便利です</title>
      <link>http://ishikawa.github.io/2007/06/26/safari-spotlighting-web-history/</link>
      <pubDate>Wed, 27 Jun 2007 08:06:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/26/safari-spotlighting-web-history/</guid>
      <description>上のスクリーンショット（クリックすると拡大した画像に飛びます）を見れば、一目瞭然。Safari は履歴も検索できる。
これで、「あー、あの Web ページ、はてブか何かで見たんだけど、どこだっけなー」なんて悩みともおさらばできます。て、普通にみんな使ってるんだろうか、この履歴検索。
検索窓が、普段意識しない場所（ブックマークウインドウの下側）にあるものだから、いまのいままで気づかなかったよ。</description>
    </item>
    
    <item>
      <title>Ruby の Time.parse で文字列を Time に変換するときのエラーチェック</title>
      <link>http://ishikawa.github.io/2007/06/21/error-checking-in-ruby-time-parsing/</link>
      <pubDate>Fri, 22 Jun 2007 04:52:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/21/error-checking-in-ruby-time-parsing/</guid>
      <description>Ruby では、文字列から Time オブジェクト への変換には、time ライブラリ によって拡張される Time.parse を使う。
require &amp;quot;time&amp;quot; Time.parse(&amp;quot;2007/6/21 19:23&amp;quot;) # =&amp;gt; Thu Jun 21 19:23:00 +0900 2007  Time.parse は内部的に ParseDate.parsedate を利用しているので、さまざまなフォーマットをサポートしており、それなりに便利だ。逆に、サポートされていないフォーマットの文字列を変換するときは、事前に正規表現で変換するなどの泥臭い作業になる。
Time.parse(&amp;quot;Sat Aug 28 21:45:09 1999&amp;quot;) # =&amp;gt; Sat Aug 28 21:45:09 +0900 1999 Time.parse(&amp;quot;08/28/1999&amp;quot;) # =&amp;gt; Sat Aug 28 00:00:00 +0900 1999  他にも問題がある。
変換対象の文字列が日付形式ではなかった場合は、当然 Time に変換できないわけだが、そういうときでもエラーを検知する仕組みがないのだ。
Time.parse(&amp;quot;Happy Hacking!&amp;quot;) # =&amp;gt; Thu Jun 21 19:33:12 +0900 2007  このように、明らかに日付ではない文字列を渡しても、例外が発生するでもなく、Time オブジェクトが返ってくる。
Time.parse のマニュアルによると、
 Time.parse(date, now=Time.</description>
    </item>
    
    <item>
      <title>Xcode で Subversion を利用するときのトラブルシューティング</title>
      <link>http://ishikawa.github.io/2007/06/19/xcode-subversion-troubleshooting/</link>
      <pubDate>Tue, 19 Jun 2007 09:44:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/19/xcode-subversion-troubleshooting/</guid>
      <description>Xcode の SCM 連携機能は、すくなくとも Eclipse なんかに比べると貧弱で、実作業ではコマンドラインで svn を使っている。
それでも一度は試しておきたい、と試してみたときの、あまり一般的ではないトラブルシューティングを覚え書き。
svn+ssh で 22 番以外のポートを使いたいとき これは別に Xcode に限った話じゃないけど、svn+ssh プロトコルで 22 番以外のポートを使う場合は、環境変数 SVN_SSH で ssh プログラムの引数に指定します。
export SVN_SSH=&amp;quot;ssh -p 12345&amp;quot;  環境変数を export したターミナルで、そのまま .xcodeproj を開けばいいです。
open ./Example.xcodeproj  それでも、パスフレーズ入力できないとき 上の方法で Xcode 起動して、SCM を有効にしても、パスフレーズの入力画面などがでず、Permission denied で怒られてしまうことがある &amp;hellip; というか、僕がまさにそれ。
このときは、SSHKeychain を使って、パスフレーズ入力を横取りすることで動くようになった。</description>
    </item>
    
    <item>
      <title>Xcode プロジェクトを Subversion 管理する</title>
      <link>http://ishikawa.github.io/2007/06/17/subversion-primer-for-xcode-projects/</link>
      <pubDate>Mon, 18 Jun 2007 03:35:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/17/subversion-primer-for-xcode-projects/</guid>
      <description>Apple の提供する開発環境 Xcode で作成したプロジェクトを Subversion 管理する手順。基本的に「Rails のプロジェクトを Subversion で管理する」の Xcode 版。
リポジトリの場所を決める まずは、リポジトリのルート URL を決めて、これを環境変数に設定しよう。以降はこの変数を使うことで、長々とした URL をタイプする手間が省ける。
% SVN_REPO=svn+ssh://svn.example.com/projects/Example  もちろん、実際の URL は自分で使うものに置き換えてほしい。
空のプロジェクトをコミットする ここで、いきなり Xcode を起動して新規プロジェクトをつくるのではなく、まずは、プロジェクトのディレクトリ・レイアウトを構成した、空のプロジェクトをコミットする。
Subversion 管理するプロジェクトのディレクトリ・レイアウトといえば、trunk branches tags が王道なので、これに合わせておくのがいいだろう。たとえ、開発者があなたひとりで、職場の数人しか使わないようなアプリケーションを開発しており、ブランチなんか作る予定がないのだとしても。
% mkdir tmp % cd tmp % mkdir trunk tags branches % svn import ./ ${SVN_REPO} -m &amp;quot;initial import&amp;quot; Adding trunk Adding branches Adding tags Committed revision 20.  コミットしたら、このディレクトリは必要ないので削除しても大丈夫だ。
% cd .. % rm -rf tmp  Xcode のプロジェクトにチェックアウト そうして、コミットした空のプロジェクトを Xocde のプロジェクト・ディレクトリにチェックアウトすれば、Subversion 管理された Xcode プロジェクトが出来上がる。この方法なら、すでに開発中のプロジェクトにも適用しやすい。</description>
    </item>
    
    <item>
      <title>.Mac の同期機能がすごく便利です</title>
      <link>http://ishikawa.github.io/2007/06/16/sync-different-mac-with-dotmac/</link>
      <pubDate>Sun, 17 Jun 2007 08:02:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/16/sync-different-mac-with-dotmac/</guid>
      <description>MacBook の電源を会社に置いて帰ってしまった。
電源は机の下に隠れているため、急いでいたり、考えごとをしていたりすると、すぐに忘れてしまうのだ。
自宅サーバの iBook G4 とは電源の種類が異なる（MacBook の電源は MagSafe コネクタ）ため、その電源を流用することはできない。しかたがないので、テレビ台の下の暗がりで働いていた自宅サーバの iBook G4 をひっぱりだして、作業用ノートパソコンになってもらった。
.Mac の同期機能を試してみる こういうときに面倒なのが、作業環境の構築。
なにはともあれ、ブラウザのブックマークを移さないといけない。オンラインブックマークサービスも使っているけど、毎日使うような URL はブラウザのブックマークに登録してあるから。
今回のケースでは、いつも使っている MacBook が手許にあるので、ふたつの Mac をローカルエリアで接続して、データを移せばいいし、たぶん、それが一番簡単 &amp;hellip; なのだが、せっかくなので .Mac の同期機能を試してみることにした。
興味本位と、@mac.com のアドレスほしさに購入した .Mac。こういうときにでも役立てないともったいないじゃないか。
システム環境設定で .Mac の同期を有効にする .Mac の同期機能を使うには、あらかじめ同期したい Mac で、この機能を有効にしておかなくちゃいけない。設定はシステム環境設定から行う。
システム環境設定にある「.Mac」をクリックして「同期」タブをクリック、ここで「.Mac と同期」チェックボックスを有効にして、その下のリストから同期したいものをチェックする。
すべての Mac で、この設定をして「いますぐ同期」ボタンをクリックすれば、同期が開始される。
同期するデータに他の Mac との食い違いがあった場合には、コンピューター、あるいは .Mac のものを置き換えるか、追加するか、といった選択ができるので、重要なデータを消してしまった、なんてことは起こりにくいだろう。
キーチェーンも同期できる ここまでだと普通のブックマーク共有で終わってしまうんだが、便利だなー、と思ったのはキーチェーンも同期できること。いろんなオンラインサービスのログイン情報なんかは、ほとんどキーチェーンで管理しているので、すくなくとも Web のブラウジングに関しては、Mac が変わっても困ることはなさそうだ。
それに、一時作業用の Mac でブックマークやパスワードを追加しても、いつもの Mac に反映できるってことか。ちょっと .Mac の価値が分かったかもしれない。</description>
    </item>
    
    <item>
      <title>JavaScript でコードを色づけしてくれるライブラリ google-code-prettify</title>
      <link>http://ishikawa.github.io/2007/06/15/google-code-prettify-syntax-highlighter-written-in-javascript/</link>
      <pubDate>Fri, 15 Jun 2007 09:08:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/15/google-code-prettify-syntax-highlighter-written-in-javascript/</guid>
      <description>Ruby のコードを色づけしてくれる Syntax を試しているうちに、このブログでもコードの色づけ（いわゆるシンタックス・ハイライト。はてなダイアリーのスーパー pre 記法みたいなやつね）をやってみたくなった。
誰でも普段は、エディタで色づけされたコードを見慣れてるわけで、やっぱり黒べったりは読みづらいといえば読みづらい。
JavaScript によるコード色づけ ただ、このブログは WordPress で動作している。
WordPress といえば、あれか &amp;hellip; PHP か。なので、Ruby の Syntax ライブラリは使えない。それに、そもそも Syntax は Ruby の字句解析ライブラリとしての用途に重きを置いているためか、デフォルトで対応している言語が少ない（Ruby と XML, YAML だけ）。そのへんの不満もある。
色々迷った末（五分くらい）、JavaScript によるコード色づけを試してみることにした（WordPress のプラグインはですね、種類が多すぎて比較する気にもなれませんでした）。
問題はどのライブラリを使うか。検索してみると、Google Code にいくつか見つかった。
 syntaxhighlighter google-code-prettify  syntaxhighlighter は対応言語は申し分ないのだが、ちょっとオーバースペック気味だ。行番号表示やクリップボードへのコピーとかは、とりあえずいらないだろう。
一方の google-code-prettify はシンプルでいい感じ。早速、試してみることにする。
google-code-prettify 使い方は README を読めば問題ないと思う。このブログでは prototype.js を使って、こんなふうに組み込んだ。
&amp;lt;script src=&amp;quot;http://metareal.org/javascripts/prototype.js&amp;quot; type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;http://metareal.org/javascripts/prettify.js&amp;quot; type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt; Event.observe(window, &#39;load&#39;, function() { prettyPrint(); }); &amp;lt;/script&amp;gt;  この通り、HTML も色づけしてくれる。HTML に埋め込んだ JavaScript も認識されてるのはすごいな。しかも、コード部分の指定は pre 要素か code 要素の class 属性に prettyprint を指定するだけ。シンプル。</description>
    </item>
    
    <item>
      <title>Ruby の拡張ライブラリ開発では RSTRING_PTR, RSTRING_LEN が 1.8.6 から使える</title>
      <link>http://ishikawa.github.io/2007/06/14/ruby-extension-struct-rstring-macros/</link>
      <pubDate>Thu, 14 Jun 2007 10:33:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/14/ruby-extension-struct-rstring-macros/</guid>
      <description>最近、Ruby の拡張ライブラリを書いている。
Ruby 1.9 からは Array や String の短いものが struct RObject の構造体に埋め込まれるようになった。そのため、struct RString が変更されており、struct RString の C 文字列や文字（バイト）数にアクセスする従来の直接的な方法、
char *p = RSTRING(s)-&amp;gt;ptr; long len = RSTRING(s)-&amp;gt;len;  は 1.9 の環境ではコンパイルできなくなっている。
では、どうするか、というと、1.9 からは RSTRING_PTR, RSTRING_LEN というマクロをかましてアクセスする。
char *p = RSTRING_PTR(s); long len = RSTRING_LEN(s);  実をいうと、1.9 向けの拡張ライブラリを書いてるわけではないので、ここからが本題。
この RSTRING_PTR, RSTRING_LEN、1.8.6 でも用意されていたりする。いまから、これらのマクロを使っておけば、1.9 への移行がすこしは楽になるかもしれない。
ruby.h
#define RSTRING_PTR(s) (RSTRING(s)-&amp;gt;ptr) #define RSTRING_LEN(s) (RSTRING(s)-&amp;gt;len)  しかし、このままだと問題が残る。
というのも、1.8.5 以前のバージョンでは、依然、これらのマクロが利用できないからだ。なので、以下のように、#ifndef ディレクティブを使って対応するようにしている。
#ifndef RSTRING_PTR # define RSTRING_PTR(s) (RSTRING(s)-&amp;gt;ptr) #endif #ifndef RSTRING_LEN # define RSTRING_LEN(s) (RSTRING(s)-&amp;gt;len) #endif  これで、1.</description>
    </item>
    
    <item>
      <title>アミール・Ｄ・アクゼル「相対論がもたらした時空の奇妙な幾何学―アインシュタインと膨張する宇宙」</title>
      <link>http://ishikawa.github.io/2007/06/12/%E7%9B%B8%E5%AF%BE%E8%AB%96%E3%81%8C%E3%82%82%E3%81%9F%E3%82%89%E3%81%97%E3%81%9F%E6%99%82%E7%A9%BA%E3%81%AE%E5%A5%87%E5%A6%99%E3%81%AA%E5%B9%BE%E4%BD%95%E5%AD%A6/</link>
      <pubDate>Tue, 12 Jun 2007 09:25:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/12/%E7%9B%B8%E5%AF%BE%E8%AB%96%E3%81%8C%E3%82%82%E3%81%9F%E3%82%89%E3%81%97%E3%81%9F%E6%99%82%E7%A9%BA%E3%81%AE%E5%A5%87%E5%A6%99%E3%81%AA%E5%B9%BE%E4%BD%95%E5%AD%A6/</guid>
      <description>相対性理論の本を何冊も読んでいる。とはいえアカデミックな専門書ではなく、どれも一般向けや科学雑誌の特集ばかり。そんな僕がもう一冊読んでみた。
「天才数学者たちが挑んだ最大の難問―フェルマーの最終定理が解けるまで」と同じ著者だと気づいたのは読みおわったあとのこと。資料をもとにドキュメンタリータッチで追うスタイルはたしかに似ている。
特殊相対性理論と一般相対性理論。特殊相対性理論から一般相対性理論に至る葛藤や重要性、そのへんがやっと腑に落ちた気がする。難をいえば、アインシュタインの人となりが見えてこないことか。むしろ周辺の人たちの方が活き活きと描かれている。「いままでにないアインシュタイン像」みたいなことが前書きにはあったので、そのへんは残念だった。
相対論がもたらした時空の奇妙な幾何学―アインシュタインと膨張する宇宙 (ハヤカワ文庫NF―“数理を愉しむ”シリーズ)</description>
    </item>
    
    <item>
      <title>&#34;Summer of &#39;69&#34; とか聴きながらブログをリニューアルしてみた</title>
      <link>http://ishikawa.github.io/2007/06/09/summer-of-2007/</link>
      <pubDate>Sun, 10 Jun 2007 03:58:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/06/09/summer-of-2007/</guid>
      <description>6 月。最近、暑くなりましたね。初夏。向暑。
暑くて、でも、じめじめしてて、何もやる気が起きないので、気分転換にブログを涼しげにしてみました。当初はリンクの色を爽やかに明るい水色、画像もいままでの苔の写真から色に合わせてペンギンにするだけのつもりだったのですが、やりだすと気になる部分がちょこちょこ出てきて、結局、手を入れた箇所は以下の通り。
 行間を広くした    いままでも広かったけど、更に広く line-height: 1.6 にした 「Lucky bag::blog: line-height の値には単位なしが良いとされる理由」を読んでからは単位を指定しないようにしている    タイトルを目立つようにした    素人臭い text-shadow は削除 フォントを大きく、はっきりした色に    コメント投稿欄など、英語だったものを日本語化 プロフィールと連絡先を明記  あと、「夏」といえば、懐かしかったので貼っておきますね。
http://www.youtube.com/watch?v=ZpucUihZ4HE</description>
    </item>
    
    <item>
      <title>Terminal で作業中のディレクトリを Finder で開く</title>
      <link>http://ishikawa.github.io/2007/05/31/open-current-directory-in-finder/</link>
      <pubDate>Thu, 31 May 2007 09:02:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/05/31/open-current-directory-in-finder/</guid>
      <description>Terminal で作業中のディレクトリを Finder で表示させたいときがある。そういうときは、
% open .  </description>
    </item>
    
    <item>
      <title>AirMac Extreme</title>
      <link>http://ishikawa.github.io/2007/05/27/meet-the-airmac-extreme/</link>
      <pubDate>Sun, 27 May 2007 10:22:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/05/27/meet-the-airmac-extreme/</guid>
      <description>家の無線 LAN を AirMac Express から AirMac Extreme に変えてみた。特にこれといった動機はなくて、単に新しいモノを試してみたかっただけなんだけど、AirTunes 機能がないのは参ったなあ。おかげで iPod Hi-Fi が宝の持ち腐れ。どうするかは考え中。
これのブログを動かしているサーバも無線でつないでいるので（LAN ケーブルだと邪魔）、しばらくのあいだ、サーバが停まったままだった。AirMac Extreme で無線 LAN をはじめるのは簡単なのだけど、NAT やらを設定するのが面倒臭かった次第。
しかし、通信範囲広いね。Skype で会話しながら実験してみたけど、家から出て 2 ブロック先くらいまでは行けた。</description>
    </item>
    
    <item>
      <title>歌野晶午「葉桜の季節に君を想うということ」</title>
      <link>http://ishikawa.github.io/2007/05/22/%E8%91%89%E6%A1%9C%E3%81%AE%E5%AD%A3%E7%AF%80%E3%81%AB%E5%90%9B%E3%82%92%E6%83%B3%E3%81%86%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8/</link>
      <pubDate>Tue, 22 May 2007 09:36:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/05/22/%E8%91%89%E6%A1%9C%E3%81%AE%E5%AD%A3%E7%AF%80%E3%81%AB%E5%90%9B%E3%82%92%E6%83%B3%E3%81%86%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8/</guid>
      <description>第 4 回（2004 年）本格ミステリ大賞も受賞した、すこしまえの話題作を文庫化を機に読んでみた。二日で読了。いいペース。
結末にはたしかに驚かされるのだが、そこまでの過程がけっこうツラい。盛り上がりがいまひとつ、会話も描写も拙い気がする。一度そう感じてしまうと、結末の意外性と「老人を騙す悪徳商法」の絡みも空回りしているように感じられ、これはもう損をしている。
佳作をコンスタントなペースで発表している著者なので、受賞に文句はないんだが「ROMMY - 越境者の夢」のような情熱と構築美のバランス感覚が懐かしくなる。歌野晶午って自分の中ではやっぱり、島田荘司の家に押しかけて酔いつぶれてるような、勢いあまったミステリ作家なんだよな。
まあ、好きな作家なので新作は買うし、機会があれば昔の作品も読み返そうと思った。
葉桜の季節に君を想うということ (文春文庫)</description>
    </item>
    
    <item>
      <title>FINAL FANTASY TACTICS 獅子戦争</title>
      <link>http://ishikawa.github.io/2007/05/17/final-fantasy-tactics/</link>
      <pubDate>Fri, 18 May 2007 08:51:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/05/17/final-fantasy-tactics/</guid>
      <description>PSP の「ファイナルファンタジータクティクス 獅子戦争」はじめました。
以前から PSP には興味があって、これを機に一緒に購入。毎日通勤電車で、ちょこちょこ飽きもせずにやってます。適度な戦略性と易しすぎないゲームバランスがちょうどいい感じ。
社会人になったら、めっきりゲームをしなくなったと思ってたけど、そうか、大人は通勤電車でするのね。
hReview by Takanori Ishikawa , 2007/05/17
 ファイナルファンタジータクティクス 獅子戦争 スクウェア・エニックス 2007-05-10</description>
    </item>
    
    <item>
      <title>光が</title>
      <link>http://ishikawa.github.io/2007/04/18/es-werde-light/</link>
      <pubDate>Wed, 18 Apr 2007 09:54:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/04/18/es-werde-light/</guid>
      <description>きた。今日から光回線だ。万歳。
ルータも変わったのでサーバにつながらなくなる。色々設定して一段落。
速度は体感的に変化なし。AirMac の限界を疑ったがケーブルでつないでも同じ。適当なサイトで測定してみると 50 Mbps 程度だった。ベストエフォート万歳。
しかし、重要なのはオプションでくっつけといたテレビの専門チャンネル。AXN で LOST シーズン 3 観るぞー。
とりあえずは、アニメ見るならアニマックスかな。</description>
    </item>
    
    <item>
      <title>Mac OS X では MoinMoin が UnboundLocalError で動かない</title>
      <link>http://ishikawa.github.io/2007/04/08/moinmoin-on-macosx-failed-unboundlocalerror/</link>
      <pubDate>Mon, 09 Apr 2007 02:52:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/04/08/moinmoin-on-macosx-failed-unboundlocalerror/</guid>
      <description>作業メモや備忘録を残しておくためのシステムがほしくて、MoinMoin を自宅サーバの Mac OS X にインストールした。
ブログだとやっぱり時系列で流れちゃうし、書き殴りのメモとかは公開しづらいしね。MoinMoin はページごとのパーミッションを制御できるなど、今回の用途にはぴったり。
ただし、バージョン 1.5.7 はそのままだと Mac OS X では動かなかった。
UnboundLocalError: local variable &#39;File&#39; referenced before assignment  こんなエラーが出てしまう。
ここに書かれている通り、util/filesys.py を修正すると動くようになった。</description>
    </item>
    
    <item>
      <title>java.awt.Image を BufferedImage や byte 配列に変換する方法</title>
      <link>http://ishikawa.github.io/2007/04/02/convert-awt-image-to-buffered-image-or-byte-array/</link>
      <pubDate>Tue, 03 Apr 2007 12:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/04/02/convert-awt-image-to-buffered-image-or-byte-array/</guid>
      <description>Java ImageIO で Flickr 並みのサムネイル画像をつくるという記事で、
 java.awt.Image を BufferedImage や byte 配列に変換する方法は次回。
 と書いたにも関わらず、そのまま放置になっていた（コメントで指摘されているのに気づいたのも今日だ。すまん）。
概要 まずは java.awt.image.BufferedImage を byte 配列に変換する方法を紹介する。
そのあと、java.awt.Image を java.awt.image.BufferedImage に変換する方法を紹介するので、このふたつを組み合わせれば、
Image --&amp;gt; BufferedImage --&amp;gt; byte[]  が実現できるわけだ。
BufferedImage を byte[] に変換する BufferedImage から byte 配列の変換は、javax.imageio.ImageWriter でわりかし素直に実装できる。
BufferedImage image = ...; ByteArrayOutputStream bytesOut = new ByteArrayOutputStream(); ImageWriter writer = ImageIOKit.getImageWritersByFormatName(formatName); ImageOutputStream stream = ImageIO.createImageOutputStream(bytesOut); try { writer.setOutput(stream); writer.write(image); stream.flush(); } finally { writer.dispose(); if (stream != null) try { stream.</description>
    </item>
    
    <item>
      <title>春よ、来い</title>
      <link>http://ishikawa.github.io/2007/04/02/hello-my-friend/</link>
      <pubDate>Mon, 02 Apr 2007 09:04:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/04/02/hello-my-friend/</guid>
      <description>友人と花見に行ってきた。
場所は上野。人、めっちゃ多い。
ただし、桜は見事。正直、東京の桜なんてたいしたことないだろ、とか思ってました。すみません。鎧伝サムライトルーパーを思い出すほどの桜でした。武装！！
そのあとは五臓六腑でもつ鍋をいただく。明日は仕事なので日本酒は自粛&amp;hellip;したのだが、酒の勢いあまって、ブログのアドレスを友人に教える、という、おそらく明日起きたら後悔するであろう行為をしでかした。
というわけで、ごちそうさまでした。また誘ってください。</description>
    </item>
    
    <item>
      <title>Google の検索履歴を記録する JavaScript を読んでみた</title>
      <link>http://ishikawa.github.io/2007/03/31/reading-google-search-history-javascript/</link>
      <pubDate>Sun, 01 Apr 2007 04:59:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/31/reading-google-search-history-javascript/</guid>
      <description>Google 検索履歴では、検索クエリーの履歴だけではなく、検索結果で実際にどのページをクリックしたか、も記録している。
検索結果ページのソースコードを読んでみると、履歴の保存は JavaScript で行われているようだ。
改行やインデントを加えて読みやすくしたソースコードを基に、履歴を保存する処理や興味深い部分を紹介する。
検索クエリーの保存 if (document.images) { new Image().src=&amp;quot;/url?sa=Q&amp;amp;client=safari&amp;amp;rls=ja-jp&amp;amp;q=...&amp;quot;; }  まずは冒頭。新しい Image を生成することで http://www.google.com/url/ にアクセスさせている。
URL から推測するに検索クエリーを保存しているのだろう。
クリックされたページの URL を保存 クリックされたページの URL を保存する処理は、各リンクの onmousedown に JavaScript を仕込むことで実現している。
&amp;lt;a href=&amp;quot;...&amp;quot; class=l onmousedown=&amp;quot;return asq(event,this,&#39;&#39;,&#39;&#39;,&#39;res&#39;,&#39;1&#39;,&#39;&amp;amp;amp;sig2=...&#39;)&amp;quot;&amp;gt;  リンクをクリックすると asq 関数が実行されたのち、ページに遷移する、というわけだ。
asq 関数の実装 では、asq 関数はどのような実装になっているのだろう。それなりに長いので些末な部分は削除したソースは以下の通り。
window.asq = function(d,a,f,g,k,l,m) { if (window.XMLHttpRequest) { var c = window.encodeURIComponent ? encodeURIComponent : escape; var h = &amp;quot;&amp;quot;, i = &amp;quot;&amp;quot;; var b = new XMLHttpRequest; var e = d.</description>
    </item>
    
    <item>
      <title>ruby 1.8.6 と fastthread</title>
      <link>http://ishikawa.github.io/2007/03/28/ruby-1-8-6-and-fastthread/</link>
      <pubDate>Thu, 29 Mar 2007 08:42:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/28/ruby-1-8-6-and-fastthread/</guid>
      <description>新しい MacBook に Mongrel をインストールした。
% sudo gem install mongrel  そうすると、依存関係にある fastthread という gem が気になってしかたない。
検索してみると、「Mongrelと依存関係のあるfastthreadって？」というそのものズバリの記事があって、そういや前にも読んだぞ、この記事、てへ、とか思っていると、どうやら ruby 1.8.6 には取り込まれているらしい。
知らなかったよ。というか、1.8.6 もまだ試してないよ。
ちなみに、ruby-dev での議論もあった。</description>
    </item>
    
    <item>
      <title>QuickSilver でスクリーンセイバーを起動</title>
      <link>http://ishikawa.github.io/2007/03/28/launch-screen-saver-from-quicksilver/</link>
      <pubDate>Thu, 29 Mar 2007 01:21:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/28/launch-screen-saver-from-quicksilver/</guid>
      <description>わたしは不器用なので、スクリーンセイバーをホットコーナーから起動しようとするたびに失敗する（スクリーンセイバーが起動したとたんに、微妙にマウスを動かしてしまって、起動が解除されてしまう）。
QuickSilver から起動できたら便利だなと思って、スクリーンセイバーを起動する AppleScript を書いて、~/Library/Scripts/ に置いてある。
tell application &amp;quot;Finder&amp;quot; open application file &amp;quot;/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app&amp;quot; as POSIX file end tell  ホットキーにも登録してみたが、いちいち QuickSilver を起動してタイプする方が性にあっているようだ。</description>
    </item>
    
    <item>
      <title>OpenCV 1.0.0 を Mac OS X 10.4 にインストール</title>
      <link>http://ishikawa.github.io/2007/03/27/opencv-on-mac-os-x-tiger/</link>
      <pubDate>Wed, 28 Mar 2007 01:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/27/opencv-on-mac-os-x-tiger/</guid>
      <description>物体認識もできる画像処理ライブラリ OpenCV 1.0.0 を Mac OS X 10.4 にてコンパイルしてみた。
OpenCV のインストール まずは、SourceForge から opencv-1.0.0.tar.gz をダウンロードして解凍。
% tar xvzf opencv-1.0.0.tar.gz % mkdir build % cd build/  libjpeg や libpng がないと JPEG, PNG 画像を扱えないので、DarwanPorts でいれたものを使うように configure
% ../configure CPPFLAGS=&amp;quot;-I/opt/local/include&amp;quot; LDFLAGS=&amp;quot;-L/opt/local/lib&amp;quot; % make  案の定、エラーがでる。
collect2: ld returned 1 exit status make[4]: *** [_cv.la] Error 1 make[3]: *** [all-recursive] Error 1 make[2]: *** [all-recursive] Error 1 make[1]: *** [all-recursive] Error 1 make: *** [all] Error 2  なんか、python のラッパー周辺が原因っぽいので外してコンパイル。</description>
    </item>
    
    <item>
      <title>The world *is* parallel - we are parallel.</title>
      <link>http://ishikawa.github.io/2007/03/26/the-world-is-parallel-we-are-are-parallel/</link>
      <pubDate>Tue, 27 Mar 2007 01:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/26/the-world-is-parallel-we-are-are-parallel/</guid>
      <description>本日の名言。
TenQuestionsWithJoeArmstrong - 並列プログラマに 10 の質問 - Joe Armstrong さんの場合の日本語訳から知ったのですが &amp;hellip;
まずは原文
 Michael: One of the most pressing issues presently appears to be that parallel programming is still harder and less productive than its sequential counterpart. Is there any way to change this in your opinion?
Joe: It’s not harder - it’s hard because the dominant model is locks, threads, shared memory - now that is hard. Pure message passing systems are easy to program and reason about.</description>
    </item>
    
    <item>
      <title>haXe が 1.12 で Flash Lite をサポート</title>
      <link>http://ishikawa.github.io/2007/03/23/haxe-1-12-with-flash-lite-support/</link>
      <pubDate>Sat, 24 Mar 2007 06:40:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/23/haxe-1-12-with-flash-lite-support/</guid>
      <description>ひさしぶりに haXe のサイトをチェックしてみると、バージョン 1.12 がリリースされている。
そして、更新履歴には気になる記述が。
 added flash lite support with -D flash_lite
 この flash lite support が具体的に何を指すのかは、いまいち不明。
メーリングリストの RES: [haXe] Flash Lite を読む限りでは、Flash Lite 2 向けのクラスやプロパティ（たとえば、ソフトキーの使用するための ExtendedKey.SOFT1 など）が追加される、ということのようだ。</description>
    </item>
    
    <item>
      <title>Criteria API で inner join する</title>
      <link>http://ishikawa.github.io/2007/03/19/hibernate-inner-join-using-criteria-api/</link>
      <pubDate>Tue, 20 Mar 2007 08:36:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/19/hibernate-inner-join-using-criteria-api/</guid>
      <description>毎回、Hibernate の使い方を Google で検索する羽目になるのだが、今日はその検索の過程で、偶々こんな記事を見つけた。
Hibernate Querying 102 : The Criteria API
Hibernate の Criteria API について網羅的に解説した記事。 実は、inner join も Criteria API で記述できることを知って驚いた。
いままで、
from Foo as foo inner join fetch foo.bar where foo.a = :a and foo.b between :x and :y order by foo.b desc  こんなふうに HQL で書いていた inner join も、
getSession() .createCriteria(Foo.class) .add(Expression.eq(&amp;quot;a&amp;quot;, a)) .add(Expression.between(&amp;quot;b&amp;quot;, x, y)) .addOrder(Order.desc(&amp;quot;b&amp;quot;)) .createCriteria(&amp;quot;bar&amp;quot;) .list();  Criteria API で書ける。
Criteria の便利さと保守のしやすさを知るたびに、独自 SQL 文法で書く気が失せるな。</description>
    </item>
    
    <item>
      <title>JSON はみんなが思ってるほど安全ではない</title>
      <link>http://ishikawa.github.io/2007/03/08/json-is-not-as-safe-as-people-think-it-is/</link>
      <pubDate>Thu, 08 Mar 2007 09:33:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/08/json-is-not-as-safe-as-people-think-it-is/</guid>
      <description>del.icio.us 経由で今日読んだ記事。
JSON is not as safe as people think it is - Joe Walker&amp;rsquo;s Blog http://getahead.org/blog/joe/2007/03/05/ json_is_not_as_safe_as_people_think_it_is.html
script による CSRF と JavaScript のハック的手法を組み合わせることで、たとえログイン必須にしている JSON データであっても盗まれるかもしれない、という話。
たとえば、
&amp;lt;script type=&#39;text/javascript&#39; src=&#39;http://example.com/jsonservice&#39;&amp;gt;&amp;lt;/script&amp;gt;  という script で JSON を読み込めたとする。
このままだと読み込んだ JSON のデータが評価されるだけで、どんなコードも実行されないのでそれほど問題にはならない （評価された JSON のデータはどんな変数にも代入されてないので参照できない）。
しかし、元記事に紹介されている方法で、たとえば Array のコンストラクタを再定義してやると、JSON が評価されるときに 任意のコード（どこかにデータを送信するなど）を実行できてしまう。</description>
    </item>
    
    <item>
      <title>空文字列で検索すると PostgreSQL のインデックスが効かない</title>
      <link>http://ishikawa.github.io/2007/02/19/query-with-empty-string-cause-full-table-scan/</link>
      <pubDate>Tue, 20 Feb 2007 03:53:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/02/19/query-with-empty-string-cause-full-table-scan/</guid>
      <description>きちんと調べたわけじゃないけど、PostgreSQL で空文字列で検索するとインデックスが効かない気がする。
具体的には、こういうやつ。
select * from table where column = &#39;&#39;;  table の column にインデックスがあっても、explain してみると Seq Scan になってしまう。
select * from table where column = &#39;hoge&#39;;  とかだと問題ない。Index Scan してくれる。
PostgreSQL が古い 7.4 系のせいかも。MySQL は調べてない。そもそも、空文字はインデックスに含めてない気もしてきた。
とりあえず、空文字の検索で結果がないのが分かってる場合は、クエリを実行せずに無条件で失敗させるのがよさそう。</description>
    </item>
    
    <item>
      <title>Java ImageIO で Flickr 並みのサムネイル画像をつくる</title>
      <link>http://ishikawa.github.io/2007/02/10/create-flickr-quality-thumbnail-with-java-imageio/</link>
      <pubDate>Sun, 11 Feb 2007 08:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/02/10/create-flickr-quality-thumbnail-with-java-imageio/</guid>
      <description>まあ、記事のタイトルがアレですけど&amp;hellip;
Java の Image I/O で画像の縮小を行う方法として、AffineTransformOp を利用する方法がある。
final double scale = 0.5; AffineTransformOp transformOp = new AffineTransformOp(AffineTransform.getScaleInstance(scale, scale), null); BufferedImage dest1 = new BufferedImage( (int)(originalImage.getWidth() * scale), (int)(originalImage.getHeight() * scale), originalImage.getType()); transformOp.filter(originalImage, dest1);  しかし、この方法だとジャギーが目立ってしまい、Flickr ほどキレイなサムネイルにはならない。
たとえば、Flickr で見つけたこの写真。Flickr のサムネイルはこんな感じだが、
AffineTransformOp を用いた方法だと、こうなってしまう。
で、どうするかというと、AWT の AreaAveragingScaleFilter を使うのがいいようだ。以下、API リファレンスより抜粋：
 最近接点アルゴリズムよりもなめらかな結果が得られる、簡単な領域平均化アルゴリズムを使用してイメージをスケーリングする ImageFilter クラスです。
 では、試してみる。
ImageFilter filter = new AreaAveragingScaleFilter(w, h); ImageProducer im = new FilteredImageSource(image.getSource(), filter); Image newImage = Toolkit.getDefaultToolkit().createImage(im);  フィルタした結果の java.</description>
    </item>
    
    <item>
      <title>今 市子「百鬼夜行抄」</title>
      <link>http://ishikawa.github.io/2007/02/10/hyakkiyakosyo/</link>
      <pubDate>Sun, 11 Feb 2007 04:33:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/02/10/hyakkiyakosyo/</guid>
      <description>以前から気になっていたのだが、ドラマ化を機に文庫版を買ってみた。
読後の印象は悪くない。というか、面白い。
妖怪モノでちょっと怖い系の話が多いのだが、どこかトボケた調子は「動物のお医者さん (1)」を彷彿とさせる。動物が妖怪になった感じか。ファミリーものであるところなんかも似てるな。
早速、二巻も購入してしまった。</description>
    </item>
    
    <item>
      <title>Google のリダイレクタ</title>
      <link>http://ishikawa.github.io/2007/02/07/google-redirector/</link>
      <pubDate>Thu, 08 Feb 2007 01:15:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/02/07/google-redirector/</guid>
      <description>社内の開発合宿行ったり、そこで風邪もらったりしているうちに、すっかりブログの更新から遠のいてしまった。ぼちぼち復活。
2ちゃんねるではリファラ隠しのために、いわゆる ttp リンクや http://ime.nu/ などのリダイレクタが利用されている。リダイレクタという名前は勝手に使ってるだけで、正式なものか分からないけど、URL の末尾やパラメータに別の URL を指定すると、その URL にリダイレクトしてくれるページのこと。
もっとも、http://ime.nu/ のように、あいだに警告ページを挟んでリンクを表示する（実際にはリダイレクトしない）ページもリダイレクタと呼んでいる。
Google にも、このリダイレクタがあるのを、今日はじめて知った。
http://www.google.com/url?sa=D&amp;amp;q=http://www.yahoo.co.jp/
上の例は http://www.yahoo.co.jp/ に飛ばすためのリンク。</description>
    </item>
    
    <item>
      <title>Markdown 記法でアンダースコアを複数含む変数名を書く方法</title>
      <link>http://ishikawa.github.io/2007/01/25/writing-underscores-named-variable-with-markdown/</link>
      <pubDate>Fri, 26 Jan 2007 07:32:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/25/writing-underscores-named-variable-with-markdown/</guid>
      <description>Markdown ではアンダースコアで囲むと強調になるので、アンダースコアでつなげるスタイルの変数がものすごく書きづらい。
mt&amp;amp;#x5f;convert&amp;amp;#x5f;breaks  数値参照を使って、こんなふうに書くしかないのかね。
更に、等幅フォントで強調にするには、HTML タグを使わないと駄目っぽい。
&amp;lt;code&amp;gt;&amp;lt;strong&amp;gt;mt&amp;amp;#x5f;convert&amp;amp;#x5f;breaks&amp;lt;/strong&amp;gt;&amp;lt;/code&amp;gt;  まあ、すでに Markdown じゃないわけだが。
（追記） yuin さんのコメントで気づいた。バッククォートで囲めば等幅フォントでそのまま出せるね。Markdown による記述と変換後の HTML で書くと、
`mt_convert_breaks\ ` --&amp;gt; &amp;lt;code&amp;gt;mt_convert_breaks&amp;lt;/code&amp;gt;  こうなるので大丈夫。
ただ、等幅フォントで強調もしようとすると大変になるみたい。
(1) `__\ mt_convert_breaks__` --&amp;gt; &amp;lt;code&amp;gt;__mt_convert_breaks__&amp;lt;/code&amp;gt; (2) __\ `mt_convert_breaks`__\ --&amp;gt; &amp;lt;strong&amp;gt;&amp;lt;code&amp;gt;hoge_foo_bar&amp;lt;/code&amp;gt;&amp;lt;/strong&amp;gt;   は上手くいってそうなんだが、このブログでは YUI の reset.css で oode{font-style:normal;font-weight:normal;} となっているため効果なし。  </description>
    </item>
    
    <item>
      <title>Movable Type の XML-RPC API による記事投稿メモ</title>
      <link>http://ishikawa.github.io/2007/01/25/movable-type-xml-rpc-api-memo/</link>
      <pubDate>Fri, 26 Jan 2007 07:04:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/25/movable-type-xml-rpc-api-memo/</guid>
      <description>Movable Type の XML-RPC API を調べていて、metaWeblog.newPost や metaWeblog.editPost に渡すパラメータについて気になったのでメモ。
記事の投稿内容を content 構造体パラメーターで指定するのだが、このパラメーターには Movable Type の独自実装として、たとえば「コメントを許可するかどうか」などを含めることができる。
しかし、これらのうち、いわゆるフラグ系（真偽値）の指定の仕方がちょっと変わっている。
 mt_allow_comments (int) 0 なら false、1 なら true mt_allow_pings (int) 0 なら false、1 なら true mt_convert_breaks (string) &amp;ldquo;0&amp;rdquo; または &amp;ldquo;none&amp;rdquo; で false、&amp;rdquo;1&amp;rdquo; または &amp;ldquo;convert_breaks&amp;rdquo; で true  mt_convert_breaks が string なのは、mt.supportedTextFilters で返ってきた値を使えるようにするためなんだろうな。たぶん。</description>
    </item>
    
    <item>
      <title>キャロル・オコンネル「魔術師の夜」（上）</title>
      <link>http://ishikawa.github.io/2007/01/17/shell-game-1/</link>
      <pubDate>Wed, 17 Jan 2007 10:41:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/17/shell-game-1/</guid>
      <description>マロリー・シリーズ第五作。
引っ越し前から放ったらかしになっていた本書を読みはじめて、一気に引きこまれてしまった。
前作までのマロリーは、ただの「クールなヒロイン」だった。幼いころの体験から性格がねじ曲がってるとか、根っからのコソドロとか、これまでにも散々そういった描写はあったわけだけど、あくまでストーリーを彩る脚色、オマケに留まっていたように思う。
しかし、今作の彼女は違う。
自分を信じてくれない上司や周囲の友人たちに敵意を剥き出しにしながら孤軍奮闘。マラカイという天才的奇術師、一枚も二枚も上手をいく相手に翻弄され、ときおり顔を見せる感情に戸惑い、揺れている。いままで冷静沈着だったマロリーの感情が、大きくぶれているからこそ印象深かったのかも。
しかし、今回は相棒のライカーに感情移入してしまった。そりゃ、心配で見ていられないよ。
魔術師の夜 上 (創元推理文庫)

務台 夏子 東京創元社 2005-12-27売り上げランキング : 430315**おすすめ平均 **翻弄される主人公キャシー・マロリー再登場Amazonで詳しく見る by G-Tools</description>
    </item>
    
    <item>
      <title>NSView の CGContextRef に ATSUI でテキストを描画する方法</title>
      <link>http://ishikawa.github.io/2007/01/14/rendering-unicode-text-into-cgcontextref-with-atsui/</link>
      <pubDate>Mon, 15 Jan 2007 02:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/14/rendering-unicode-text-into-cgcontextref-with-atsui/</guid>
      <description>Cocoa の NSView に Apple Type Services for Unicode Imaging (ATSUI) でテキストを描画する方法を紹介する。
ATSUI では描画に Quartz の CGContextRef を設定することができる。CGContextRef は NSGraphicsContext の graphicsPort で取得できるので、以下のようなコードで設定できる。
**CGContextRef context = [[NSGraphicsContext currentContext] graphicsPort];** ATSUAttributeTag tags[] = { kATSUCGContextTag }; ByteCount sizes[] = { sizeof(CGContextRef) }; ATSUAttributeValuePtr values[] = { **&amp;amp;context** }; ATSUSetLayoutControls(layout, 1, tags, sizes, values);  以下のコードでは、NSView の drawRect: で Hello, World を描画している。
- (void) drawRect : (NSRect) rect { NSString *s = @&amp;quot;Hello, World!</description>
    </item>
    
    <item>
      <title>Interface Builder の NSTextView で NSLayoutManager を置き換える</title>
      <link>http://ishikawa.github.io/2007/01/14/how-to-replace-layout-manager/</link>
      <pubDate>Sun, 14 Jan 2007 10:01:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/14/how-to-replace-layout-manager/</guid>
      <description>Cocoa の NSLayoutManager や NSTypesetter をサブクラス化したい場合、Apple のドキュメント &amp;ldquo;Assembling the Text System by Hand&amp;rdquo; にあるように、マニュアルで NSTextView を構築してもいいが面倒だ。それに、このままではスクロールビューでデコレートもされてないのでノーグッド。
どうせなら、Interface Builder で配置した NSTextView の NSLayoutManager を置き換えるのが手っ取り早いだろう。コードは以下のようになる。
- (void) awakeFromNib { _textStorage = [[NSTextStorage alloc] initWithString:@&amp;quot;Cocoa Programming Topics&amp;quot;]; NSLayoutManager *layoutManager = [[MyLayoutManager alloc] init]; [_textStorage addLayoutManager:layoutManager]; [layoutManager release]; ** NSTextContainer *textContainer = [_textView textContainer]; [layoutManager addTextContainer:textContainer]; [textContainer replaceLayoutManager:layoutManager]; **}  肝になるのは NSLayoutManager の addTextContainer: で元々の NSTextContainer を追加したあとに、NSTextContainer の replaceLayoutManager: を呼ぶこと。これで NSLayoutManager を置き換えられる。</description>
    </item>
    
    <item>
      <title>Redstone XML-RPC Library への不満</title>
      <link>http://ishikawa.github.io/2007/01/13/redstone-xml-rpc-library-no-thanks/</link>
      <pubDate>Sat, 13 Jan 2007 11:26:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/13/redstone-xml-rpc-library-no-thanks/</guid>
      <description>どうやら Java の XML-RPC ライブラリとは、あまり縁がないらしい。またもや、XML-RPC ライブラリへの愚痴エントリである。
Apache XML-RPC ライブラリの複雑さとドキュメントのすくなさ（いつまでホームページのロゴ画像がリンク切れなのだろう？）に辟易して、今度は Redstone というライブラリを試してみた。
Redstone の前身である Marquee というライブラリは developerWorks に紹介記事だって載っている由緒正しい（？）XML-RPC ライブラリだ。
最初は何も問題ないかのように思えた。すべてが順調で平和だった。API はシンプルで、ホームページの簡潔なチュートリアルも必要十分に思えた。
だが、決して小さくはない欠陥がいくつもあることがわかってきた（バージョンは 1.0.1）。
 contentType の指定が無視される。 エラー処理がいいかげん     の faultCode がハードコーディングされている。 そのエンコーディングも ISO-8859-1 でハードコーディング。日本語書けない。せめて UTF-8 にしてよ&amp;hellip;    Base64 のコードがバグっていて、複数行にエンコードされていると対応できない。 カスタマイズが困難。    API がシンプルで一見、拡張しやすく見えるが、実際には重要なポイントが private だったりしてサブクラス化しづらい。 たとえば、XmlRpcDispatcher を拡張しても、それを使っている XmlRpcServer に独自の XmlRpcDispatcher を設定する API がない（ので、結局、こいつもサブクラス化して、さらに、サブクラス化した XmlRpcServer を使う XmlRpcServlet を書いて &amp;hellip;）。 XmlRpcParser は XML-RPC の xml を解析できるが、肝心の結果は private になっているため、これ単体で使えない。   実は 3.</description>
    </item>
    
    <item>
      <title>Eclipse の Java プロジェクトを Subversion 管理するときの手順</title>
      <link>http://ishikawa.github.io/2007/01/11/subversion-primer-for-eclipse-java-projects/</link>
      <pubDate>Thu, 11 Jan 2007 09:40:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/11/subversion-primer-for-eclipse-java-projects/</guid>
      <description>Eclipse の Java プロジェクトを Subversion 管理するときの手順を、メモも兼ねて残しておこう。ちなみに、Eclipse での Subversion サポートに使っているのは Subclipse プラグイン。
以下の $REPO 変数はプロジェクトを作成する、Subversion レポジトリの URL とする（たとえば、svn+ssh://svn.metareal.org/path/to/repo/project/）。
% mkdir tmp % cd tmp % mkdir trunk branches tags % svn import -m &amp;quot;initial import&amp;quot; . $REPO % cd ../ % rm -rf tmp  Eclipse で新規 Java プロジェクトを作成する。
そして、新規作成されたプロジェクトのディレクトリに、Subversion レポジトリからチェックアウト。
% cd /path/to/workspace/project/ % svn co $REPO/trunk .  いつも使っているディレクトリレイアウトを作成して必要なものを svn add しておく。
% mkdir -p build/classes build/test-classes build/reports % mkdir -p docs/api % mkdir -p src/java src/test % svn add .</description>
    </item>
    
    <item>
      <title>mod_flv_streaming と Deep Tagging</title>
      <link>http://ishikawa.github.io/2007/01/09/mod-flv-streaming-and-deep-tagging/</link>
      <pubDate>Wed, 10 Jan 2007 03:20:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/09/mod-flv-streaming-and-deep-tagging/</guid>
      <description>lighttpd で Flash Video (.flv) をストリーミング配信 (2)の mod_flv_streaming って、開始フレームを指定するのに、URL のクエリー部分を使うわけだけど、これを mod_rewrite で Pretty URL にしてやれば、いわゆる Deep Tagging もいけそうね。
 Tagging 2.0: Deep Taggingというコンセプト 映像のある場面にコメントやタグをつけられる『Viddler』  </description>
    </item>
    
    <item>
      <title>「LOST」地上波放送開始</title>
      <link>http://ishikawa.github.io/2007/01/09/lost-on-tv-launched/</link>
      <pubDate>Tue, 09 Jan 2007 11:11:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/09/lost-on-tv-launched/</guid>
      <description>海外ドラマ「LOST」の地上波放送が TBS ではじまりました。
このドラマは昨年みた DVD で最も印象深かったもののひとつ。実際に放送をみながら、このエントリーを書いてますが、やっぱりこのオープニングは秀逸。インパクトもスピード感も抜群です。
シーズン 2 の DVD も期待大（実家に帰省したときは、AXN でシーズン 2 の一挙放送が途中で、中途半端にみてしまわないように我慢するのが大変だった）。</description>
    </item>
    
    <item>
      <title>lighttpd で Flash Video (.flv) をストリーミング配信 (2)</title>
      <link>http://ishikawa.github.io/2007/01/09/flash-video-streaming-with-lighttpd-take-2/</link>
      <pubDate>Tue, 09 Jan 2007 09:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/09/flash-video-streaming-with-lighttpd-take-2/</guid>
      <description>前回の記事「lighttpd で Flash Video (.flv) をストリーミング配信」で、とりあえずストリーミング配信できることは書いた。今回は Flash の動画配信について調査したまとめ。
How much? 一番気になっていたのは、あの馬鹿高い「フラッシュなんちゃらサーバ」を購入しないとあかんの？　というところでしたが、yuin さんがコメントしてくれた情報で解決しました。
結論からいえば、みんなの大好きな lighttpd でストリーミング配信ができる。
まあ、要するにタダだよ、と。
動画フォーマット まず、動画フォーマットは Flash Video (.flv) になる。 これについては、.mpeg や .mov からの変換ツールがごろごろあるはずなので詳細は割愛。
とりあえず、リンクだけ。
 FFmpeg .flv に変換。 FLVTool2 .flv を操作。メタデータ追加など。  Flash Player の事情 クライアント (Flash Player) 側では、NetConnection でサーバに接続する。そして、その接続から NetStream インスタンスを生成し、これを Video インスタンスに attachVideo() することで .flv の再生が可能になる。
var nc:NetConnection = new NetConnection(); nc.connect(null); // initialize var stream:NetStream = new NetStream(nc); var video:Video = new Video(300,300); .</description>
    </item>
    
    <item>
      <title>理想の &lt;title&gt; をもとめて</title>
      <link>http://ishikawa.github.io/2007/01/08/looking-for-loving-title-element/</link>
      <pubDate>Tue, 09 Jan 2007 07:28:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/08/looking-for-loving-title-element/</guid>
      <description>WordPress のインストール直後は  タグを出力するテンプレートは以下のようになっていた。
&amp;lt;title&amp;gt;&amp;lt;?php bloginfo(&#39;name&#39;); ?&amp;gt; &amp;lt;?php if ( is_single() ) { ?&amp;gt; &amp;amp;raquo; Blog Archive &amp;lt;?php } ?&amp;gt; &amp;lt;?php wp_title(); ?&amp;gt;&amp;lt;/title&amp;gt;  これだと記事のタイトルは「ブログ名 » Blog Archive » 記事タイトル」のようになる。これを「記事タイトル - ブログ名」にしたくて、
&amp;lt;title&amp;gt;&amp;lt;?php wp_title(&#39; &#39;); if (wp_title(&#39; &#39;, false)) echo &#39; - &#39;; bloginfo(&#39;name&#39;); ?&amp;gt;&amp;lt;/title&amp;gt;  というテンプレートをいままでは使っていた。
しかし、今日はじめて気づいたのだが、これだと「 記事タイトル - ブログ名」というふうに、タイトルの直前に余分なスペースが残ってしまう。
どうやら、wp_title() は区切り文字が空文字のときでも、周囲のスペースを挿入してしまうらしい。
しょうがないので、力技だが、出力前に trim() してみる。
&amp;lt;title&amp;gt;&amp;lt;?php echo trim(wp_title(&#39;&#39;, false)); if (wp_title(&#39;&#39;, false)) echo &#39; - &#39;; bloginfo(&#39;name&#39;); ?&amp;gt;&amp;lt;/title&amp;gt;  これでやっと「記事タイトル - ブログ名」にできた。</description>
    </item>
    
    <item>
      <title>Flash で動画をストリーミング再生</title>
      <link>http://ishikawa.github.io/2007/01/08/flash-video-streaming/</link>
      <pubDate>Tue, 09 Jan 2007 03:03:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/08/flash-video-streaming/</guid>
      <description>Flash で動画をストリーミング再生する方法について調査したときのメモ。
 Flash Player 6 以降 ストリーミング用のファイルは .flv .mpeg や .mov を .flv に変換して使う Flash MX や Flash Professional で変換 たぶん、フリーの変換ソフトが転がってると予想 配信 Flash Media Server 2 が必要？ プロトコルは RTMP (Real Time Messaging Protocol) オープンソースの Flash サーバ Red5 RTMP は Adobe (Macromedia) 独自のプロトコルで、仕様は公開されていない。 Red5 の人たちは頑張って解析しているようだ。Web サイトに仕様についての情報もある。  やっぱり配信部分がネックだなあ。Red5 は動画配信するだけにはオーバースペックな気がするし。。</description>
    </item>
    
    <item>
      <title>lighttpd で Flash Video (.flv) をストリーミング配信</title>
      <link>http://ishikawa.github.io/2007/01/09/flash-video-streaming-with-lighttpd/</link>
      <pubDate>Tue, 09 Jan 2007 02:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/09/flash-video-streaming-with-lighttpd/</guid>
      <description>以前の記事「Flash で動画をストリーミング再生」で yuin さんにコメントで教えてもらった情報：
 あと配信に関しては http://blog.kovyrin.net/2006/10/08/lighttpd-memcoder-flvtool-for-streaming/ http://blog.lighttpd.net/articles/2006/03/09/flv-streaming-with-lighttpd あたりはどうでしょう。
  Using Lighttpd, Mplayer/Mencoder and Flvtool2 to Implement Flash Video Streaming flv streaming with lighttpd The Flash Video Resource: &amp;lsquo;Streaming&amp;rsquo; flv video via PHP, take two  で、とりあえず、lighttpd で .flv のストリーミング配信に成功（yuin さん、ありがとう！）。プレイヤーやら .flv やらはこちらのをそのまま使っているです。
リンク先にも書いてあるように、擬似的なストリーミング配信（実際には、ただの HTTP によるダウンロード）なんだけど、普通に配信するぶんには困らないと思う。開始フレームを URL の start パラメータで指定するので、プレイヤー側の対応も必要、ってとこくらいかな。
今日はもう眠いので、詳しくはまた後日。</description>
    </item>
    
    <item>
      <title>サイトに置いてある PDF が XSS に利用される？</title>
      <link>http://ishikawa.github.io/2007/01/07/universal-xss-with-pdf-files/</link>
      <pubDate>Sun, 07 Jan 2007 09:45:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/07/universal-xss-with-pdf-files/</guid>
      <description>サイト上に PDF が置いてある場合、それを XSS に利用される可能性があるらしい。情報源は Universal XSS with PDF files: highly dangerous というブログ記事（元となった ML への投稿は [WEB SECURITY] Universal XSS with PDF files: highly dangerous）。
これは PDF ファイルへのリンクの末尾に JavaScript のコードを追加しておくことで、ユーザーがリンクをクリックしたときに、任意のコードを実行できる、というもの。Acrobat Reader のバージョン 7 以前と Firefox や IE の組み合わせで再現するようだ（念のため、Mac の Preview でも試してみたが、この問題は発生しなかった）。
Adobe は修正版の ver. 7 をリリース予定。</description>
    </item>
    
    <item>
      <title>Cocoa の Text System を勉強中</title>
      <link>http://ishikawa.github.io/2007/01/06/learning-cocoa-text-system/</link>
      <pubDate>Sun, 07 Jan 2007 04:13:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/06/learning-cocoa-text-system/</guid>
      <description>Mac OS X のフレームワークである Cocoa の Text System を調べるため、ドキュメントを漁り中。
そのなかで、Text System Overview: Typographical Features of the Cocoa Text System の画像 Figure 4 は、
Rendering Unicode Text With ATSUI: Text Measurements の Figure 1-4 を使うのが適切な気がする。前者だと、垂直方向の例がないので。
というか、Cocoa の Text System を理解するには ATSUI も勉強した方がいいのか？　うーん、大変そうだ。</description>
    </item>
    
    <item>
      <title>AppleScript で Markdown 記法のリンクを自動挿入 (2)</title>
      <link>http://ishikawa.github.io/2007/01/05/markdownized-autolink-with-applescript-2/</link>
      <pubDate>Sat, 06 Jan 2007 04:10:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/05/markdownized-autolink-with-applescript-2/</guid>
      <description>「AppleScript で Markdown 記法のリンクを自動挿入」のスクリプトを更に改良して、選択範囲がない場合は Web ページのタイトルをそのまま挿入するようにした。
tell first document of application &amp;quot;Safari&amp;quot; set pageTitle to name set pageURL to URL end tell tell first document of application &amp;quot;mi&amp;quot; set newText to selection as Unicode text if (count of newText) = 0 then set newText to pageTitle end if set selection to &amp;quot;[&amp;quot; &amp;amp; newText &amp;amp; &amp;quot;](&amp;quot; &amp;amp; pageURL &amp;amp; &amp;quot; \&amp;quot;&amp;quot; &amp;amp; pageTitle &amp;amp; &amp;quot;\&amp;quot;)&amp;quot; end tell  これでだいぶ楽になったな。</description>
    </item>
    
    <item>
      <title>Python と Ruby、デフォルト引数の評価の違い</title>
      <link>http://ishikawa.github.io/2007/01/04/python-and-ruby-evaluation-of-default-arguments/</link>
      <pubDate>Fri, 05 Jan 2007 03:52:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/04/python-and-ruby-evaluation-of-default-arguments/</guid>
      <description>Python のチュートリアルで勉強している。
その中の 4.7.1 Default Argument Values に、気になる記述があった。
 The default values are evaluated at the point of function definition in the defining scope
Important warning: The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes.
 つまり、Python における、関数のデフォルト引数は：
 関数が定義された時点で 最初の１回のみ評価される  というわけだ。
早速、チュートリアルにあるサンプルを python で実行してみる。
% python &amp;gt;&amp;gt;&amp;gt; def f(a, l=[]): .</description>
    </item>
    
    <item>
      <title>AppleScript で Markdown 記法のリンクを自動挿入</title>
      <link>http://ishikawa.github.io/2007/01/04/markdownized-autolink-with-applescript/</link>
      <pubDate>Fri, 05 Jan 2007 01:33:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/04/markdownized-autolink-with-applescript/</guid>
      <description>以前の記事「AppleScript で Web ページのタイトルをクリップボードにコピー」を改良して、Markdown 記法でのリンクを自動挿入するようにしてみた（エディタは mi に対応）。
tell first document of application &amp;quot;Safari&amp;quot; set pageTitle to name set pageURL to URL end tell first document of application &amp;quot;mi&amp;quot; set selection to &amp;quot;[&amp;quot; &amp;amp; selection &amp;amp; &amp;quot;](&amp;quot; &amp;amp; pageURL &amp;amp; &amp;quot; \&amp;quot;&amp;quot; &amp;amp; pageTitle &amp;amp; &amp;quot;\&amp;quot;)&amp;quot; end  まずは、このスクリプトを mi のツールとして登録。 あとはリンクを貼りたい文字列を選択して、このスクリプトを実行すれば、Safari で開いているページへのリンクが自動的に挿入される、という寸法。
たとえば「mi」という文字列を選択して、mi のページを Safari で開いている場合は、
[mi](http://www.mimikaki.net/ &amp;quot;mi&amp;quot;)  というリンクが自動挿入される。</description>
    </item>
    
    <item>
      <title>Weighted Categories で最後のタグの URL がおかしいのを修正する</title>
      <link>http://ishikawa.github.io/2007/01/02/fix-weighted-categories-url-problem/</link>
      <pubDate>Wed, 03 Jan 2007 12:48:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/02/fix-weighted-categories-url-problem/</guid>
      <description>前回書いた「タグクラウドのリンクがおかしい？」という問題は、やはり Weighted Categories のバグだった。
問題は WordPress の list_cats で得たカテゴリーのリスト (HTML) を、配列に変換する部分：
function weighted_categories($smallest=10, $largest=48, $unit=&amp;quot;pt&amp;quot;, $exclude=&#39;&#39;) { $cats = list_cats(1, &#39;all&#39;, &#39;name&#39;, &#39;asc&#39;, &#39;&#39;, 0, 0, 1, 1, 0, 1, 1, 0, 1, &#39;&#39;, &#39;&#39;, $exclude, 0); **$cats = explode(&amp;quot;\n&amp;quot;, $cats);** foreach ($cats as $cat) { ... }  強調部分で $cats には末尾に改行が含まれているため、変換後の配列の最後の要素は空白文字列になる。そのため、最後のタグの URL がおかしくなっていた。
つまり、末尾の空白を取り除いておけば、問題は解決する。
--- weighted_categories.php.origin 2007-01-02 15:27:48.000000000 +0900 +++ weighted_categories.php 2007-01-02 15:38:13.000000000 +0900 @@ -11,7 +11,7 @@ { $cats = list_cats(1, &#39;all&#39;, &#39;name&#39;, &#39;asc&#39;, &#39;&#39;, 0, 0, 1, 1, 0, 1, 1, 0, 1, &#39;&#39;, &#39;&#39;, $exclude, 0); - $cats = explode(&amp;quot;\n&amp;quot;, $cats); + $cats = explode(&amp;quot;\n&amp;quot;, **trim($cats)**); foreach ($cats as $cat) { eregi(&amp;quot;a href=\&amp;quot;(.</description>
    </item>
    
    <item>
      <title>AppleScript で Web ページのタイトルをクリップボードにコピー</title>
      <link>http://ishikawa.github.io/2007/01/02/copy-page-title-with-applescript/</link>
      <pubDate>Wed, 03 Jan 2007 12:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/02/copy-page-title-with-applescript/</guid>
      <description>Web ページのタイトルをブログに書くときに、毎回ソースを開いてコピーするのが面倒だった。なので、これを自動化する AppleScript を書いた。
tell application &amp;quot;Safari&amp;quot; set the clipboard to the name of front document **as Unicode text** end tell  このスクリプトを実行すると、Safari で開いている Web ページのタイトルがクリップボードにコピーされる。
強調部分がないとクリップボードにコピーされないし、ここが as text だと文字化けする。</description>
    </item>
    
    <item>
      <title>タグクラウドのリンクがおかしい？</title>
      <link>http://ishikawa.github.io/2007/01/02/tag-cloud-url-problem/</link>
      <pubDate>Wed, 03 Jan 2007 12:14:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/02/tag-cloud-url-problem/</guid>
      <description>このブログのサイドバーにあるタグクラウドの表示には、Weighted Categories という WordPress プラグインを使っているのですが、どうも xmlrpc というタグだけ URL がおかしい。
他のタグは絶対 URL なのに、こいつだけ
&amp;lt;a href=&amp;quot;xmlrpc&amp;quot; title=&amp;quot;3 entries&amp;quot; style=&amp;quot;font-size: 15.6px;&amp;quot;&amp;gt;xmlrpc&amp;lt;/a&amp;gt;  こんな感じで URL が間違っている。うーん、プラグインのバグなのかなあ。</description>
    </item>
    
    <item>
      <title>映画「きみに読む物語」</title>
      <link>http://ishikawa.github.io/2007/01/01/notebook/</link>
      <pubDate>Tue, 02 Jan 2007 12:08:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/01/notebook/</guid>
      <description>帰省中。年始の有線放送で「きみに読む物語」を観た。
こういうラブロマンス、普段はまず選択しない。今回はたまたま「ブルース・ブラザース」のあとにやっていたので、そのまま観てしまった、という次第（この映画は名作なので、当然オススメ）。
さて、「きみに読む物語」。思ったよりもいい映画だった。
劇中劇という、ミステリーでは使い古された手法。だが、王道。 そして、その劇——老人が読んで聞かせる物語も、よくある懐メロだったりするんですが、最後までキレイにまとめた点に好印象。
特に「物語」がおわってからラストまでの流れは、落ち着いた上品さがある。ちょっとしつこいくらいの余韻を残して、気持ちよく観れました。
あと&amp;hellip;、そうそう。若いころのヒロインのキレっぷりがよかった。
hReview by Takanori Ishikawa , 2007/01/01
 きみに読む物語 スタンダード・エディション ライアン・ゴズリング ニコラス・スパークス ニック・カサヴェテス ハピネット・ピクチャーズ 2006-10-27</description>
    </item>
    
    <item>
      <title>rotatelogs と時差</title>
      <link>http://ishikawa.github.io/2007/01/02/apache-rotatelogs-time-offset/</link>
      <pubDate>Tue, 02 Jan 2007 11:35:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/02/apache-rotatelogs-time-offset/</guid>
      <description>アクセスログのローテーションに使っているのは、Apache に付属している rotatelogs だ。わたしも多くの初心者と同じく、こいつにまつわる時差の問題に直面した。
これは、Apache のマニュアルに書かれている rotatelogs の設定例。
CustomLog &amp;quot;|/usr/local/apache/bin/rotatelogs /var/log/access_log 86400&amp;quot; common  しかし、このままだとログファイルに残されるアクセス時間が 9 時間ずれてしまう（日本の標準時間と比べて）。rotatelogs の第一引数に指定するローテーション秒数は UTC を基準にしているためだ。
UTC とのズレは第二引数に分で指定する。日本標準時間は UTC より 9 時間ずれているので、ここに 540 を指定すればよい。
CustomLog &amp;quot;|/usr/local/apache/bin/rotatelogs /var/log/access_log 86400 540 &amp;quot; common  </description>
    </item>
    
    <item>
      <title>Python 2.5 をインストール</title>
      <link>http://ishikawa.github.io/2007/01/01/install-python-25/</link>
      <pubDate>Tue, 02 Jan 2007 04:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/01/install-python-25/</guid>
      <description>冬休み。お勉強の一環として Python を考えている。
現時点の最新版は 2.5、一方、Mac OS X Tiger に標準インストールされているのは 2.3.2。 というわけでダウンロードページから Python 2.5 のソースコードをダウンロードして、インストール。
% curl -O http://www.python.org/ftp/python/2.5/Python-2.5.tgz % tar xvzf Python-2.5.tgz % cd Python-2.5 % ./configure % make % sudo make install  特に問題なくインストールできた。
% python -V Python 2.5  お約束通り、Hello, World で幕開け。
% python Python 2.5 (r25:51908, Jan 1 2007, 17:41:26) [GCC 4.0.1 (Apple Computer, Inc. build 5367)] on darwin Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.</description>
    </item>
    
    <item>
      <title>謹賀新年</title>
      <link>http://ishikawa.github.io/2007/01/01/a-happy-new-year-2007/</link>
      <pubDate>Mon, 01 Jan 2007 10:19:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/01/a-happy-new-year-2007/</guid>
      <description>九州の実家です。往きの飛行機で、2007 年はどんな年にしようか、なんて考えていたら、うつらうつら寝てしまいました。 あけましておめでとう。
ダウンタウンの番組と「DEATH NOTE」を観ながら、ぼけーっとインターネット。「DEATH NOTE」の映画もアニメも、ノートに書いた死の状況を淡々と読み上げるのはやめた方がいいと思う。つまらないので。
映画「DEATH NOTE」で面白い点といえば、藤原竜也の演技がエロい。これに限る。特に「チェックメイト&amp;hellip;」の発声とかエロすぎます。もうオヤジの域に達している。
まあ、そんな感じで 2007 年を迎えてしまったわけですが、今年の目標はとりあえず、このブログの更新をつづけることかな。それ以外はこれから考えます。</description>
    </item>
    
    <item>
      <title>ホームページをとりあえず設置</title>
      <link>http://ishikawa.github.io/2007/01/01/metareal-org-is-coming/</link>
      <pubDate>Mon, 01 Jan 2007 01:58:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/01/metareal-org-is-coming/</guid>
      <description>このブログは weblog.metareal.org で運営しているわけだけれども、いままで metareal.org は 404 Not Found のままだった。
さすがにこのままだと不味い、というか気持ち悪いので、metareal.org も用意した。デザインはちょっとまえに流行った Web 2.0 カラーで（もしかして、もう古い？）。</description>
    </item>
    
    <item>
      <title>グレッグ・イーガン「ひとりっ子」</title>
      <link>http://ishikawa.github.io/2006/12/30/singleton-and-other-stories/</link>
      <pubDate>Sun, 31 Dec 2006 03:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/30/singleton-and-other-stories/</guid>
      <description>前 2 作の短編集よりもアイデンティティ——この自分とは何者なのか——に焦点を合わせた作品群であるように感じられた。また、登場人物たちの「決断」が作品世界にこれほどの影響を及ぼす小説というのも珍しいだろう。執筆時期が近しいせいもあってか、第一長編「宇宙消失」を彷彿とさせる。
イーガン流の大風呂敷が好き、という人にはやはり「ルミナス」がおすすめ。数学好きな人ならきっと楽しめる、かどうかは、私自身が数学好きではないのでわからない。でも、楽しめた。
ところで、作中に気になる誤植を見つけたので紹介したい。文庫の初版で 343 ページ目：
 （前略）どの作家も飽きもせずに設定の前提を自明とするばかりで、背理法はもろちん、喜劇による実存主義的鎮痛剤といえるレベルにさえほど遠かった。
 もろちん&amp;hellip;。もろちん&amp;hellip;。
hReview by Takanori Ishikawa , 2006/12/30
 ひとりっ子 グレッグ イーガン Greg Egan 山岸 真 早川書房 2006-12</description>
    </item>
    
    <item>
      <title>SSL で自己証明書を使用している URL には open-uri でアクセスできない</title>
      <link>http://ishikawa.github.io/2006/12/29/open-uri-with-self-signed-certificate/</link>
      <pubDate>Fri, 29 Dec 2006 11:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/29/open-uri-with-self-signed-certificate/</guid>
      <description>Ruby の open-uri って、SSL で自己証明書を使用している URL には使えないのね。あっさり、certificate verify failed (OpenSSL::SSL::SSLError) とか OpenSSL で弾かれる。
「なんかオプションとかないのかね？」とリファレンスマニュアルを探してみるが、どうにもそれらしいものが見つからない。
ソースコードを読んでみると、やはり、検証方法は OpenSSL::SSL::VERIFY_PEER 固定のようだ。 open-uri.rb の 228 行目。
def OpenURI.open_http(buf, target, proxy, options) # :nodoc: ... http = klass.new(target_host, target_port) if target.class == URI::HTTPS require &#39;net/https&#39; http.use_ssl = true http.verify_mode = **OpenSSL::SSL::VERIFY_PEER** store = OpenSSL::X509::Store.new store.set_default_paths http.cert_store = store end ... end  そういえば、Java でも、Commons の HttpClient で同様の問題にぶち当たったことがある。あのときも、contrib の EasySSLProtocolSocketFactory を使う必要があったっけ。
もう、net/https を使うしかないのかな &amp;hellip;</description>
    </item>
    
    <item>
      <title>Mac OS X  Tiger に MySQL 5.0.27 をインストール</title>
      <link>http://ishikawa.github.io/2006/12/27/mysql-on-macosx-tiger/</link>
      <pubDate>Thu, 28 Dec 2006 12:54:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/27/mysql-on-macosx-tiger/</guid>
      <description>Ruby on Rails で開発するアプリケーションのバックエンドだが、データベースには MySQL を使用するつもりなので、これもインストールしてやる。
MySQL 5.0 のダウンロードページには、Mac OS X 向けのバイナリも配布されているので、通常はこちらを使うのがよさそうだ。
まあ、コンパイルも楽しいので、今回は自前でソースコードからインストールしてみる。
% curl --location &amp;quot;http://dev.mysql.com/get/Downloads/MySQL-5.0/mysql-5.0.27.tar.gz/from/http://mirror.mysql-partners-jp.biz/&amp;quot; &amp;gt; mysql-5.0.27.tar.gz % tar xvzf mysql-5.0.27.tar.gz % cd mysql-5.0.27  configure のオプションはマニュアルに載っていたものを参考にした。
CC=gcc CFLAGS=&amp;quot;-O3 -fno-omit-frame-pointer&amp;quot; CXX=gcc \ CXXFLAGS=&amp;quot;-O3 -fno-omit-frame-pointer -felide-constructors \ -fno-exceptions -fno-rtti&amp;quot; \ ./configure --prefix=/usr/local/mysql \ --with-extra-charsets=complex --enable-thread-safe-client \ --enable-local-infile --disable-shared  あとは、make, make install
% make % sudo make install  </description>
    </item>
    
    <item>
      <title>Mac OS X Tiger に Ruby on Rails をインストール</title>
      <link>http://ishikawa.github.io/2006/12/27/rubyonrails-on-macosx-tiger/</link>
      <pubDate>Thu, 28 Dec 2006 12:26:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/27/rubyonrails-on-macosx-tiger/</guid>
      <description>さて、次は Ruby on Rails のインストールだ。
RubyGems がインストール済みなら、これはもう簡単。
% sudo gem install rails --include-dependencies Bulk updating Gem source index for: http://gems.rubyforge.org Successfully installed rails-1.1.6 Successfully installed rake-0.7.1 ...  こんだけ。</description>
    </item>
    
    <item>
      <title>Mac OS X Tiger に RubyGems をインストール</title>
      <link>http://ishikawa.github.io/2006/12/27/rubygems-on-macosx-tiger/</link>
      <pubDate>Thu, 28 Dec 2006 12:02:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/27/rubygems-on-macosx-tiger/</guid>
      <description>Mac OS X Tiger 上に Ruby on Rails の開発環境を構築している。
Ruby on Rails は Ruby のパッケージ管理システムである RubyGems でインストールできるので、まずは RubyGems をインストールしてみよう。
RubyGems のマニュアルから &amp;ldquo;3. Installing RubyGems&amp;rdquo; の手順通りに進めていく。
RubyForge から最新版をダウンロード。現時点での最新版は 0.9.0 だったので、rubygems-0.9.0.tgz をダウンロードして展開。
% curl --location -O http://rubyforge.org/frs/download.php/11289/rubygems-0.9.0.tgz % tar xvzf rubygems-0.9.0.tgz  展開先のディレクトリに移動し、setup.rb を実行。
% cd rubygems-0.9.0 % sudo ruby setup.rb ... Successfully built RubyGem Name: sources Version: 0.0.1 File: sources-0.0.1.gem  これでインストールは完了。思ったより簡単だったな。。</description>
    </item>
    
    <item>
      <title>MySQL/Ruby の test.rb が失敗する理由と対策</title>
      <link>http://ishikawa.github.io/2006/12/28/reason-of-mysql-ruby-test-failure/</link>
      <pubDate>Thu, 28 Dec 2006 10:07:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/28/reason-of-mysql-ruby-test-failure/</guid>
      <description>前回書いた、MySQL/Ruby の test.rb が失敗する原因を調査する。
まずは、実行結果の出力を調べてみよう。 すべてのテストが失敗しているため長いので、最初のテスト結果のみ抜粋する。
% ruby ./test.rb localhost root newpass ... 1) Failure: test_connect(TC_Mysql) [./test.rb:39]: Exception raised: Class: &amp;lt;Mysql::Error&amp;gt; **Message: &amp;lt;&amp;quot;Access denied for user &#39;ishikawa&#39;@&#39;localhost&#39; (using password: NO)&amp;quot;&amp;gt;** ---Backtrace--- ./test.rb:39:in `connect&#39; ./test.rb:39:in `test_connect&#39; ./test.rb:39:in `test_connect&#39; ...  MySQL のエラーで &amp;ldquo;Access denied for user &amp;lsquo;ishikawa&amp;rsquo;@&amp;lsquo;localhost&amp;rsquo; (using password: NO)&amp;rdquo; と出力されているので、これは単なるアクセス制御の問題だ。
そして、test.rb のコマンドライン引数で root ユーザを指定しているにも関わらず、実際には ishikawa ユーザでアクセスしようとしている。
うまくいくわけがない。 コマンドライン引数による指定が無視されているわけだ。
何故、コマンドライン引数が無視されるのか コマンドライン引数が無視される原因を調べてみると、どうやら test.rb が使っている Test::Unit が悪さをしているらしい（Test::Unit は Ruby の標準添付ライブラリで、いわゆる xUnit ツールの Ruby 版である）。</description>
    </item>
    
    <item>
      <title>Mac OS X に MySQL/Ruby をインストール &#43; 高速化パッチ</title>
      <link>http://ishikawa.github.io/2006/12/27/mysql-bindings-on-macosx-tiger/</link>
      <pubDate>Thu, 28 Dec 2006 03:14:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/27/mysql-bindings-on-macosx-tiger/</guid>
      <description>長かった Ruby on Rails 環境構築シリーズもやっと終盤です。
Ruby から MySQL につなぐためのバインディングである MySQL/Ruby をインストールすれば、Ruby on Rails の開発環境構築は一段落。
なお、同様のバインディングである Ruby/MySQL もあり、こちらは Ruby で書かれているためコンパイルが不要。MySQL/Ruby とも、ほぼ互換性がある。ただ、今回はパフォーマンス優先でいきたいと思う。
さて、ダウンロードページから最新版をダウンロード。現時点では mysql-ruby-2.7.3.tar.gz が最新版のようだ。
% curl --location -O http://tmtm.org/downloads/mysql/ruby/mysql-ruby-2.7.3.tar.gz % tar xvzf mysql-ruby-2.7.3.tar.gz % cd mysql-ruby-2.7.3  さきほど「パフォーマンス優先」と書いたけど、RailsExpress.blog の人が MySQL/Ruby を 30% 高速にするパッチを公開している。記事を読んだときから試してみたかったので、これを機会に使ってみよう。
パッチをダウンロードして、MySQL/Ruby の展開先に置いたら、patch コマンドでパッチを適用する。
% curl -O http://railsexpress.de/downloads/mysql-ruby-2.7-less-string-copies-in-each-hash.diff % patch &amp;lt; mysql-ruby-2.7-less-string-copies-in-each-hash.diff patching file mysql.c.in Hunk #1 succeeded at 1009 (offset -1 lines). Hunk #2 succeeded at 1027 (offset -1 lines).</description>
    </item>
    
    <item>
      <title>MySQL をインストールしたあとの作業</title>
      <link>http://ishikawa.github.io/2006/12/27/mysql-post-installation/</link>
      <pubDate>Thu, 28 Dec 2006 02:49:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/27/mysql-post-installation/</guid>
      <description>初期化 MySQL のインストールが完了したら、マニュアル通り、インストール後の作業を進めていく。
mysql_install_db でデータ格納ディレクトリとアカウントを初期化する。
% cd /usr/local/mysql/ % sudo chown -R mysql:mysql /usr/local/mysql % sudo bin/mysql_install_db --user=mysql  データベースを起動。
% sudo bin/mysqld_safe --user=mysql &amp;amp;  いくつかのコマンドを実行して、動作を確認。
% bin/mysqladmin version % bin/mysqladmin variables % bin/mysqlshow  停止。
% sudo bin/mysqladmin -u root shutdown  アカウントの設定 インストール直後の MySQL には 2 つのアカウントが用意されている。
 root パスワードなし local host からの接続のみ許可 匿名アカウント パスワードなし local host からの接続のみ許可 test または test_ で始まる名前のデータベースへの権限  つまり、最初から用意されているアカウントには、いずれもパスワードが設定されていない。これはセキュリティ的によろしくないので、次のふたつを実行する。
 匿名アカウントの削除 root にパスワードを設定  MySQL を起動し、mysql -u root で接続。</description>
    </item>
    
    <item>
      <title>Mac OS X Tiger に Ruby をインストール</title>
      <link>http://ishikawa.github.io/2006/12/27/ruby-p12-on-macosx-tiger/</link>
      <pubDate>Thu, 28 Dec 2006 01:43:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/27/ruby-p12-on-macosx-tiger/</guid>
      <description>Mac OS X Tiger に標準にバンドルされている ruby は irb でヒストリー機能が利用できない、など使い勝手が悪い上、脆弱性も修正されていないバージョンなので、最新版をソースからインストールする。
なお、古いバージョンの Ruby に存在する脆弱性については以下を参照（最新版では修正済み）。
 CGIライブラリのDoS脆弱性について もう一つのCGIライブラリのDoS脆弱性について  まずは、脆弱性を修正するパッチを適用した最新版のソースコードをダウンロードして展開。
% curl --location -O ftp://ftp.ruby-lang.org/pub/ruby/ruby-1.8.5-p12.tar.gz % tar xvzf ruby-1.8.5-p12.tar.gz  あとは普通に configure, make。
% cd ruby-1.8.5-p12 % ./configure % make % sudo make install  </description>
    </item>
    
    <item>
      <title>Mac OS X  Tiger に Ruby on Rails の環境を構築する</title>
      <link>http://ishikawa.github.io/2006/12/27/rubyonrails-on-macosx-tiger-links/</link>
      <pubDate>Thu, 28 Dec 2006 01:32:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/27/rubyonrails-on-macosx-tiger-links/</guid>
      <description>Mac OS X Tiger (Intel) に Ruby on Rails によるアプリケーション開発環境を構築するための手順まとめ。
 Mac OS X Tiger に Ruby をインストール Mac OS X Tiger に RubyGems をインストール Mac OS X Tiger に Ruby on Rails をインストール Mac OS X Tiger に MySQL 5.0.27 をインストール MySQL をインストールしたあとの作業 Mac OS X に MySQL/Ruby をインストール + 高速化パッチ MySQL/Ruby の test.rb が失敗する理由と対策  </description>
    </item>
    
    <item>
      <title>haXe で FlashLite 開発ができる？</title>
      <link>http://ishikawa.github.io/2006/12/25/development-flashlite-contents-with-haxe/</link>
      <pubDate>Tue, 26 Dec 2006 06:14:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/25/development-flashlite-contents-with-haxe/</guid>
      <description>[haXe] What about Flash Lite?
Flash Lite 2 は Flash Player 7 と互換性があるので haXe で開発できる、とのこと。しかし、Flash Lite 1.x は Flash Player 4 相当のため難しい。</description>
    </item>
    
    <item>
      <title>クリスマスプレゼント</title>
      <link>http://ishikawa.github.io/2006/12/25/transformable-full-action-model-garland/</link>
      <pubDate>Tue, 26 Dec 2006 06:04:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/25/transformable-full-action-model-garland/</guid>
      <description>クリスマスプレゼントにやまとの「1/15　完全変形ガーランド」をもらいました。これ、ずっと気になっていたので嬉しいです。本当に変形する！

Transformable Full Action Model GARLAND
Originally uploaded by Takanori Ishikawa.</description>
    </item>
    
    <item>
      <title>Subversion を SWIG サポートつきでインストールする</title>
      <link>http://ishikawa.github.io/2006/12/24/install-subversion-with-swig-bindings/</link>
      <pubDate>Sun, 24 Dec 2006 12:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/24/install-subversion-with-swig-bindings/</guid>
      <description>SWIG によるスクリプト言語サポートつきで Subversion をインストールしたときのメモ。
必要なファイルは以下の通り。
 swig-1.3.31.tar.gz subversion-1.4.2.tar.bz2 subversion-deps-1.4.2.tar.bz2  まずは SWIG をインストールする。Ruby はシステム標準のものとは別に 1.8.5-p2 をインストールしていたので、configure でパスを指定してある。
% curl --location -O http://prdownloads.sourceforge.net/swig/swig-1.3.31.tar.gz % tar xvzf swig-1.3.31.tar.gz % cd swig-1.3.31 % ./configure --with-ruby=/usr/local/bin/ruby % make % sudo make install  Subversion は subversion-1.4.2.tar.bz2 と subversion-deps-1.4.2.tar.bz2 解凍すると、どちらも subversion-1.4.2 というディレクトリに展開されるので便利だ。
% curl -O http://subversion.tigris.org/downloads/subversion-1.4.2.tar.bz2 % curl -O http://subversion.tigris.org/downloads/subversion-deps-1.4.2.tar.bz2 % tar xvjf subversion-1.4.2.tar.bz2 % tar xvjf subversion-deps-1.4.2.tar.bz2  configure で、SWIG バインディングを有効にする言語と SWIG のパスを指定する。--enable-swig-bindings には perl や python のように個別指定も可能。</description>
    </item>
    
    <item>
      <title>熊の家族</title>
      <link>http://ishikawa.github.io/2006/12/22/relaxing-bear-family/</link>
      <pubDate>Sat, 23 Dec 2006 12:06:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/22/relaxing-bear-family/</guid>
      <description>いつのまにか家族になってる。

The Relaxing bear family
Originally uploaded by Takanori Ishikawa.</description>
    </item>
    
    <item>
      <title>Firefox の &lt;canvas&gt; 要素バグ</title>
      <link>http://ishikawa.github.io/2006/12/22/firefox-canvas-bug/</link>
      <pubDate>Sat, 23 Dec 2006 02:47:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/22/firefox-canvas-bug/</guid>
      <description>Firefox の &amp;lt;canvas&amp;gt; 要素で width, height 属性を指定せず、スタイルシートで width, height を指定すると、JavaScript での描画で座標がおかしくなる。Firefox 2.0.0.1 で確認。
width, height 属性を指定すれば大丈夫。</description>
    </item>
    
    <item>
      <title>最近分かったこと</title>
      <link>http://ishikawa.github.io/2006/12/21/some-things-that-i-realized/</link>
      <pubDate>Thu, 21 Dec 2006 10:12:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/21/some-things-that-i-realized/</guid>
      <description>今日やっと、Struts で、
 検証、適切なエラーメッセージ フォームビーンの生成スコープ トークン処理 キャンセル処理  が自信をもって書けるようになりました。
また、Action クラスでは finally を使って、トークンの保存と解除をすると、スッキリまとまるようです。
数日前は Hibernate の .hbm.xml について、プロパティの記述を今より簡潔にできることを知りました。 もう、varchar のサイズを指定するために、醜いネストと sql-type を使うことはありません。length 属性を指定しておけば、SchemaExport は適切な DDL スクリプトを生成してくれます。
いままで分からなかったことが分かるようになるのが、楽しいです。</description>
    </item>
    
    <item>
      <title>ViewVC のインストール</title>
      <link>http://ishikawa.github.io/2006/12/18/install-viewvc/</link>
      <pubDate>Tue, 19 Dec 2006 05:17:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/18/install-viewvc/</guid>
      <description>あとでブログに書こうと思って残しておいた ViewVC の設定メモ。今日、仕事中に思わず、ファイルを上書きしてしまった。
ネタはその日のうちに書いておけ、という教訓。
もっとも、インストールや設定自体は、ほぼ INSTALL ファイルの手順どおりでいけたので、ブログに書くまでもない気がする。気をつける部分といえば、セキュリティ的な理由から、Apache の DocumentRoot 以下にはインストールしないことくらいだろうか（INSTALL ファイルにも書いてあるけど）。
これだけじゃなんなので、httpd.conf も載せておく（パスなどは変えてある）。要点は：
 mod_python で動かしている 付属の .htaccess は使っていない /viewvc でアクセスできるように ScriptAlias を使う
LoadModule python_module modules/mod_python.so &amp;lt;VirtualHost *:80&amp;gt; ServerName svn.metareal.org DocumentRoot /sites/viewvc ScriptAlias /viewvc /sites/viewvc/viewvc.py &amp;lt;Directory &amp;quot;/sites/viewvc&amp;quot;&amp;gt; DirectoryIndex viewvc.py AddHandler python-program .py PythonHandler handler PythonDebug On AllowOverride None Order allow,deny Allow from all &amp;lt;/Directory&amp;gt; &amp;lt;/VirtualHost&amp;gt;   </description>
    </item>
    
    <item>
      <title>svn.metareal.org に ViewVC を導入</title>
      <link>http://ishikawa.github.io/2006/12/18/svn-metareal-org/</link>
      <pubDate>Mon, 18 Dec 2006 09:58:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/18/svn-metareal-org/</guid>
      <description>ここ数週間、サイトに Subversion へのインターフェースを追加しようとしていた。それは Apache に倣い svn.metareal.org として公開され、個人的プロジェクトのレポジトリとして機能するはずだった。公開に向けて、暇をみてはコンパイルとインストールを繰り返していた。
そして、待っていたのは挫折の連続だった。
まずは、Trac に挑戦してみた。これは流行っているし、仕事でも使っているので安心感がある（仕事では同僚がインストールしてくれたので、まさか、あれほど多くのライブラリが必要だとは夢にも思わなかったのだ）。
しかし、延々とつづく configure, make, make install がやっと終わったと思ったら、結局動かない。
mod_python にしようが、mod_fastcgi, mod_fcgi にしようが結果は同じ。それはとにかく動かないのだ（ちなみに、遭遇した問題は Ticket:2969 で報告されているものと同様だが、DarwinPort ではなく、すべてソースからコンパイルした）。
Trac は諦めて、SVN::Web を試してみる。SVN::Web を選んだ理由は単純で、見た目が Trac と同じだったから。見た目重要。
しかし、こいつも依存モジュールのいくつか（WWW::Mechanize と Template::Plugin::Clickable::Email）がインストールできずに断念。CPAN しか試してないけど、それ以上追求する根気がない。
なんだかんだで、最終的には ViewVC に落ち着いた（いや、インストールできたのがこれだけなんですけどね）。他にも色々設定しないといけないけど、今日はとりあえず公開だけしておしまい。
あー、疲れた。</description>
    </item>
    
    <item>
      <title>XML-RPC で &#34;Premature end of file.&#34;</title>
      <link>http://ishikawa.github.io/2006/12/13/xml-rpc-premature-end-of-file/</link>
      <pubDate>Wed, 13 Dec 2006 10:48:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/13/xml-rpc-premature-end-of-file/</guid>
      <description>Java で XML-RPC の開発をしている。
動作確認は UNIX コマンドの curl で手軽にすませているのだが、突然、すべての curl コマンドで Premature end of file. というエラーが出るようになった。
[Fatal Error] :-1:-1: Premature end of file.  このエラーには見覚えがある。たしか、XML の絡んだ通信で接続状態が悪くなり、通信が途絶えた場合などに ぼろぼろ出ていたやつだ。つまり、XML が不完全なのだろう。
しかし、curl の POST で送っているデータをいくら調べてもおかしい部分が見つからない。 問題になりがちな改行を取り除いても、コンソールのエンコーディングを変更しても同じ。
しかたがないので、デバッガでブレークポイントを設定し、動作を追ってみた。
その結果、リクエストオブジェクトの入力ストリームから読み出す時点でデータが空なことが判明。つまり、curl で POST したデータを読みだせていないわけだ。
では、何が原因でデータを読みだせていないんだろう？　curl の -v オプションの出力を眺めているうちに気がついた。
POST /api/xmlrpc HTTP/1.1 User-Agent: curl/7.13.1 (powerpc-apple-darwin8.0) libcurl/7.13.1 OpenSSL/0.9.7l zlib/1.2.3 Host: example.com Pragma: no-cache Accept: */* Content-Length: 123 Content-Type: **application/x-www-form-urlencoded**  application/x-www-form-urlencoded で POST しているせいだ。
Content-Type が application/x-www-form-urlencoded だと、HttpServletRequest がパラメータとして解析するために先に入力を読みだしてしまうので、HttpServletRequest#getInputStream() から読みだすときは空なわけだ。</description>
    </item>
    
    <item>
      <title>Java の軽量 XML パーサ</title>
      <link>http://ishikawa.github.io/2006/12/13/java-lightweight-xml-parser/</link>
      <pubDate>Wed, 13 Dec 2006 09:56:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/13/java-lightweight-xml-parser/</guid>
      <description>ユニットテストの実行に XML パーサが必要になった。
org.xml.sax.helpers.XMLReaderFactory.createXMLReader() を使っているので、SAX2 に準拠したパーサが必要だ。
また、ユニットテストのためだけに Xerces のような横綱級ライブラリを含めたくはない。パーサのライブラリは軽くなくてはいけない。
探してみると、条件に当てはまりそうなライブラリがふたつ見つかった。
 NanoXML Piccolo  .jar の容量だけでいえば NanoXML の圧勝。
SAX サポートを追加するための nanoxml-sax-2.2.3.jar を含めても、40KB に満たないコンパクトさだ（なお、NanoXML Lite というバージョンもあり、こちらは 6KB 以下）。ただ、残念なことに SAX 2 が実装されていないようだった。
他方、Piccolo では SAX2 が実装されているようなので、こちらを使うことにする。ドキュメントをよると、 開発に構文解析器 (JFlex)とコンパイラ・コンパイラ (BYACC/J) を用いているのがユニークな点らしい。
SAX パーサは java コマンドに -D オプションで指定するのが一般的だが、今回は System.setProperty で指定した。Piccolo の SAX2 パーサは com.bluecast.xml.Piccolo になる。
System.setProperty(&amp;quot;org.xml.sax.driver&amp;quot;, &amp;quot;com.bluecast.xml.Piccolo&amp;quot;); ...  これで無事、ユニットテストが動作した。</description>
    </item>
    
    <item>
      <title>Apache XML-RPC への不満</title>
      <link>http://ishikawa.github.io/2006/12/12/apache-xml-rpc-no-thanks/</link>
      <pubDate>Wed, 13 Dec 2006 03:06:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/12/apache-xml-rpc-no-thanks/</guid>
      <description>Apache Web Services Project の一環として開発されている Apache XML-RPC は Web に紹介記事も多く、もっとも利用されている印象を受ける。
実際、これまで仕事でも XML-RPC クライアントとして Apache XML-RPC を使用していた。他の選択肢を知らなかった、というのもあるが、Apache というブランドの影響も大きいと思う。
しかし、不満がないわけではない。
特に、クラス階層が複雑なのには手こずった。動作をカスタマイズしたいときなど、あるクラスがどのインターフェースを実装し、どのファクトリで生成されるかを調べるだけでも大変だ（RequestProcessorFactoryFactory インターフェースまでくると、もう冗談のように思えてくる）。
実例をあげよう。
RPC の結果として不正な XML が返ってきた場合のエラー処理。 たとえば、XML 宣言の前に PHP のエラーが出力されている、なんてことはざらにある（現実とはそういう世界なのだ）。こういうときでも、XML 宣言以降は正当な XML なので、できるだけ XML をパースして処理の結果を拾いたい。
そして、このリカバリ処理自体は難しくない。例外をキャッチして、結果の文字列を XML 宣言までスキップして、再度パースしてみるだけだ。
だが、結局、その処理をするためには、ダウンロードした Apache XML-RPC のソースコードから既存のクラスをコピーして別のクラスを作成する必要があった。どうしてだろう？　もしかすると、他にエレガントな解決方法があったのかもしれない。だが、発見できなかった。
そして、いま、サーバサイドの XML-RPC サービスを実装しているのだが、今度は出力エンコーディングを設定する方法が分からない。きっとどこかで、エレガントな解決方法が、発見されるのを待っているのだろう。</description>
    </item>
    
    <item>
      <title>ブログの XML-RPC サポート</title>
      <link>http://ishikawa.github.io/2006/12/11/weblog-xmlrpc-support/</link>
      <pubDate>Mon, 11 Dec 2006 08:21:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/11/weblog-xmlrpc-support/</guid>
      <description>個人的メモとして、各ブログの XML-RPC サポート状況をまとめてみた。
Movable Type は Blogger の API と、米 UserLand Software 社の MetaWeblog API に準拠しているようだ。また、WordPress も Movable Type に準ずるかたちになっている。
 Movable Type 3.3 マニュアル - XML-RPC API Movable Type で使える XML-RPC API MetaWeblog API  面白いのは Blogger。 現在は XML-RPC ではなく、 Google Data APIs (GData) による Blogger Data API を使用している。
Web ページのサイドバーには他にも &amp;ldquo;Calendar Data API&amp;rdquo; や &amp;ldquo;Spreadsheets Data API&amp;rdquo; など、Google の他サービスの名前が並んでいるので、GData はこれらのサービスでも実装されているのだろう。GData によるサービス同士の連携もあるのかもしれない。</description>
    </item>
    
    <item>
      <title>熊の記念撮影</title>
      <link>http://ishikawa.github.io/2006/12/09/relaxing-bear-knight/</link>
      <pubDate>Sun, 10 Dec 2006 06:22:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/09/relaxing-bear-knight/</guid>
      <description>職場の机にリラックマが乗りこんできました。

The Relaxing bear knight
Originally uploaded by Takanori Ishikawa.</description>
    </item>
    
    <item>
      <title>Apache XML-RPC のファイル名</title>
      <link>http://ishikawa.github.io/2006/12/09/apache-xmlrpc-filename/</link>
      <pubDate>Sun, 10 Dec 2006 01:04:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/09/apache-xmlrpc-filename/</guid>
      <description>Apache XML-RPC で 配布されている .jar は依存ライブラリを除くと 3 つあるのですが、
 xmlrpc-client-3.0.jar xmlrpc-common-3.0.jar xmlrpc-server-3.0.jar  ファイル名を Mac の Finder からエディタにコピペして気づいた。
xmlrpc-client-3.0.jar xmlrpc-common-3.0.jar xmlrpc-server-3.0.jar  すべて文字数が一緒なんです。</description>
    </item>
    
    <item>
      <title>サイドバーの Archives で日付表記を変更する</title>
      <link>http://ishikawa.github.io/2006/12/08/wordpress-archives-date-format/</link>
      <pubDate>Fri, 08 Dec 2006 09:30:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/12/08/wordpress-archives-date-format/</guid>
      <description>WordPress のサイドバーに表示されている「Archives」だが、日付の表記が「November 2006」のようになっている。私の推測では November が何月なのか、すぐにわかる人はすくないはずだ。できれば、ここはなんとかしたい。
管理画面の「Options」にあった「Date and Time」の設定を変更してみた。しかし、どこにも反映されている気配がないので（わざわざ PHP のドキュメントを読んだっていうのに&amp;hellip;）、ソースコードを調べることにする。
テンプレートを眺めてみると、wp_get_archives という PHP の関数を呼び出している。で、こいつは引数の解析だけやって、実際の処理は get_archives 関数が行う。
ファイルは wp-includes/template-functions-general.php の 300 行目あたり。
function get_archives($type=&#39;&#39;, $limit=&#39;&#39;, $format=&#39;html&#39;, $before = &#39;&#39;, $after = &#39;&#39;, $show_post_count = false) { ... if ( &#39;monthly&#39; == $type ) { ... if ( $show_post_count ) { **$text = sprintf(&#39;%s %d&#39;, $month[zeroise($arcresult-&amp;gt;month,2)], $arcresult-&amp;gt;year);** $after = &#39; (&#39;.$arcresult-&amp;gt;posts.&#39;)&#39; . $afterafter; } else { **$text = sprintf(&#39;%s %d&#39;, $month[zeroise($arcresult-&amp;gt;month,2)], $arcresult-&amp;gt;year);** } echo get_archives_link($url, $text, $format, $before, $after); } } } elseif ( &#39;daily&#39; == $type ) { .</description>
    </item>
    
    <item>
      <title>&#34;Hello, world!\n&#34;</title>
      <link>http://ishikawa.github.io/2006/11/21/hello-world/</link>
      <pubDate>Tue, 21 Nov 2006 12:45:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2006/11/21/hello-world/</guid>
      <description>大学生のころに、ボンダイブルーの IMac を買って 7 年あまり。 ついに自宅サーバに手を出してしまった。とりあえず、 WordPress でブログを開設してみる。</description>
    </item>
    
  </channel>
</rss>