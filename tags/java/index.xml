<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on METAREAL</title>
    <link>https://ishikawa.github.io/tags/java/</link>
    <description>Recent content in java on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Fri, 27 Jun 2008 03:41:00 +0900</lastBuildDate><atom:link href="https://ishikawa.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kilim で Java でもジェネレーター</title>
      <link>https://ishikawa.github.io/2008/06/26/java-generater-by-using-kilim/</link>
      <pubDate>Fri, 27 Jun 2008 03:41:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2008/06/26/java-generater-by-using-kilim/</guid>
      <description>Twitter と Erlang をきっかけに注目を集めるようになった軽量プロセス（とかマイクロスレッドとか）を Java で実現するためのライブラリに kilim があります。
 Isolation-typed actors for Java (PDF) InfoQ: Kilim - actors and message passing in Java  夜中に突然 Java が書きたくなって、まだ、Examples を動かしてみた程度ですが、とりあえず Python のジェネレーターっぽいことができるのは分かったので記事にしておきます。暇と知識が増えたら、もうすこし突っ込んだ記事もあげる予定です（自信がないので今回、ですます調）。
ジェネレーターの例 では、本当につまらない例です。フィボナッチ数を求めるプログラムをどうぞ。
import kilim.Generator; import kilim.pausable; public class Fib extends Generator&amp;lt;Integer&amp;gt; { public @pausable void execute() { // (1) int fib1 = 0; int fib2 = 1; while (true) { yield(fib1); // (2) fib2 = fib1 + fib2; fib1 = fib2 - fib1; } } public static void main(String[] args) { final Fib fib = new Fib(); for (int i = 0; i &amp;lt;= 10; i++) { System.</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 の JDBC ドライバをビルド</title>
      <link>https://ishikawa.github.io/2007/12/12/building-postgresql-7-4-jdbc-driver/</link>
      <pubDate>Wed, 12 Dec 2007 03:59:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/12/12/building-postgresql-7-4-jdbc-driver/</guid>
      <description>PostgreSQL 7.4.13 以降で起こる異なるエンコーディング間の変換エラーがいまだに尾を引いている。
悩んだ末、JDBC ドライバのソースコードを読むだけではなく、実際にビルドして動作を確認してみた方がいいだろう、ということになった。JDBC ドライバにパッチを当てて問題を回避することも視野に入れている。できれば、やりたくないけれど&amp;hellip;。
PostgreSQL 7.4 の JDBC ドライバをビルドするために必要な手順は、おおまかに分けると以下のようになる。
 CVS からソースコードを取得 build.properties を用意 ビルド  CVS からソースコードを取得 PostgreSQL JDBC ドライバの CVS リポジトリからバージョン 7.4 リリース時のタグを指定してソースコードを取得する。
cvs -d :pserver:anonymous@cvs.pgfoundry.org:/cvsroot/jdbc login cvs -z3 -d :pserver:anonymous@cvs.pgfoundry.org:/cvsroot/jdbc co **-r REL7_4_STABLE** -P pgjdbc  build.properties を用意 バージョン番号情報などを指定するための build.properties がないとビルドが失敗してしまう。 トップディレクトリに build.properties を作成し、以下のように書いておこう。
major=7 minor=4 fullversion=7.4.5 edition=JDBC3 def_pgport=5432 enable_debug=no connectclass=org.postgresql.jdbc3.Jdbc3Connection  major, minor, fullversion, edition は org.postgresql.Driver.getVersion() で使われる。
それ以外の変数には以下のような意味があるようだ。
 def_pgport デフォルトの接続ポート番号 enable_debug デバッグ情報つきでコンパイルする場合は yes connectclass java.</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4.13 以降、異なるエンコーディングでの変換エラー</title>
      <link>https://ishikawa.github.io/2007/12/10/postgresql-rejects-invalidly-encoded-multibyte-character/</link>
      <pubDate>Mon, 10 Dec 2007 09:54:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/12/10/postgresql-rejects-invalidly-encoded-multibyte-character/</guid>
      <description>PostgreSQL 7.4.18 で以下のようなエラーが出力されるようになった。
ERROR: 22P05: character 0xe28094 of encoding &amp;quot;UNICODE&amp;quot; has no equivalent in &amp;quot;EUC_JP&amp;quot;  PostgreSQL の JDBC ドライバはバックエンド (PostgreSQL) のバージョンが 7.3 以降の場合、接続時に必ず set client_encoding = &amp;quot;UNICODE&amp;quot; を発行する。
以下は org/postgresql/jdbc1/Attic/AbstractJdbc1Connection.java の 509 行目から抜粋。
if (haveMinimumServerVersion(&amp;quot;7.3&amp;quot;)) { BaseResultSet acRset = //TODO: if protocol V3 we can set the client encoding in startup execSQL(&amp;quot;set client_encoding = &#39;UNICODE&#39;&amp;quot;); //set encoding to be unicode encoding = Encoding.getEncoding(&amp;quot;UNICODE&amp;quot;, null); }  また、PostgreSQL 7.4.13 からは変換できないバイト列をすべてエラー扱いするようになった。</description>
    </item>
    
    <item>
      <title>Java で要素がひとつだけのコレクションをつくる</title>
      <link>https://ishikawa.github.io/2007/10/07/java-singleton-collection/</link>
      <pubDate>Sun, 07 Oct 2007 11:11:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/10/07/java-singleton-collection/</guid>
      <description>Java でときどき、要素がひとつだけのコレクションがほしくなるときがある。たとえば、利用しているライブラリのメソッドが引数としてコレクションを要求しているが、渡したいオブジェクトがひとつしかないとか。
こういう場合、コレクションの型が List だとすると、まず思いつくのは、新しく生成した ArrayList に要素をひとつだけ追加する方法だ。
List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(); list.add(&amp;quot;element&amp;quot;); doSomething(list);  だが、この方法は変換に一時変数が必要になり不格好だ。
Arrays.asList を使う方法 この変換は Arrays.asList を使うことで簡単にできる。
doSomething(Arrays.asList(new String[]{&amp;quot;element&amp;quot;}));  要素がひとつだけの配列をリストに変換する、と捉え直すわけだ。そして、Java 1.5 から Arrays.asList は配列ではなく可変長引数をとるようになったので、更に簡単に書ける。
doSomething(Arrays.asList(&amp;quot;element&amp;quot;));  Collectios.singleton 系メソッド Arrays.asList ではリスト以外のコレクションには変換できない上、要素がひとつだけのコレクションのために配列を用意しているため、まだまだメモリ的に非効率だ。
実は java.util.Collections にはこうした用途に使えるメソッドがすでに用意されている。
 singleton singletonList singletonMap  上記のメソッドはそれぞれ、渡されたオブジェクトを要素がひとつだけのコレクションに変換するメソッドだ。
Set&amp;lt;String&amp;gt; set = Collections.singleton(&amp;quot;element&amp;quot;); List&amp;lt;String&amp;gt; list = Collections.singletonList(&amp;quot;element&amp;quot;); Map&amp;lt;String, String&amp;gt; map = Collections.singletonMap(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;)  また、変換後のコレクションには、要素をインスタンス変数として直接もつ独自のコレクション・クラスを利用しているため、メモリ効率も一番良い。</description>
    </item>
    
    <item>
      <title>Java のプロジェクトで一番長いクラス名</title>
      <link>https://ishikawa.github.io/2007/09/18/longest-java-class-name/</link>
      <pubDate>Wed, 19 Sep 2007 07:38:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/09/18/longest-java-class-name/</guid>
      <description>ふと気になって書いてみた。
カレントディレクトリ以下の .java ファイルを、ファイル名の長さでソートするスクリプト。
% find . -name &amp;quot;*.java&amp;quot; -exec basename -s .java {} \; | ruby -ne &#39;$_.chomp!; puts &amp;quot;#{$_.size} #{$_}&amp;quot;&#39; | sort -n  JRuby だとこんな感じ。
3 Dir 3 Pwd 4 Glob 4 Iter 4 Java ... 30 DumpingInvocationMethodFactory 32 DumpingInvocationCallbackFactory 32 MultipleAssignmentReWriteVisitor 32 OSEnvironmentReaderFromApacheAnt 34 OSEnvironmentReaderFromRuntimeExec 40 OSEnvironmentReaderFromJava5SystemGetenv  左側の数字がファイル名の文字数だ。つまり、一番長いファイル名（クラス名）は OSEnvironmentReaderFromJava5SystemGetenv で 40 文字。
ちなみに、いま仕事で関わっているプロジェクトでは 37 文字が最長だった。負けた。</description>
    </item>
    
    <item>
      <title>Java 1.5 で追加された配列の便利メソッド</title>
      <link>https://ishikawa.github.io/2007/08/26/java-util-arrays-1-5/</link>
      <pubDate>Sun, 26 Aug 2007 09:55:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/08/26/java-util-arrays-1-5/</guid>
      <description>Java 1.5 (J2SE 5.0) では java.util.Arrays に、いくつかのメソッドが追加されている。地味ながらも、自前で書くのは面倒くさいものばかりだ。
hashCode, toString 配列そのものではなく、配列の各要素を比較する Arrays.equals は 1.5 以前からあったが、Java 1.5 では、同様に配列の各要素を使う
 Arrays.hashCode Arrays.toString  が用意された。
deepEquals, deepHashCode, deepToString Arrays.equals, Arrays.hashCode, Arrays.toString はどれも「浅い」処理しか行わないため、入れ子になった配列では期待通りに動作しない。Java 1.5 では、入れ子になった配列にも対応したバージョンが用意されている。
 Arrays.deepEquals Arrays.deepHashCode Arrays.deepToString  J2SE 6.0 更に Java 1.6 (J2SE 6.0) では範囲を指定できる二分探索や配列のコピー操作が追加されているようだ。</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 のインデックスと smallint と JDBC</title>
      <link>https://ishikawa.github.io/2007/08/02/postgresql-7-4-smallint-with-index-and-jdbc/</link>
      <pubDate>Fri, 03 Aug 2007 05:41:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/08/02/postgresql-7-4-smallint-with-index-and-jdbc/</guid>
      <description>PostgreSQL 7.4 のマニュアル「8.1.1. 整数データ型」には以下のような記述がある。
 注意: インデックスが付けられた smallint あるいは bigint の列がテーブルにある場合、システムがそのインデックスを使用しようとした時に問題を引き起こすことがあります。 例えば句が次のような形式の場合、
&amp;hellip; WHERE smallint_column = 42
システムはインデックスを使用しません。 なぜなら42という定数にシステムが integer を割り当てるからです。 今の所PostgreSQLは2つの異なるデータ型が混在している時には、インデックスを使うことができません。 問題を回避するには以下のように定数部分を単一引用符で括ります。
&amp;hellip; WHERE smallint_column = &amp;lsquo;42&amp;rsquo;
こうすると、システムは型分析を後廻しにしてこの定数に正しいデータ型を割り振ります。
 （なお、PostgreSQL 8.x のドキュメントからは該当する部分が削除されているので、バージョン 8 以降にはこの制限はないのかもしれない。未確認）
なんにせよ、PostgreSQL 7.4 では smallint のカラムを条件に含める場合は、 smallint_column = &#39;42&#39; と単一引用符で囲むか、smallint_column = 42::smallint みたいに型を指定しないと、インデックスが使われないらしい。
こういう些細な注意事項は忘れてしまうのが常なので、よほどサイズが重要でないかぎりは int を使うのが安全。どうしても smallint を使う場合は、ちゃんと SQL を explain してみて引用符で囲み、理由をコメントなりで書いておくようにするべきだろう。
ただ、問題は JDBC とかの抽象層をかます場合で、このときにどんな SQL が発行されるかを把握しておく必要がある。
PostgreSQL 側で、実際に発行されている SQL をログに記録して確認してみた。Java のコードと PostgreSQL のログに残されていた SQL ステートメントの両方を載せてある。</description>
    </item>
    
    <item>
      <title>Tomcat 5.5 の一部バージョンでは JavaMail の JNDI リソースが動かない</title>
      <link>https://ishikawa.github.io/2007/07/12/problem-with-tomcat-5-5-2x-and-jndi-javamail/</link>
      <pubDate>Fri, 13 Jul 2007 08:45:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/07/12/problem-with-tomcat-5-5-2x-and-jndi-javamail/</guid>
      <description>Tomcat のバージョンを 5.5.17 から 5.5.23 にあげたところ、次のような例外が発生するようになった。
javax.naming.NamingException: Could not create resource factory instance [Root exception is java.lang.ClassNotFoundException: org.apache.naming.factory.MailSessionFactory] at org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:132)  JNDI から JavaMail の javax.mail.Session を取り出すときに失敗しているようだ。
「MailSessionFactory が見つからないってことはまたクラスパス周りの問題かな、面倒くさいな&amp;hellip;」と思いきや、検索してみると、次のようなバグ報告が。
Bug 40668 - MailSessionFactory is missing in Tomcat 5.5.23 http://issues.apache.org/bugzilla/show_bug.cgi?id=40668
Tomcat 5.5.20 から現時点での最新バージョンである 5.5.23 では Tomcat 自体のビルドプロセスに問題があって（クラスパスに JavaMail が含まれていない？）、naming-factory.jar に JavaMail 関連のクラスがなくなっているらしい。
いまだに直ってない、ってのがすごいな。
この際、SMTP でメールを送信するくらいの用途なら、JNDI やめちゃうってのも手だと思う。JNDI のルックアップって非結合になっているようで、結局、新しい依存性を持ち込んでるだけ、というか、テストを考えると余計面倒だし。
Context context = new InitialContext(); Session session = (Session) context.lookup(&amp;quot;java:comp/env/mail/Session&amp;quot;);  これを
Properties props = new Properties(); props.</description>
    </item>
    
    <item>
      <title>java.awt.Image を BufferedImage や byte 配列に変換する方法</title>
      <link>https://ishikawa.github.io/2007/04/02/convert-awt-image-to-buffered-image-or-byte-array/</link>
      <pubDate>Tue, 03 Apr 2007 12:18:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/04/02/convert-awt-image-to-buffered-image-or-byte-array/</guid>
      <description>Java ImageIO で Flickr 並みのサムネイル画像をつくるという記事で、
 java.awt.Image を BufferedImage や byte 配列に変換する方法は次回。
 と書いたにも関わらず、そのまま放置になっていた（コメントで指摘されているのに気づいたのも今日だ。すまん）。
概要 まずは java.awt.image.BufferedImage を byte 配列に変換する方法を紹介する。
そのあと、java.awt.Image を java.awt.image.BufferedImage に変換する方法を紹介するので、このふたつを組み合わせれば、
Image --&amp;gt; BufferedImage --&amp;gt; byte[]  が実現できるわけだ。
BufferedImage を byte[] に変換する BufferedImage から byte 配列の変換は、javax.imageio.ImageWriter でわりかし素直に実装できる。
BufferedImage image = ...; ByteArrayOutputStream bytesOut = new ByteArrayOutputStream(); ImageWriter writer = ImageIOKit.getImageWritersByFormatName(formatName); ImageOutputStream stream = ImageIO.createImageOutputStream(bytesOut); try { writer.setOutput(stream); writer.write(image); stream.flush(); } finally { writer.dispose(); if (stream != null) try { stream.</description>
    </item>
    
    <item>
      <title>Criteria API で inner join する</title>
      <link>https://ishikawa.github.io/2007/03/19/hibernate-inner-join-using-criteria-api/</link>
      <pubDate>Tue, 20 Mar 2007 08:36:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/03/19/hibernate-inner-join-using-criteria-api/</guid>
      <description>毎回、Hibernate の使い方を Google で検索する羽目になるのだが、今日はその検索の過程で、偶々こんな記事を見つけた。
Hibernate Querying 102 : The Criteria API
Hibernate の Criteria API について網羅的に解説した記事。 実は、inner join も Criteria API で記述できることを知って驚いた。
いままで、
from Foo as foo inner join fetch foo.bar where foo.a = :a and foo.b between :x and :y order by foo.b desc  こんなふうに HQL で書いていた inner join も、
getSession() .createCriteria(Foo.class) .add(Expression.eq(&amp;quot;a&amp;quot;, a)) .add(Expression.between(&amp;quot;b&amp;quot;, x, y)) .addOrder(Order.desc(&amp;quot;b&amp;quot;)) .createCriteria(&amp;quot;bar&amp;quot;) .list();  Criteria API で書ける。
Criteria の便利さと保守のしやすさを知るたびに、独自 SQL 文法で書く気が失せるな。</description>
    </item>
    
    <item>
      <title>Java ImageIO で Flickr 並みのサムネイル画像をつくる</title>
      <link>https://ishikawa.github.io/2007/02/10/create-flickr-quality-thumbnail-with-java-imageio/</link>
      <pubDate>Sun, 11 Feb 2007 08:38:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/02/10/create-flickr-quality-thumbnail-with-java-imageio/</guid>
      <description>まあ、記事のタイトルがアレですけど&amp;hellip;
Java の Image I/O で画像の縮小を行う方法として、AffineTransformOp を利用する方法がある。
final double scale = 0.5; AffineTransformOp transformOp = new AffineTransformOp(AffineTransform.getScaleInstance(scale, scale), null); BufferedImage dest1 = new BufferedImage( (int)(originalImage.getWidth() * scale), (int)(originalImage.getHeight() * scale), originalImage.getType()); transformOp.filter(originalImage, dest1);  しかし、この方法だとジャギーが目立ってしまい、Flickr ほどキレイなサムネイルにはならない。
たとえば、Flickr で見つけたこの写真。Flickr のサムネイルはこんな感じだが、
AffineTransformOp を用いた方法だと、こうなってしまう。
で、どうするかというと、AWT の AreaAveragingScaleFilter を使うのがいいようだ。以下、API リファレンスより抜粋：
 最近接点アルゴリズムよりもなめらかな結果が得られる、簡単な領域平均化アルゴリズムを使用してイメージをスケーリングする ImageFilter クラスです。
 では、試してみる。
ImageFilter filter = new AreaAveragingScaleFilter(w, h); ImageProducer im = new FilteredImageSource(image.getSource(), filter); Image newImage = Toolkit.getDefaultToolkit().createImage(im);  フィルタした結果の java.</description>
    </item>
    
    <item>
      <title>Redstone XML-RPC Library への不満</title>
      <link>https://ishikawa.github.io/2007/01/13/redstone-xml-rpc-library-no-thanks/</link>
      <pubDate>Sat, 13 Jan 2007 11:26:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/01/13/redstone-xml-rpc-library-no-thanks/</guid>
      <description>どうやら Java の XML-RPC ライブラリとは、あまり縁がないらしい。またもや、XML-RPC ライブラリへの愚痴エントリである。
Apache XML-RPC ライブラリの複雑さとドキュメントのすくなさ（いつまでホームページのロゴ画像がリンク切れなのだろう？）に辟易して、今度は Redstone というライブラリを試してみた。
Redstone の前身である Marquee というライブラリは developerWorks に紹介記事だって載っている由緒正しい（？）XML-RPC ライブラリだ。
最初は何も問題ないかのように思えた。すべてが順調で平和だった。API はシンプルで、ホームページの簡潔なチュートリアルも必要十分に思えた。
だが、決して小さくはない欠陥がいくつもあることがわかってきた（バージョンは 1.0.1）。
 contentType の指定が無視される。 エラー処理がいいかげん    の faultCode がハードコーディングされている。 そのエンコーディングも ISO-8859-1 でハードコーディング。日本語書けない。せめて UTF-8 にしてよ&amp;hellip;    Base64 のコードがバグっていて、複数行にエンコードされていると対応できない。 カスタマイズが困難。    API がシンプルで一見、拡張しやすく見えるが、実際には重要なポイントが private だったりしてサブクラス化しづらい。 たとえば、XmlRpcDispatcher を拡張しても、それを使っている XmlRpcServer に独自の XmlRpcDispatcher を設定する API がない（ので、結局、こいつもサブクラス化して、さらに、サブクラス化した XmlRpcServer を使う XmlRpcServlet を書いて &amp;hellip;）。 XmlRpcParser は XML-RPC の xml を解析できるが、肝心の結果は private になっているため、これ単体で使えない。   実は 3.</description>
    </item>
    
    <item>
      <title>Eclipse の Java プロジェクトを Subversion 管理するときの手順</title>
      <link>https://ishikawa.github.io/2007/01/11/subversion-primer-for-eclipse-java-projects/</link>
      <pubDate>Thu, 11 Jan 2007 09:40:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/01/11/subversion-primer-for-eclipse-java-projects/</guid>
      <description>Eclipse の Java プロジェクトを Subversion 管理するときの手順を、メモも兼ねて残しておこう。ちなみに、Eclipse での Subversion サポートに使っているのは Subclipse プラグイン。
以下の $REPO 変数はプロジェクトを作成する、Subversion レポジトリの URL とする（たとえば、svn+ssh://svn.metareal.org/path/to/repo/project/）。
% mkdir tmp % cd tmp % mkdir trunk branches tags % svn import -m &amp;quot;initial import&amp;quot; . $REPO % cd ../ % rm -rf tmp  Eclipse で新規 Java プロジェクトを作成する。
そして、新規作成されたプロジェクトのディレクトリに、Subversion レポジトリからチェックアウト。
% cd /path/to/workspace/project/ % svn co $REPO/trunk .  いつも使っているディレクトリレイアウトを作成して必要なものを svn add しておく。
% mkdir -p build/classes build/test-classes build/reports % mkdir -p docs/api % mkdir -p src/java src/test % svn add .</description>
    </item>
    
    <item>
      <title>XML-RPC で &#34;Premature end of file.&#34;</title>
      <link>https://ishikawa.github.io/2006/12/13/xml-rpc-premature-end-of-file/</link>
      <pubDate>Wed, 13 Dec 2006 10:48:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2006/12/13/xml-rpc-premature-end-of-file/</guid>
      <description>Java で XML-RPC の開発をしている。
動作確認は UNIX コマンドの curl で手軽にすませているのだが、突然、すべての curl コマンドで Premature end of file. というエラーが出るようになった。
[Fatal Error] :-1:-1: Premature end of file.  このエラーには見覚えがある。たしか、XML の絡んだ通信で接続状態が悪くなり、通信が途絶えた場合などに ぼろぼろ出ていたやつだ。つまり、XML が不完全なのだろう。
しかし、curl の POST で送っているデータをいくら調べてもおかしい部分が見つからない。 問題になりがちな改行を取り除いても、コンソールのエンコーディングを変更しても同じ。
しかたがないので、デバッガでブレークポイントを設定し、動作を追ってみた。
その結果、リクエストオブジェクトの入力ストリームから読み出す時点でデータが空なことが判明。つまり、curl で POST したデータを読みだせていないわけだ。
では、何が原因でデータを読みだせていないんだろう？　curl の -v オプションの出力を眺めているうちに気がついた。
POST /api/xmlrpc HTTP/1.1 User-Agent: curl/7.13.1 (powerpc-apple-darwin8.0) libcurl/7.13.1 OpenSSL/0.9.7l zlib/1.2.3 Host: example.com Pragma: no-cache Accept: */* Content-Length: 123 Content-Type: **application/x-www-form-urlencoded**  application/x-www-form-urlencoded で POST しているせいだ。
Content-Type が application/x-www-form-urlencoded だと、HttpServletRequest がパラメータとして解析するために先に入力を読みだしてしまうので、HttpServletRequest#getInputStream() から読みだすときは空なわけだ。</description>
    </item>
    
    <item>
      <title>Java の軽量 XML パーサ</title>
      <link>https://ishikawa.github.io/2006/12/13/java-lightweight-xml-parser/</link>
      <pubDate>Wed, 13 Dec 2006 09:56:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2006/12/13/java-lightweight-xml-parser/</guid>
      <description>ユニットテストの実行に XML パーサが必要になった。
org.xml.sax.helpers.XMLReaderFactory.createXMLReader() を使っているので、SAX2 に準拠したパーサが必要だ。
また、ユニットテストのためだけに Xerces のような横綱級ライブラリを含めたくはない。パーサのライブラリは軽くなくてはいけない。
探してみると、条件に当てはまりそうなライブラリがふたつ見つかった。
 NanoXML Piccolo  .jar の容量だけでいえば NanoXML の圧勝。
SAX サポートを追加するための nanoxml-sax-2.2.3.jar を含めても、40KB に満たないコンパクトさだ（なお、NanoXML Lite というバージョンもあり、こちらは 6KB 以下）。ただ、残念なことに SAX 2 が実装されていないようだった。
他方、Piccolo では SAX2 が実装されているようなので、こちらを使うことにする。ドキュメントをよると、 開発に構文解析器 (JFlex)とコンパイラ・コンパイラ (BYACC/J) を用いているのがユニークな点らしい。
SAX パーサは java コマンドに -D オプションで指定するのが一般的だが、今回は System.setProperty で指定した。Piccolo の SAX2 パーサは com.bluecast.xml.Piccolo になる。
System.setProperty(&amp;quot;org.xml.sax.driver&amp;quot;, &amp;quot;com.bluecast.xml.Piccolo&amp;quot;); ...  これで無事、ユニットテストが動作した。</description>
    </item>
    
    <item>
      <title>Apache XML-RPC への不満</title>
      <link>https://ishikawa.github.io/2006/12/12/apache-xml-rpc-no-thanks/</link>
      <pubDate>Wed, 13 Dec 2006 03:06:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2006/12/12/apache-xml-rpc-no-thanks/</guid>
      <description>Apache Web Services Project の一環として開発されている Apache XML-RPC は Web に紹介記事も多く、もっとも利用されている印象を受ける。
実際、これまで仕事でも XML-RPC クライアントとして Apache XML-RPC を使用していた。他の選択肢を知らなかった、というのもあるが、Apache というブランドの影響も大きいと思う。
しかし、不満がないわけではない。
特に、クラス階層が複雑なのには手こずった。動作をカスタマイズしたいときなど、あるクラスがどのインターフェースを実装し、どのファクトリで生成されるかを調べるだけでも大変だ（RequestProcessorFactoryFactory インターフェースまでくると、もう冗談のように思えてくる）。
実例をあげよう。
RPC の結果として不正な XML が返ってきた場合のエラー処理。 たとえば、XML 宣言の前に PHP のエラーが出力されている、なんてことはざらにある（現実とはそういう世界なのだ）。こういうときでも、XML 宣言以降は正当な XML なので、できるだけ XML をパースして処理の結果を拾いたい。
そして、このリカバリ処理自体は難しくない。例外をキャッチして、結果の文字列を XML 宣言までスキップして、再度パースしてみるだけだ。
だが、結局、その処理をするためには、ダウンロードした Apache XML-RPC のソースコードから既存のクラスをコピーして別のクラスを作成する必要があった。どうしてだろう？　もしかすると、他にエレガントな解決方法があったのかもしれない。だが、発見できなかった。
そして、いま、サーバサイドの XML-RPC サービスを実装しているのだが、今度は出力エンコーディングを設定する方法が分からない。きっとどこかで、エレガントな解決方法が、発見されるのを待っているのだろう。</description>
    </item>
    
    <item>
      <title>Apache XML-RPC のファイル名</title>
      <link>https://ishikawa.github.io/2006/12/09/apache-xmlrpc-filename/</link>
      <pubDate>Sun, 10 Dec 2006 01:04:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2006/12/09/apache-xmlrpc-filename/</guid>
      <description>Apache XML-RPC で 配布されている .jar は依存ライブラリを除くと 3 つあるのですが、
 xmlrpc-client-3.0.jar xmlrpc-common-3.0.jar xmlrpc-server-3.0.jar  ファイル名を Mac の Finder からエディタにコピペして気づいた。
xmlrpc-client-3.0.jar xmlrpc-common-3.0.jar xmlrpc-server-3.0.jar  すべて文字数が一緒なんです。</description>
    </item>
    
  </channel>
</rss>
