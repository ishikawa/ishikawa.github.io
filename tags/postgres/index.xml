<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>postgres on METAREAL</title>
    <link>https://metareal.blog/tags/postgres/</link>
    <description>Recent content in postgres on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Wed, 19 Dec 2007 07:18:00 +0900</lastBuildDate><atom:link href="https://metareal.blog/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PostgreSQL で使われていないインデックスを調べる</title>
      <link>https://metareal.blog/2007/12/18/postgresql-looking-for-unused-indexes/</link>
      <pubDate>Wed, 19 Dec 2007 07:18:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/12/18/postgresql-looking-for-unused-indexes/</guid>
      <description>PostgreSQL で使われていないインデックスを調べる方法について。いつも忘れるのでこちらにも書く。
統計情報の収集 まずは、インデックスの使用状況を統計情報として残すよう、PostgreSQL の設定ファイル postgresql.conf で以下の変数を true にする。
 stats_start_collector stats_row_level  各々の詳細についてはリンク先の PostgreSQL ドキュメントを参照してほしい。
統計情報ビュー 収集した統計情報の表示のために多くのビューが用意されている。
使われていないインデックスを調べるには pg_stat_user_indexes を見るのが手っ取り早い。
select indexrelname, idx_scan, idx_tup_read, idx_tup_fetch from pg_stat_user_indexes where indexrelname not like &#39;%_pkey&#39; and idx_scan = 0; プライマリーキーっぽいものは除いてみた。
indexrelname がインデックスの名前、relname がテーブルの名前。なので、特定のテーブルのインデックスに絞ることも簡単にできる。
select indexrelname, idx_scan, idx_tup_read, idx_tup_fetch from pg_stat_user_indexes where relname = &#39;users&#39;; </description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 の JDBC ドライバをビルド</title>
      <link>https://metareal.blog/2007/12/12/building-postgresql-7-4-jdbc-driver/</link>
      <pubDate>Wed, 12 Dec 2007 03:59:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/12/12/building-postgresql-7-4-jdbc-driver/</guid>
      <description>PostgreSQL 7.4.13 以降で起こる異なるエンコーディング間の変換エラーがいまだに尾を引いている。
悩んだ末、JDBC ドライバのソースコードを読むだけではなく、実際にビルドして動作を確認してみた方がいいだろう、ということになった。JDBC ドライバにパッチを当てて問題を回避することも視野に入れている。できれば、やりたくないけれど&amp;hellip;。
PostgreSQL 7.4 の JDBC ドライバをビルドするために必要な手順は、おおまかに分けると以下のようになる。
 CVS からソースコードを取得 build.properties を用意 ビルド  CVS からソースコードを取得 PostgreSQL JDBC ドライバの CVS リポジトリからバージョン 7.4 リリース時のタグを指定してソースコードを取得する。
cvs -d :pserver:anonymous@cvs.pgfoundry.org:/cvsroot/jdbc login cvs -z3 -d :pserver:anonymous@cvs.pgfoundry.org:/cvsroot/jdbc co **-r REL7_4_STABLE** -P pgjdbc build.properties を用意 バージョン番号情報などを指定するための build.properties がないとビルドが失敗してしまう。 トップディレクトリに build.properties を作成し、以下のように書いておこう。
major=7 minor=4 fullversion=7.4.5 edition=JDBC3 def_pgport=5432 enable_debug=no connectclass=org.postgresql.jdbc3.Jdbc3Connection major, minor, fullversion, edition は org.postgresql.Driver.getVersion() で使われる。
それ以外の変数には以下のような意味があるようだ。
 def_pgport デフォルトの接続ポート番号 enable_debug デバッグ情報つきでコンパイルする場合は yes connectclass java.</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4.13 以降、異なるエンコーディングでの変換エラー</title>
      <link>https://metareal.blog/2007/12/10/postgresql-rejects-invalidly-encoded-multibyte-character/</link>
      <pubDate>Mon, 10 Dec 2007 09:54:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/12/10/postgresql-rejects-invalidly-encoded-multibyte-character/</guid>
      <description>PostgreSQL 7.4.18 で以下のようなエラーが出力されるようになった。
ERROR: 22P05: character 0xe28094 of encoding &amp;quot;UNICODE&amp;quot; has no equivalent in &amp;quot;EUC_JP&amp;quot; PostgreSQL の JDBC ドライバはバックエンド (PostgreSQL) のバージョンが 7.3 以降の場合、接続時に必ず set client_encoding = &amp;quot;UNICODE&amp;quot; を発行する。
以下は org/postgresql/jdbc1/Attic/AbstractJdbc1Connection.java の 509 行目から抜粋。
if (haveMinimumServerVersion(&amp;quot;7.3&amp;quot;)) { BaseResultSet acRset = //TODO: if protocol V3 we can set the client encoding in startup execSQL(&amp;quot;set client_encoding = &#39;UNICODE&#39;&amp;quot;); //set encoding to be unicode encoding = Encoding.getEncoding(&amp;quot;UNICODE&amp;quot;, null); } また、PostgreSQL 7.4.13 からは変換できないバイト列をすべてエラー扱いするようになった。
そのため、データベース側のエンコーディングに UNICODE (UTF-8) 以外を使用している場合（ここではエラーからも分かるように、EUC-JP にしていた）、往々にしてこのエラーが起こるようだ。</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 のインデックスと smallint と JDBC</title>
      <link>https://metareal.blog/2007/08/02/postgresql-7-4-smallint-with-index-and-jdbc/</link>
      <pubDate>Fri, 03 Aug 2007 05:41:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/08/02/postgresql-7-4-smallint-with-index-and-jdbc/</guid>
      <description>PostgreSQL 7.4 のマニュアル「8.1.1. 整数データ型」には以下のような記述がある。
 注意: インデックスが付けられた smallint あるいは bigint の列がテーブルにある場合、システムがそのインデックスを使用しようとした時に問題を引き起こすことがあります。 例えば句が次のような形式の場合、
&amp;hellip; WHERE smallint_column = 42
システムはインデックスを使用しません。 なぜなら42という定数にシステムが integer を割り当てるからです。 今の所PostgreSQLは2つの異なるデータ型が混在している時には、インデックスを使うことができません。 問題を回避するには以下のように定数部分を単一引用符で括ります。
&amp;hellip; WHERE smallint_column = &amp;lsquo;42&amp;rsquo;
こうすると、システムは型分析を後廻しにしてこの定数に正しいデータ型を割り振ります。
 （なお、PostgreSQL 8.x のドキュメントからは該当する部分が削除されているので、バージョン 8 以降にはこの制限はないのかもしれない。未確認）
なんにせよ、PostgreSQL 7.4 では smallint のカラムを条件に含める場合は、 smallint_column = &#39;42&#39; と単一引用符で囲むか、smallint_column = 42::smallint みたいに型を指定しないと、インデックスが使われないらしい。
こういう些細な注意事項は忘れてしまうのが常なので、よほどサイズが重要でないかぎりは int を使うのが安全。どうしても smallint を使う場合は、ちゃんと SQL を explain してみて引用符で囲み、理由をコメントなりで書いておくようにするべきだろう。
ただ、問題は JDBC とかの抽象層をかます場合で、このときにどんな SQL が発行されるかを把握しておく必要がある。
PostgreSQL 側で、実際に発行されている SQL をログに記録して確認してみた。Java のコードと PostgreSQL のログに残されていた SQL ステートメントの両方を載せてある。</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 を Intel Mac にインストールする方法</title>
      <link>https://metareal.blog/2007/07/24/postgresql-7-4-11-compilation-failed-on-mac-intel/</link>
      <pubDate>Wed, 25 Jul 2007 04:24:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/07/24/postgresql-7-4-11-compilation-failed-on-mac-intel/</guid>
      <description>理由あって PostgreSQL 7.4 を Mac OS X にインストールすることになった。早速、ダウンロードページから手に入る中で最新の 7.4.17 をダウンロードしてインストールしようとするも、エラーが出てコンパイルできない。
% ./configure % make ... gcc -no-cpp-precomp -O2 -fno-strict-aliasing -Wall -Wmissing-prototypes -Wmissing-declarations -I../../../../src/include -c -o xlog.o xlog.c In file included from ../../../../src/include/storage/spin.h:50, from xlog.c:35: ../../../../src/include/storage/s_lock.h:543:2: error: #error **PostgreSQL does not have native spinlock support on this platform. To continue the compilation, rerun configure using --disable-spinlocks. However, performance will be poor. Please report this to pgsql-bugs@postgresql.org.** In file included from ../../../../src/include/storage/spin.h:50, from xlog.</description>
    </item>
    
    <item>
      <title>空文字列で検索すると PostgreSQL のインデックスが効かない</title>
      <link>https://metareal.blog/2007/02/19/query-with-empty-string-cause-full-table-scan/</link>
      <pubDate>Tue, 20 Feb 2007 03:53:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/02/19/query-with-empty-string-cause-full-table-scan/</guid>
      <description>きちんと調べたわけじゃないけど、PostgreSQL で空文字列で検索するとインデックスが効かない気がする。
具体的には、こういうやつ。
select * from table where column = &#39;&#39;; table の column にインデックスがあっても、explain してみると Seq Scan になってしまう。
select * from table where column = &#39;hoge&#39;; とかだと問題ない。Index Scan してくれる。
PostgreSQL が古い 7.4 系のせいかも。MySQL は調べてない。そもそも、空文字はインデックスに含めてない気もしてきた。
とりあえず、空文字の検索で結果がないのが分かってる場合は、クエリを実行せずに無条件で失敗させるのがよさそう。</description>
    </item>
    
  </channel>
</rss>
