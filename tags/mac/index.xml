<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>METAREAL</title>
    <link>http://www.metareal.org/tags/mac/index.xml</link>
    <description>Recent content on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <atom:link href="http://www.metareal.org/tags/mac/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Safari で開いているページのリンクを Evernote クライアントに送る</title>
      <link>http://www.metareal.org/2008/12/09/copy-link-to-evernote-client-applescript/</link>
      <pubDate>Tue, 09 Dec 2008 03:37:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2008/12/09/copy-link-to-evernote-client-applescript/</guid>
      <description>

&lt;p&gt;最近、プログラミング関係のまとめやインストール手順の記録といったものには &lt;a href=&#34;http://evernote.com/&#34;&gt;Evernote&lt;/a&gt; を利用している。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://netafull.net/tech/024525.html&#34;&gt;画像中の手書き文字認識&lt;/a&gt;や「&lt;a href=&#34;http://jp.techcrunch.com/archives/extend-your-brain-with-evernote-private-beta-invites/&#34;&gt;脳を拡張する&lt;/a&gt;」といった誇大広告ばかりが取り沙汰されるサービスだが、単純にメモツールとして優れており、特に &lt;a href=&#34;http://www.evernote.com/about/download/&#34;&gt;Mac クライアント&lt;/a&gt;と &lt;a href=&#34;http://www.evernote.com/about/download/iphone/&#34;&gt;iPhone クライアント&lt;/a&gt;の出来がすばらしい。&lt;/p&gt;

&lt;h3 id=&#34;evernote-mac-クライアント&#34;&gt;Evernote: Mac クライアント&lt;/h3&gt;

&lt;p&gt;プログラミング関係の話題をノートにまとめていると、興味深いページへのリンクを多く埋め込むことになる。ノートの編集は Mac のクライアントで行うことが多いのだが、この作業がけっこう面倒だ：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Safari で開いているページのタイトルをコピーして、Evernote クライアントにペースト&lt;/li&gt;
&lt;li&gt;コピーしたタイトルを選択&lt;/li&gt;
&lt;li&gt;リンクを追加するためのシートを表示&lt;/li&gt;
&lt;li&gt;Safari で開いているページの URL をコピーして、Evernote クライアントにペースト&lt;/li&gt;
&lt;li&gt;OK ボタンをクリック&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この手順を毎回、繰り返さなければならない。慣れれば無意識に出来るような単純作業ではあるが、単純作業なら自動化した方がいい。&lt;/p&gt;

&lt;h3 id=&#34;applescript&#34;&gt;AppleScript&lt;/h3&gt;

&lt;p&gt;Mac で自動化といえば &lt;a href=&#34;http://www.apple.com/applescript/&#34;&gt;AppleScript&lt;/a&gt; の出番なのだが、残念ながら Mac 向け Evernote クライアントの AppleScript 対応は今回の要件には不十分である。そのため、今回は System Events による GUI スクリプティングにより、上記手順のキー操作やボタンクリックをエミュレートすることにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-applescript&#34;&gt;-- EvernoteCopyLink.applescript
-- Copy title and URL in the front most window of Safari to Evernote with link
-- Author: Takanori Ishikawa

on copyLinkToEvernote(theTitle, theURL)
  tell application &amp;quot;System Events&amp;quot;
    -- copy &amp;amp;amp; paste
    set the clipboard to theTitle as text
    keystroke &amp;quot;v&amp;quot; using command down

    tell process &amp;quot;Evernote&amp;quot;
      -- Select pasted text
      -- Note 1: &#39;ASCII character 28&#39; means &#39;move left&#39;.
      -- Note 2: &amp;quot;shift + option&amp;quot; selection might be more efficient,
      --         but it does not work correctly with Japanese text.
      (*
      repeat (length of words of theTitle) times
        keystroke (ASCII character 28) using {shift down, option down}
      end repeat
      *)
      repeat length of theTitle times
        keystroke (ASCII character 28) using shift down
      end repeat

      -- Link, Add...
      keystroke &amp;quot;k&amp;quot; using command down
      delay 0.1
      set the clipboard to theURL as text
      keystroke &amp;quot;v&amp;quot; using command down

      -- click &amp;quot;OK&amp;quot;
      delay 0.1
      repeat with w in windows
        if exists sheet 1 of w then
          click button &amp;quot;OK&amp;quot; of sheet 1 of w
        end if
      end repeat

    end tell
  end tell
end copyLinkToEvernote

tell application &amp;quot;System Events&amp;quot;
  if not (exists application process &amp;quot;Evernote&amp;quot;) or not (exists application process &amp;quot;Safari&amp;quot;) then
    display alert &amp;quot;Evernote and Safari Required&amp;quot; message &amp;quot;You have to launch Evernote and Safari before executing script&amp;quot;
  end if
end tell

tell first document of application &amp;quot;Safari&amp;quot;
  set pageTitle to name
  set pageURL to URL
end tell

tell application &amp;quot;Evernote&amp;quot; to activate
set theClipboard to the clipboard
copyLinkToEvernote(pageTitle, pageURL)
set the clipboard to theClipboard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このスクリプトを実行すると、Safari で開いているページのリンクを、Evernote クライアントのノートに挿入することができる。スクリプト・メニューに登録して、しばらく使ってみるつもりだ。スクリプトは &lt;a href=&#34;http://gist.github.com/33786&#34;&gt;gist:33786&lt;/a&gt; でも公開している。&lt;/p&gt;

&lt;p&gt;Note&lt;/p&gt;

&lt;p&gt;System Events を使っているため、上記スクリプトを実行するには「システム環境設定」＞「ユニバーサル・アクセス」＞「補助装置にアクセスできるようにする」チェックボックスをオンにする必要がある。&lt;/p&gt;

&lt;p&gt;なお、&lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt; による AppleScript ソースコードのハイライトには自作の &lt;a href=&#34;http://github.com/ishikawa/pygments-applescript-lexer/tree/master&#34;&gt;The Pygments lexer for AppleScript language&lt;/a&gt; を使用した。AppleScript 構文のサポートはまだ完全ではないが、何もないよりはマシだろう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2008/12/13 追記）&lt;/strong&gt;&lt;a href=&#34;http://pygments.org/download/&#34;&gt;Pygments 1.0&lt;/a&gt; で AppleScript のサポートが&lt;a href=&#34;http://dev.pocoo.org/projects/pygments/browser/CHANGES?rev=710%3Aa5748745272a&#34;&gt;追加された&lt;/a&gt;。このブログも Pygments 1.0 にアップデートし、自作のモジュールは OBSOLETE 扱いとした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python でプロパティリストを読み込む</title>
      <link>http://www.metareal.org/2008/08/04/propertylist-parser-for-python/</link>
      <pubDate>Tue, 05 Aug 2008 12:21:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2008/08/04/propertylist-parser-for-python/</guid>
      <description>

&lt;p&gt;Python で&lt;a href=&#34;http://ja.wikipedia.org/wiki/プロパティリスト&#34;&gt;プロパティリスト&lt;/a&gt;を読み込み、オブジェクトに変換するライブラリ &lt;a href=&#34;http://github.com/ishikawa/python-plist-parser/&#34;&gt;plist_parser&lt;/a&gt; を書いた。&lt;a href=&#34;http://github.com/ishikawa&#34;&gt;GitHub&lt;/a&gt; で&lt;a href=&#34;http://github.com/ishikawa/python-plist-parser/&#34;&gt;公開している&lt;/a&gt;。Python 2.4 以降で動作確認済み。ただし、対応するフォーマットは XML のみで、書き込みにも対応していない。&lt;/p&gt;

&lt;p&gt;使い方は至って単純だ。たとえば、以下のプロパティリストは &lt;code&gt;iTunes Music Library.xml&lt;/code&gt; から一部抜粋したものだが、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
  &amp;lt;key&amp;gt;Track ID&amp;lt;/key&amp;gt;
  &amp;lt;integer&amp;gt;4154&amp;lt;/integer&amp;gt;
  &amp;lt;key&amp;gt;Artist&amp;lt;/key&amp;gt;
  &amp;lt;string&amp;gt;Megadeth&amp;lt;/string&amp;gt;
  &amp;lt;key&amp;gt;Name&amp;lt;/key&amp;gt;
  &amp;lt;string&amp;gt;Architecture Of Aggression&amp;lt;/string&amp;gt;
  &amp;lt;key&amp;gt;Date Added&amp;lt;/key&amp;gt;
  &amp;lt;date&amp;gt;2008-06-23T12:20:17Z&amp;lt;/date&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このプロパティリストが &lt;code&gt;music.xml&lt;/code&gt; という名前で保存されているとして、このファイルを読み込んでオブジェクトに変換するコードは以下のとおり。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from plist_parser import XmlPropertyListParser, \
                         PropertyListParseError

f = open(&#39;music.plist&#39;)
try:
    print XmlPropertyListParser().parse(f)
    # =&amp;gt;
    # {
    #    &#39;Date Added&#39;: datetime.datetime(2008, 6, 23, 12, 20, 17),
    #    &#39;Track ID&#39;: 4154,
    #    &#39;Name&#39;: &#39;Architecture Of Aggression&#39;,
    #    &#39;Artist&#39;: &#39;Megadeth&#39;
    # }
except PropertyListParseError:
    raise
finally:
    f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特に説明の必要はないだろう。&lt;/p&gt;

&lt;p&gt;自作ライブラリの紹介はこれくらいにし、以降では、&lt;strong&gt;Python でプロパティリストを解析する他の手段&lt;/strong&gt;と、それらのパフォーマンスを比較した結果について書いてみたい。&lt;/p&gt;

&lt;h3 id=&#34;plistlib&#34;&gt;plistlib&lt;/h3&gt;

&lt;p&gt;Python 2.6 からは、プロパティリストの読み書きをするためのライブラリ &lt;a href=&#34;http://docs.python.org/dev/library/plistlib.html&#34;&gt;plistlib&lt;/a&gt; が標準で添付されている。また、Python 2.5 以前でもソースコードや Mac 向けのディストリビューションには含まれているので、実はプロパティリストを読み込みたいだけなら、今回自作した &lt;a href=&#34;http://github.com/ishikawa/python-plist-parser/&#34;&gt;plist_parser&lt;/a&gt; の有用性はすくない。&lt;/p&gt;

&lt;p&gt;それなら、何故わざわざ自作したのかといえば、ほぼ実装してしまってから &lt;a href=&#34;http://docs.python.org/dev/library/plistlib.html&#34;&gt;plistlib&lt;/a&gt; の存在に気づいたのだ。勘弁してほしい。&lt;/p&gt;

&lt;h3 id=&#34;xml-etree&#34;&gt;xml.etree&lt;/h3&gt;

&lt;p&gt;Python 2.5 から標準添付されている &lt;a href=&#34;http://docs.python.org/lib/module-xml.etree.ElementTree.html&#34;&gt;xml.etree&lt;/a&gt; ライブラリを使うと XML の処理が簡潔に記述できる。作者のサイト &lt;a href=&#34;http://effbot.org/&#34;&gt;effbot.org&lt;/a&gt; に掲載されている記事 &lt;a href=&#34;http://effbot.org/zone/element-iterparse.htm&#34;&gt;The ElementTree iterparse Function&lt;/a&gt; に、ちょうど、このライブラリを使ってプロパティリストを読み込む例がある（以下はすこし改変してある）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from xml.etree.ElementTree import iterparse
import base64, datetime, re

unmarshallers = {

    # collections
    &amp;quot;array&amp;quot;: lambda x: [v.text for v in x],
    &amp;quot;dict&amp;quot;: lambda x:
        dict((x[i].text, x[i+1].text) for i in range(0, len(x), 2)),
    &amp;quot;key&amp;quot;: lambda x: x.text or &amp;quot;&amp;quot;,

    # simple types
    &amp;quot;string&amp;quot;: lambda x: x.text or &amp;quot;&amp;quot;,
    &amp;quot;data&amp;quot;: lambda x: base64.decodestring(x.text or &amp;quot;&amp;quot;),
    &amp;quot;date&amp;quot;: lambda x: datetime.datetime(*map(int, re.findall(&amp;quot;\d+&amp;quot;, x.text))),
    &amp;quot;true&amp;quot;: lambda x: True,
    &amp;quot;false&amp;quot;: lambda x: False,
    &amp;quot;real&amp;quot;: lambda x: float(x.text),
    &amp;quot;integer&amp;quot;: lambda x: int(x.text),

}

def load(file):
    parser = iterparse(file)
    for action, elem in parser:
        unmarshal = unmarshallers.get(elem.tag)
        if unmarshal:
            data = unmarshal(elem)
            elem.clear()
            elem.text = data
        elif elem.tag != &amp;quot;plist&amp;quot;:
            raise IOError(&amp;quot;unknown plist type: %r&amp;quot; % elem.tag)
    return parser.root[0].text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;非常にコンパクトだ。&lt;/p&gt;

&lt;p&gt;xml.etree は C による実装 &lt;code&gt;xml.etree.cElementTree&lt;/code&gt; も提供されており、これを使うとパフォーマンスでもかなりの好成績を出すようになる（具体的なパフォーマンスの比較は後述）。&lt;/p&gt;

&lt;h3 id=&#34;パフォーマンスの比較&#34;&gt;パフォーマンスの比較&lt;/h3&gt;

&lt;p&gt;さて、プロパティリストを読み込むためのライブラリとして、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ishikawa/python-plist-parser/&#34;&gt;plist_parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.org/dev/library/plistlib.html&#34;&gt;plistlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.org/lib/module-xml.etree.ElementTree.html&#34;&gt;xml.etree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の三つが出揃った。これらのパフォーマンスを比較してみよう。&lt;/p&gt;

&lt;p&gt;それぞれのライブラリを使用したプログラムを用意する。測定対象のプログラムはどれも、iTunes の音楽ライブラリのプロパティリスト（約 7MB）を読み込み、オブジェクトに変換する、というものである。&lt;strong&gt;これらのプログラムをそれぞれ 20 回ずつ実行し、その実行時間の平均を比較する&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;また、プログラムと測定方法については、以下の点にも気をつけた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IO の影響をすくなくするため、ファイルはあらかじめメモリに展開する&lt;/li&gt;
&lt;li&gt;メモリ管理の影響をすくなくするため、プログラムの実行中は GC を停止する（C プログラムの場合は、メモリを解放しない）&lt;/li&gt;
&lt;li&gt;負荷の高いバックグラウンドプロセス（たとえば &lt;a href=&#34;http://www.apple.com/jp/macosx/features/timemachine.html&#34;&gt;Time Machine&lt;/a&gt; など）はオフにする&lt;/li&gt;
&lt;li&gt;ウォームアップのために、事前にプログラムを 5 回実行する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかし、実行時間はプログラムを実行するコンピューターの性能に左右される。誰かのコンピューターで 5 秒しかかからなかった、と言われても、あなたにとっては意味がないだろう。それぞれのプログラムの実行時間を並べていっても、実際にどれくらい速いのか（あるいは、遅いのか）はわかりづらい。基準となる比較対象が必要だ。&lt;/p&gt;

&lt;p&gt;今回は比較対象として、&lt;a href=&#34;http://github.com/ishikawa/python-plist-parser/tree/master/tools/performance/core_foundation_parser.c&#34;&gt;C による実装&lt;/a&gt;を用意した。これは Mac OS X ネイティブの API を使って、プロパティリストを読み込んでいる。&lt;strong&gt;このプログラムの実行時間を 1 として、それぞれの実行時間を比較&lt;/strong&gt;してみよう（なお、測定に使用したプログラムは&lt;a href=&#34;http://github.com/ishikawa/python-plist-parser/tree/master/tools/performance/profiler.py&#34;&gt;ここに置いてある&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/2732221848/&#34;&gt;&lt;img src=&#34;http://farm4.static.flickr.com/3123/2732221848_38f2439737_o.png&#34; alt=&#34;Performance of Python Property Lists Libraries&#34; /&gt;&lt;/a&gt;やはり、C によるプログラムが桁違いに速い。ちなみに、実時間でいえば 0.5 秒程度である。&lt;/p&gt;

&lt;p&gt;次に目立つのが &lt;a href=&#34;http://docs.python.org/lib/module-xml.etree.ElementTree.html&#34;&gt;xml.etree&lt;/a&gt; によるプログラムだ。これは C による &lt;code&gt;xml.etree.cElementTree&lt;/code&gt; と Python のみで実装された &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; のふたつがあるが、&lt;code&gt;xml.etree.cElementTree&lt;/code&gt; はかなり速いことがわかる。C によるプログラムと比較しても 5 倍程度の実行時間、&lt;a href=&#34;http://docs.python.org/dev/library/plistlib.html&#34;&gt;plistlib&lt;/a&gt; と比較すると 3 倍程度速く、優秀であるといえる。逆に、Python による実装の &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; がズバ抜けて遅いのも興味深い。&lt;/p&gt;

&lt;p&gt;ところで、グラフからも分かるように、&lt;code&gt;plist_parser&lt;/code&gt; には実装がふたつある。&lt;/p&gt;

&lt;p&gt;実は、今回の測定で &lt;code&gt;xml.etree.cElementTree&lt;/code&gt; が速いことが判り、&lt;code&gt;xml.etree.cElementTree&lt;/code&gt; がインストールされているときはそちらを使うように急遽作りかえたのだ（ない場合は、&lt;code&gt;xml.sax&lt;/code&gt; による実装を使う）。&lt;/p&gt;

&lt;p&gt;そのため、Python 2.5 以降など、&lt;code&gt;xml.etree.cElementTree&lt;/code&gt; がインストールされている環境では、同程度の速度で動作するようになっている。&lt;/p&gt;

&lt;h3 id=&#34;最後に&#34;&gt;最後に&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;XML を扱うなら、&lt;a href=&#34;http://docs.python.org/lib/module-xml.etree.ElementTree.html&#34;&gt;xml.etree&lt;/a&gt; は一見の価値あり&lt;/li&gt;
&lt;li&gt;ライブラリを作るまえに、同じものがすでにないかチェックした方がよい&lt;/li&gt;
&lt;li&gt;パフォーマンスを測定するのは難しい&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mac の Python をビルドするときに GNU Readline ライブラリを有効にする</title>
      <link>http://www.metareal.org/2008/04/11/building-readline-enabled-python-on-mac/</link>
      <pubDate>Fri, 11 Apr 2008 10:05:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2008/04/11/building-readline-enabled-python-on-mac/</guid>
      <description>

&lt;p&gt;Mac OS X では &lt;a href=&#34;http://tiswww.case.edu/php/chet/readline/rltop.html&#34;&gt;GNU の Readline ライブラリ&lt;/a&gt;がインストールには含まれておらず、Readline 互換の &lt;a href=&#34;http://sourceforge.net/projects/libedit/&#34;&gt;Libedit&lt;/a&gt; というライブラリへのシンボリックリンクとなっている（こうなっている理由はライセンス上の問題からだと思われる。GNU の Readline ライブラリは GPL で、Libedit は BSD ライセンスだ）。&lt;/p&gt;

&lt;p&gt;しかし、これが原因で Readline 対応のプログラムがコンパイルできない、コンパイルできてもヒストリ機能などが使えない、といった問題がしばしば起こる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt; は後者の例で、&lt;code&gt;configure&lt;/code&gt; スクリプトはちゃんと readline ライブラリを認識し &lt;code&gt;make&lt;/code&gt; も問題なく通るのだが、実際には Readline ライブラリが無効になったバイナリがインストールされてしまう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ./configure
...
checking for readline in -lreadline... yes
checking for rl_callback_handler_install in -lreadline... yes
checking for rl_pre_input_hook in -lreadline... yes
checking for rl_completion_matches in -lreadline... no
...
% make
...
% find . -name readline.so
# readline.so が出来ていない
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ヒストリ機能やキャレット移動のショートカットが使えないのは、やはり不便だ。これはなんとかしたい。&lt;/p&gt;

&lt;h3 id=&#34;macports-で-gnu-readline-ライブラリをインストール&#34;&gt;MacPorts で GNU Readline ライブラリをインストール&lt;/h3&gt;

&lt;p&gt;まずは &lt;a href=&#34;http://tiswww.case.edu/php/chet/readline/rltop.html&#34;&gt;GNU Readline&lt;/a&gt; ライブラリをインストールしよう。&lt;a href=&#34;http://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt; を利用するのが簡単だろう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sudo port install readline
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/opt/local/lib&lt;/code&gt; 以下にインストールされる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% l /opt/local/lib/libreadline.*
-r-xr-xr-x   2 root  admin  448300 Nov 13  2006 /opt/local/lib/libreadline.5.1.dylib
lrwxr-xr-x   1 root  admin      21 Nov 13  2006 /opt/local/lib/libreadline.5.dylib -&amp;gt; libreadline.5.1.dylib
-rw-r--r--   2 root  admin  574188 Nov 13  2006 /opt/local/lib/libreadline.a
lrwxr-xr-x   1 root  admin      21 Nov 13  2006 /opt/local/lib/libreadline.dylib -&amp;gt; libreadline.5.1.dylib
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gnu-readline-ライブラリの場所を指定して-python-をビルド&#34;&gt;GNU Readline ライブラリの場所を指定して Python をビルド&lt;/h3&gt;

&lt;p&gt;あとは新しくインストールされたライブラリの場所を指定して、Python をビルドしなおすだけだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% CPPFLAGS=-I/opt/local/include LDFLAGS=-L/opt/local/lib ./configure
% make
% find . -name readline.so
./build/lib.macosx-10.3-i386-2.5/readline.so
% sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしてビルドした Python のインタプリタでは、ヒストリ機能やキャレット移動のショートカットが有効になっている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apple によるロケール周りの変更点を Python 2.5.2 にも適用する</title>
      <link>http://www.metareal.org/2008/04/02/fixup-python-locale-problems-by-apple-darwin-patch-for-2-5-2/</link>
      <pubDate>Wed, 02 Apr 2008 10:23:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2008/04/02/fixup-python-locale-problems-by-apple-darwin-patch-for-2-5-2/</guid>
      <description>&lt;p&gt;最近 &lt;a href=&#34;http://www.python.org/&#34;&gt;Python&lt;/a&gt; を 2.5.2 にアップデートして同じ作業を繰り返したことと、&lt;a href=&#34;http://www.metareal.org/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/&#34;&gt;Apple によるロケール周りの変更点を Python 2.5.1 にも適用する&lt;/a&gt;のときはパッチの適用方法について言及がなかったこともあり、そのへんも含めて手順をまとめておく。&lt;/p&gt;

&lt;p&gt;まずは Python 2.5.2 をダウンロードし展開。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
% curl -LO http://www.python.org/ftp/python/2.5.2/Python-2.5.2.tar.bz2
% tar xjf Python-2.5.2.tar.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.metareal.org/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/&#34;&gt;Apple によるロケール周りの変更点を Python 2.5.1 にも適用する&lt;/a&gt;で公開したパッチをあてる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
% curl -LO http://www.metareal.org/wp-content/uploads/2007/09/python251_apple_locale.txt
% cd Python-2.5.2
% patch -p2 -d . &amp;lt; ../python251_apple_locale.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後の &lt;code&gt;patch&lt;/code&gt; コマンドによりパッチを適用している。&lt;code&gt;-p2&lt;/code&gt; オプションの指定をしないとパッチがうまく適用されないので注意。あとは通常どおり confgure, make すればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
% ./configure
% make
% sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.5.3 がリリースされたら、また同じパターンで記事が一本できるな。&lt;/p&gt;

&lt;p&gt;【追記】こうしてインストールされた Python インタプリタではヒストリ機能などが有効になっていないかもしれない。その場合は &lt;a href=&#34;http://www.metareal.org/2008/04/11/building-readline-enabled-python-on-mac/&#34;&gt;Mac の Python をビルドするときに GNU Readline ライブラリを有効にする&lt;/a&gt;をどうぞ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ffmpeg を MacPorts でインストール</title>
      <link>http://www.metareal.org/2007/12/09/install-ffmpeg-using-macports/</link>
      <pubDate>Sun, 09 Dec 2007 09:57:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/12/09/install-ffmpeg-using-macports/</guid>
      <description>&lt;p&gt;動画の変換がやりたくて Mac に &lt;a href=&#34;http://ffmpeg.mplayerhq.hu/&#34;&gt;ffmpeg&lt;/a&gt; をインストールした。そのときのメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt; でインストールするのがよさげ。&lt;a href=&#34;http://macwiki.sourceforge.jp/wiki/index.php/MacPorts#variants_.E3.81.AE.E3.82.B5.E3.83.9D.E3.83.BC.E3.83.88&#34;&gt;variants&lt;/a&gt; のおかげで、H.264 や AAC を有効にするのも簡単だ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sudo port install x264
% sudo port install faac
% sudo port install faad2
% sudo port install a52dec
% sudo port install ffmpeg +faac +faad +a52 +x264
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関連するライブラリを先にインストールして、&lt;code&gt;+faac&lt;/code&gt; のように指定してやるだけ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mail.app や iGTD の vacuum を cron で自動化する</title>
      <link>http://www.metareal.org/2007/12/08/vacuum-analyze-sqlite-automatically-by-cron/</link>
      <pubDate>Sat, 08 Dec 2007 10:00:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/12/08/vacuum-analyze-sqlite-automatically-by-cron/</guid>
      <description>&lt;p&gt;Warning&lt;/p&gt;

&lt;p&gt;この方法でデータベースを VACUUM すると、Mail.app で問題が起こるようだ。Mail.app を起動中に cron が実行されるとメールを送信できない、下書き保存できない、などの問題があった。というわけで、この方法は使わないか、問題が起こらないように改良する必要がある。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://weblog.metareal.org/2007/08/23/optimize-the-apple-mail-app-database/&#34;&gt;Mail.app を vacuum して高速化&lt;/a&gt;」や「&lt;a href=&#34;http://weblog.metareal.org/2007/12/05/optimize-the-igtd-database/&#34;&gt;iGTD も vacuum すると速くなる&lt;/a&gt;」でも書いたように、Mac のアプリケーションのいくつかは、ターミナルから &lt;a href=&#34;http://www.sqlite.org/lang_vacuum.html&#34;&gt;VACUUM&lt;/a&gt; &lt;a href=&#34;http://www.sqlite.org/lang_vacuum.html&#34;&gt;ANALYZE&lt;/a&gt; という SQL を実行することで高速に動作するようになる。&lt;/p&gt;

&lt;p&gt;しかし、このコマンドを毎回手動で実行するのは面倒なので、自動化することにした。自動化、といっても大層なものではなく &lt;code&gt;crontab&lt;/code&gt; にコマンドを書いておき、毎日実行されるようにしただけ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% **crontab -e**
0 15 * * * sqlite3 ~/Library/Application\ Support/iGTD/iGTD.sql &amp;quot;vacuum analyze&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
0 15 * * * sqlite3 ~/Library/Mail/Envelope\ Index &amp;quot;vacuum analyze&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sqlite&lt;/code&gt; コマンドを直接書いているので見苦しいが、別スクリプトにした場合の管理を考えると面倒だった。ここでは標準エラー出力を &lt;code&gt;/dev/null&lt;/code&gt; に捨てている（ただし、アプリケーションがデータベースをロックしていると、&lt;code&gt;VACUUM ANALYZE&lt;/code&gt; は &amp;ldquo;database is locked&amp;rdquo; というエラーで即座に終了する）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iGTD も vacuum すると速くなる</title>
      <link>http://www.metareal.org/2007/12/05/optimize-the-igtd-database/</link>
      <pubDate>Thu, 06 Dec 2007 08:08:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/12/05/optimize-the-igtd-database/</guid>
      <description>

&lt;p&gt;日々の ToDo 管理には &lt;a href=&#34;http://bargiel.home.pl/iGTD/index.html&#34;&gt;iGTD&lt;/a&gt; を愛用している。だが、最近、目に見えて動作が重くなってしまった。&lt;/p&gt;

&lt;p&gt;おそらく、完了したタスクも削除されることはなく、ずっと溜まっているのが原因だろう。iGTD は内部のデータベースとして SQLite を使っているので、&lt;a href=&#34;http://weblog.metareal.org/2007/08/23/optimize-the-apple-mail-app-database/&#34;&gt;Mail.app を vacuum して高速化&lt;/a&gt;と同じ方法で高速化できる。&lt;/p&gt;

&lt;h3 id=&#34;vacuum-analyze&#34;&gt;VACUUM ANALYZE&lt;/h3&gt;

&lt;p&gt;手順は簡単で、ターミナルから以下のコマンドを実行するだけだ（iGTD が起動中なら終了する必要があるかもしれない）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sqlite3 ~/Library/Application\ Support/iGTD/iGTD.sql &amp;quot;vacuum analyze&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドはデータベースから不要な領域を回収し、統計情報を更新することで実行速度を向上させる。これだけで体感的にはかなり速くなった。&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sqlite.org/lang_analyze.html&#34;&gt;SQLite Query Language: ANALYZE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sqlite.org/lang_vacuum.html&#34;&gt;SQLite Query Language: VACUUM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MacBook に内蔵された iSight を Flash から利用できるようにする</title>
      <link>http://www.metareal.org/2007/10/10/setting-flash-camera-with-macbook-isight/</link>
      <pubDate>Thu, 11 Oct 2007 05:20:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/10/10/setting-flash-camera-with-macbook-isight/</guid>
      <description>&lt;p&gt;Flash の &lt;a href=&#34;http://livedocs.adobe.com/flex/2_jp/langref/flash/media/Camera.html&#34;&gt;&lt;code&gt;flash.media.Camera&lt;/code&gt;&lt;/a&gt; オブジェクトを使うと、Webcam からの入力をキャプチャすることができる。&lt;/p&gt;

&lt;p&gt;しかし、そのままだと MacBook に内蔵された &lt;a href=&#34;http://www.apple.com/jp/macbook/isight.html&#34;&gt;iSight&lt;/a&gt; では映像をとることができない。どうやら、設定を変更する必要があるようだ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ページに表示された Flash を右クリックして「Adobe Flash Player 設定」を開く。&lt;/li&gt;
&lt;li&gt;左下のアイコンから、一番右のカメラをクリック&lt;/li&gt;
&lt;li&gt;カメラの種類を選択するプルダウンメニューが表示されるので「&lt;strong&gt;USB Video Class Video&lt;/strong&gt;」を選択&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/2448186075/&#34;&gt;&lt;img src=&#34;http://farm3.static.flickr.com/2189/2448186075_9e2d68a91b_o.gif&#34; alt=&#34;Webcam on Flash Player&#34; /&gt;&lt;/a&gt;これで iSight からの入力を受け取れるようになる。&lt;/p&gt;

&lt;p&gt;ちなみに、ここまでして見たかったページは &lt;a href=&#34;http://incubator.quasimondo.com/flash/minority_cube.php&#34;&gt;Quasimondo : Incubator : Processing : Minority Cube&lt;/a&gt;、Webcam に映した手の動きでキューブを回せる、というデモ。実際に操作してみると、不思議な満足感がある。面白い。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apple によるロケール周りの変更点を Python 2.5.1 にも適用する</title>
      <link>http://www.metareal.org/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/</link>
      <pubDate>Sun, 09 Sep 2007 11:49:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.metareal.org/2007/07/19/problem-with-python-getpreferredencoding-in-trac-mac-os-x/&#34;&gt;Python: Mac OS X での locale.getpreferredencoding()&lt;/a&gt; では、Mac OS X に Python 2.5.1 をソースコードからインストールした場合に発生する、ロケール周りの問題点について書いた。&lt;/p&gt;

&lt;p&gt;要約すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;locale.getpreferredencoding()&lt;/code&gt; の返すエンコーディングが &lt;code&gt;X-MAC-JAPANESE&lt;/code&gt; になってしまう&lt;/li&gt;
&lt;li&gt;Python では &lt;code&gt;X-MAC-JAPANESE&lt;/code&gt; がデフォルトではサポートされていないため、&lt;code&gt;locale.getpreferredencoding()&lt;/code&gt; を利用したエンコード、デコードができない&lt;/li&gt;
&lt;li&gt;_localmodule.c を変更して、&lt;code&gt;X-MAC-JAPANESE&lt;/code&gt; の代わりに &lt;code&gt;shift_jis&lt;/code&gt; を返すようにして解決&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という内容だった。&lt;/p&gt;

&lt;p&gt;しかし、しばらくして「っき」さんより&lt;a href=&#34;http://www.metareal.org/2007/07/19/problem-with-python-getpreferredencoding-in-trac-mac-os-x/#comment-4027&#34;&gt;コメントをいただいた&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;上記のlocale.getpreferredencoding()の返り値ですが、10.4.9に含まれているOS標準のPython 2.3.5では、デフォルトがUS-ASCIIになっていて、LANG環境変数も見てくれます。&lt;/p&gt;

&lt;p&gt;これは、Appleがパッケージングの際に、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.opensource.apple.com/darwinsource/10.4.9.x86/python-16.1.3/&#34;&gt;http://www.opensource.apple.com/darwinsource/10.4.9.x86/python-16.1.3/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下に含まれているパッチを適用して、ロケール周りのdefined(APPLE)や ‘darwin’ を無効にしているからです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;たしかに、前回の記事では Mac OS X に標準でバンドルされている Python にまで考えが及んでいなかった。「っき」さんの指摘通り、互換性のことも考慮すると、Apple のパッケージングを見習うのがよさそうだ。&lt;/p&gt;

&lt;p&gt;というわけで、Apple のパッチを適用した Python 2.5.1 の&lt;a href=&#34;http://snipplr.com/view/6028/apples-modifications-to-python-251-localepy-/&#34;&gt;パッチファイルをアップしておく&lt;/a&gt;。以降は、このパッチファイルを作成するまでの詳細である。&lt;/p&gt;

&lt;h3 id=&#34;mac-os-x-に標準でパッケージングされている-python&#34;&gt;Mac OS X に標準でパッケージングされている Python&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.apple.com/&#34;&gt;Apple Developer Connection&lt;/a&gt; の &lt;a href=&#34;http://developer.apple.com/opensource/index.html&#34;&gt;Open Source&lt;/a&gt; ページでは Mac OS X のベースとなっている Darwin のソースコードが公開されている。&lt;a href=&#34;http://www.opensource.apple.com/darwinsource/10.4.9.x86/&#34;&gt;現時点での最新版は Mac OS X 10.4.9 のもの&lt;/a&gt;なので、今回のパッチはこれを基にした。&lt;/p&gt;

&lt;p&gt;上記ページからダウンロードできる &lt;a href=&#34;http://www.opensource.apple.com/darwinsource/tarballs/other/python-16.1.3.tar.gz&#34;&gt;python-16.1.3.tar.gz&lt;/a&gt; には Mac OS X にバンドルされている Python に適用されたパッチが含まれているので、このうち、ロケール周りに関係あるものを Python 2.5.1 のソースコードに適用すればよさそうだ。&lt;/p&gt;

&lt;h3 id=&#34;apple-のパッチを-python-2-5-1-に適用する&#34;&gt;Apple のパッチを Python 2.5.1 に適用する&lt;/h3&gt;

&lt;p&gt;まずは、Python 2.5.1 のソースコードと Apple のパッチ (python-16.1.3.tar.gz) を同じディレクトリにダウンロードして展開する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% curl -LO http://www.python.org/ftp/python/2.5.1/Python-2.5.1.tgz
% curl -LO http://www.opensource.apple.com/darwinsource/tarballs/other/python-16.1.3.tar.gz
% tar xvzf Python-2.5.1.tgz
% tar xvzf python-16.1.3.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のようなシェルスクリプトでパッチを適用した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PROJECT=Python-2.5.1
FIX=python-16.1.3/fix
echo ed - ${PROJECT}/Lib/locale.py \&amp;lt; ${FIX}/locale.py.ed &amp;amp;&amp;amp; \
ed - ${PROJECT}/Lib/locale.py &amp;lt; ${FIX}/locale.py.ed &amp;amp;&amp;amp; \
echo ed - ${PROJECT}/Modules/_localemodule.c \&amp;lt; ${FIX}/_localemodule.c.ed &amp;amp;&amp;amp; \
ed - ${PROJECT}/Modules/_localemodule.c &amp;lt; ${FIX}/_localemodule.c.ed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要するに、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python-16.1.3/fix/locale.py.ed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python-16.1.3/fix/_localemodule.c.ed&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というふたつのパッチファイルを適用したわけだ。&lt;/p&gt;

&lt;p&gt;その diff をとったものが&lt;a href=&#34;http://snipplr.com/view/6028/apples-modifications-to-python-251-localepy-/&#34;&gt;上記のパッチファイル&lt;/a&gt;となる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mail.app を vacuum して高速化</title>
      <link>http://www.metareal.org/2007/08/23/optimize-the-apple-mail-app-database/</link>
      <pubDate>Fri, 24 Aug 2007 05:38:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/08/23/optimize-the-apple-mail-app-database/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; の &lt;code&gt;vacuum&lt;/code&gt; コマンドで Mail.app を高速化する。ターミナルで、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd ~/Library/Mail/; sqlite3 Envelope\ Index &amp;quot;vacuum;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Automator で自動化する &lt;a href=&#34;http://automatorworld.com/archives/mail-vacuum/&#34;&gt;Mail Vacuum&lt;/a&gt; なんてのもある。&lt;/p&gt;

&lt;p&gt;個人的には、以下のような AppleScript を、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &amp;quot;Terminal&amp;quot;
  activate
  do script &amp;quot;cd ~/Library/Mail/; sqlite3 Envelope\\ Index \&amp;quot;vacuum;\&amp;quot;&amp;quot;
end tell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Optimize Mail.app.scpt&lt;/code&gt; として保存し、QuickSilver から実行できるようにしている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iGTD と QuickSilver の連携</title>
      <link>http://www.metareal.org/2007/08/15/about-igtd-quicksilver-plugin/</link>
      <pubDate>Wed, 15 Aug 2007 05:18:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/08/15/about-igtd-quicksilver-plugin/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://igtd.pl/iGTD/&#34;&gt;iGTD&lt;/a&gt; のインストール用ディスクイメージには &lt;a href=&#34;http://docs.blacktree.com/quicksilver/what_is_quicksilver&#34;&gt;QuickSilver&lt;/a&gt; と連携するためのプラグインが同梱されている（参考：&lt;a href=&#34;http://bargiel.home.pl/iGTD/help/quicksilver/index.html&#34;&gt;iGTD &amp;amp; Quicksilver&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;このプラグインで追加される &lt;strong&gt;Put into iGTD inbox&lt;/strong&gt; を使えば、QuickSilver で選択したものは何でも（テキスト、ファイル、ブックマーク、あるいはアプリケーションも）iGTD の inbox に放り込むことが可能だ。QuickSilver でテキストを入力すれば、それがそのままタスクの名前になるし、ファイルやブックマークはタスクにリンクが付随したかたちで登録される。&lt;/p&gt;

&lt;p&gt;また、タスクを登録するときは、あらかじめ決められたフォーマットに従うことで、たとえば、登録先のコンテキストやプロジェクトを指定することができる。&lt;/p&gt;

&lt;p&gt;以下に、使用できるフォーマットをまとめた。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;コンテキストを指定する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@development&lt;/strong&gt; Remove a bug with link field&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@dev&lt;/strong&gt; Remove a bug with link field&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;プロジェクトを指定する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A nice new feature &lt;strong&gt;[igtd]&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A nice new feature &lt;strong&gt;[ig]&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ノートを指定する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;@dev A nice new feature [igtd]&lt;strong&gt;: quicksilver integration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;@dev A nice new feature&lt;strong&gt;: quicksilver integration&lt;/strong&gt; [igtd]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;優先度を指定する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;@dev A nice new feature&lt;strong&gt;!!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;@dev A nice new feature&lt;strong&gt;!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;@dev A nice new feature&lt;/li&gt;
&lt;li&gt;@dev A nice new feature&lt;strong&gt;?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;@dev A nice new feature&lt;strong&gt;??&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;開始日時を指定する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;@dev do it!! [igtd]: new release &lt;strong&gt;#friday,&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;終了日時を指定する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;@dev do it!! [igtd]: new release &lt;strong&gt;#today&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;@dev do it! [igtd]: new release &lt;strong&gt;#next week&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;開始／終了日時を指定する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;@dev do it!! [igtd]: new release &lt;strong&gt;#friday,sunday&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;タグを指定する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;@dev a task! [igtd]: new release &lt;strong&gt;{concept,1.5}&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;インストール用ディスクイメージには同様の機能をもつ Dashboard ウィジェットも同梱されているので、好きな方を使えばいいだろう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mac の GTD アプリ、iGTD を試してみた (2)</title>
      <link>http://www.metareal.org/2007/08/11/review-my-igtd-experience/</link>
      <pubDate>Sat, 11 Aug 2007 08:59:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/08/11/review-my-igtd-experience/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/1077839654/&#34;&gt;&lt;img src=&#34;http://farm2.static.flickr.com/1373/1077839654_3a2455e628_o.gif&#34; alt=&#34;iGTD Screenshot&#34; /&gt;&lt;/a&gt;
    © &lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/&#34;&gt;Takanori Ishikawa&lt;/a&gt;, Some rights reserved&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://weblog.metareal.org/2007/08/10/igtd-first-impression/&#34;&gt;前回&lt;/a&gt;書いたように、&lt;a href=&#34;http://www.rememberthemilk.com/&#34;&gt;Remember The Milk&lt;/a&gt; から &lt;a href=&#34;http://igtd.pl/iGTD/&#34;&gt;iGTD&lt;/a&gt; に乗り換えた。&lt;/p&gt;

&lt;p&gt;数日使ってみて、コンテキスト（背景）には「仕事」「プライベート」の二種類、そして、三つのプロジェクトを登録してある（シンプルな人生だ）。段々と日常的なワークフローに組み込まれつつある感じ。いまのところ全般的な使い勝手はいい。&lt;/p&gt;

&lt;p&gt;もっとも、最初から順風満帆だったわけではなく、最初使ってみたときは戸惑う部分もあった。ヘルプを読むまで分からなかった「直感的に」使えなかった部分をまとめてみる。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;タスクを手動で並び替える&lt;/strong&gt;。タスクを名前や優先度で並び替えるのは簡単にできる。その項目名をクリックするだけだ。しかし、手動で並び替えをしようとタスクをドラッグ＆ドロップしてもできない。メニューの「View」&amp;gt;「Toggle natural sorting」を選択すると、タスクをドラッグ＆ドロップで並び替えできるようになる（&lt;a href=&#34;http://bargiel.home.pl/iGTD/help/usingtasks/sorting/index.html&#34;&gt;Sorting tasks&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完了したタスクが表示されないようにする&lt;/strong&gt;。完了したタスクのチェックボックスをチェックしても、タスクは消えるわけじゃない。タスクの「掃除」をするまでは未完了のまま残ることになる。手動で「Tasks」&amp;gt;「Clean up」を実行するか。自動的に実行されるように、環境設定で設定しておこう（&lt;a href=&#34;http://bargiel.home.pl/iGTD/help/usingtasks/cleaningup/index.html&#34;&gt;Cleaning up&lt;/a&gt;）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ふたつしかない。荒削りな部分もあるが、UI はまとまっていると思う。&lt;/p&gt;

&lt;h3 id=&#34;ちょっとした不満&#34;&gt;ちょっとした不満&lt;/h3&gt;

&lt;p&gt;これらはヘルプを読んでも片づかなかった不満。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;フォントサイズ&lt;/strong&gt; Large だと Priority の表示がずれてしまう&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;検索&lt;/strong&gt; 表示中のタスクからしか検索できない（すべてひっくるめて大域的に検索できない）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;並び替え&lt;/strong&gt; プロジェクトやアーカイブ表示で手動による並び替えができない&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;アーカイブ&lt;/strong&gt; アイデアや興味深いリンクやファイル、といったタスク以外の諸々をまとめておけるアーカイブ。是非欲しかった機能だが、まだまだ発展途上。並び替えができないのも痛いが、アイデアがタスクになったとき（「今日は、このアイデアやってみよう」）に、アーカイブからタスクに移動できない&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;アイコン&lt;/strong&gt; かわいくない&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;最後に&#34;&gt;最後に&lt;/h3&gt;

&lt;p&gt;やはり、デスクトップ・アプリケーションの強みなのだが、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;速い&lt;/strong&gt;。タスクの粒度がちょっと大きいかなー、と思ったらサクサク分割していける。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常駐しやすい&lt;/strong&gt;。ひとつの Web アプリケーションをずっと表示している、というのは稀だ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この二点は GTD アプリケーションとしては重要な反面、Web アプリケーションではなかなか得難いのではないか、と思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mac の GTD アプリ、iGTD を試してみた</title>
      <link>http://www.metareal.org/2007/08/10/igtd-first-impression/</link>
      <pubDate>Fri, 10 Aug 2007 05:29:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/08/10/igtd-first-impression/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/1072315915/&#34;&gt;&lt;img src=&#34;http://farm2.static.flickr.com/1008/1072315915_bee7dddcbc_o.jpg&#34; alt=&#34;Remember The Milk To iGTD&#34; /&gt;&lt;/a&gt;
    © &lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/&#34;&gt;Takanori Ishikawa&lt;/a&gt;, Some rights reserved&lt;/p&gt;

&lt;p&gt;これまで TODO 管理には &lt;a href=&#34;http://www.rememberthemilk.com/&#34;&gt;Remember The Milk&lt;/a&gt; を愛用していた。&lt;/p&gt;

&lt;p&gt;ユーザーインターフェースはシンプルかつ高機能だし、&lt;strong&gt;タスクに期限を設定するとメールやメッセンジャーで通知してくれる&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;この機能が非常に便利で重宝していた（かつて、&lt;a href=&#34;http://www.checkpad.jp/&#34;&gt;checkpad&lt;/a&gt; から移行した理由でもある）。そして、なにより名前が洒落ている。そうだ、牛乳買わなきゃ。&lt;/p&gt;

&lt;p&gt;でも、今日、&lt;a href=&#34;http://igtd.pl/iGTD/&#34;&gt;iGTD&lt;/a&gt; に乗り換えた。何故か？&lt;/p&gt;

&lt;h3 id=&#34;何故-remember-the-milk-では駄目になったのか&#34;&gt;何故、Remember The Milk では駄目になったのか&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;重い&lt;/strong&gt;。特にログイン後、タスクを表示するときが重い。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;パスワード入力が面倒&lt;/strong&gt;。クッキーは頻繁に削除するので自動ログインは使っていない。もちろん、Safari が自動入力してくれるのだが、ログイン画面で Enter を毎回押すのは、想像する以上の精神的負担だ。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインでないと使えない&lt;/strong&gt;。&lt;a href=&#34;http://gears.google.com/&#34;&gt;Google Gears&lt;/a&gt; をインストールすればオフラインでも使えるが、Safari に対応していない（開発中ではある）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;他にも「マニュアルでソートできない」とか細かい不満もあるのだが、こうしてみると、自分にとっての GTD アプリは「思いついたときに、即座に使えること」が重要なのが分かる。&lt;/p&gt;

&lt;h3 id=&#34;web-アプリケーションと-gtd&#34;&gt;Web アプリケーションと GTD&lt;/h3&gt;

&lt;p&gt;そして、上にあげた不満点は &lt;a href=&#34;http://www.rememberthemilk.com/&#34;&gt;Remember The Milk&lt;/a&gt; に限った話ではなく、多かれ少なかれ、&lt;strong&gt;すべての Web アプリケーションに当てはまる&lt;/strong&gt;ものばかりだ。今回、デスクトップ・アプリケーションである &lt;a href=&#34;http://igtd.pl/iGTD/&#34;&gt;iGTD&lt;/a&gt; に乗り換えたのは必然、といえば必然の流れなのかもしれない。&lt;/p&gt;

&lt;p&gt;Web アプリケーションにも利点はある。たとえば、Remember The Milk のメール通知機能は便利なので、これからも「来週控えている用事を忘れないように」といった用途専用に使いつづけるだろう。&lt;/p&gt;

&lt;p&gt;そもそも、Remember The Milk はこういった素朴な TODO 管理、というか備忘メモ的な方が向いているのかもしれない（「そうだ、牛乳買わなきゃ」）。&lt;/p&gt;

&lt;p&gt;いうなれば防御的。&lt;/p&gt;

&lt;p&gt;でも、GTD から受ける印象は、どちらかというと攻撃的だ。積極的にタスクを切りだしては片づけていく。攻撃こそ最大の防御ということか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 を Intel Mac にインストールする方法</title>
      <link>http://www.metareal.org/2007/07/24/postgresql-7-4-11-compilation-failed-on-mac-intel/</link>
      <pubDate>Wed, 25 Jul 2007 04:24:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/07/24/postgresql-7-4-11-compilation-failed-on-mac-intel/</guid>
      <description>&lt;p&gt;理由あって &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; 7.4 を Mac OS X にインストールすることになった。早速、ダウンロードページから手に入る中で最新の 7.4.17 をダウンロードしてインストールしようとするも、エラーが出てコンパイルできない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ./configure
% make
...
gcc -no-cpp-precomp -O2 -fno-strict-aliasing -Wall -Wmissing-prototypes -Wmissing-declarations -I../../../../src/include   -c -o xlog.o xlog.c
In file included from ../../../../src/include/storage/spin.h:50,
                 from xlog.c:35:
../../../../src/include/storage/s_lock.h:543:2: error: #error **PostgreSQL does not have native spinlock support on this platform. To continue the compilation, rerun configure using --disable-spinlocks. However, performance will be poor. Please report this to pgsql-bugs@postgresql.org.**
In file included from ../../../../src/include/storage/spin.h:50,
                 from xlog.c:35:
../../../../src/include/storage/s_lock.h:551: error: conflicting types for ‘slock_t’
../../../../src/include/pg_config_os.h:11: error: previous declaration of ‘slock_t’ was here
make[4]: *** [xlog.o] Error 1
make[3]: *** [transam-recursive] Error 2
make[2]: *** [access-recursive] Error 2
make[1]: *** [all] Error 2
make: *** [all] Error 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに環境は以下の通り。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PostgreSQL 7.4.17 (download)&lt;/li&gt;
&lt;li&gt;Mac OS X 10.4.10&lt;/li&gt;
&lt;li&gt;MacBook Intel Core 2 Duo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;エラーメッセージには、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PostgreSQL does not have native spinlock support on this platform. To continue the compilation, rerun configure using &amp;ndash;disable-spinlocks. However, performance will be poor. Please report this to pgsql-bugs@postgresql.org.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあるので、言われたとおり &lt;code&gt;--disable-spinlocks&lt;/code&gt; オプションつきでコンパイルを試みる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% make clean
% ./configure --disable-spinlocks
...
In file included from ../../../../src/include/storage/spin.h:50,
                 from xlog.c:35:
../../../../src/include/storage/s_lock.h:551: error: conflicting types for ‘slock_t’
../../../../src/include/pg_config_os.h:11: error: previous declaration of ‘slock_t’ was here
make[4]: *** [xlog.o] Error 1
make[3]: *** [transam-recursive] Error 2
make[2]: *** [access-recursive] Error 2
make[1]: *** [all] Error 2
make: *** [all] Error 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やはり駄目だ。該当のエラーはなくなったけど、そのあとのエラーが直らない。&lt;/p&gt;

&lt;p&gt;Google で検索してみると、同様に困っている人も何人かいるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://archives.postgresql.org/pgsql-bugs/2006-08/msg00083.php&#34;&gt;no native spinlock support on os x 10.4.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://archives.postgresql.org/pgsql-ports/2006-01/msg00000.php&#34;&gt;Postgresql7.4.11 compilation failing on Mac Intels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;しかし、解決策は書かれていない（最新版使えよ、ってのはあるけど&amp;hellip;）。&lt;/p&gt;

&lt;p&gt;しょうがないので、無理矢理コンパイルを通すことにした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--- src/include/port/darwin.h.org       2007-07-24 17:15:54.000000000 +0900
+++ src/include/port/darwin.h   2007-07-24 17:15:58.000000000 +0900
@@ -1,8 +1,6 @@
 #define __darwin__     1

-#if defined(__ppc__)
 #define HAS_TEST_AND_SET
-#endif

 #if defined(__ppc__)
 typedef unsigned int slock_t;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ざっとソースコードを眺めた感じ、Intel Mac のチェックが抜けているだけのように思えた（というか、読む気が失せて、そう思い込むことにした）ので、こんな適当な変更でコンパイルしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% make clean
% ./configure
% make
...
All of PostgreSQL successfully made. Ready to install.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;psql&lt;/code&gt; が動作することと、&lt;code&gt;make check&lt;/code&gt; がパスすることは確認ずみ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python: Mac OS X での locale.getpreferredencoding() </title>
      <link>http://www.metareal.org/2007/07/19/problem-with-python-getpreferredencoding-in-trac-mac-os-x/</link>
      <pubDate>Thu, 19 Jul 2007 10:30:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/07/19/problem-with-python-getpreferredencoding-in-trac-mac-os-x/</guid>
      <description>

&lt;p&gt;（追記）この記事に載せているパッチよりも &lt;a href=&#34;http://weblog.metareal.org/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/&#34;&gt;Apple によるロケール周りの変更点を Python 2.5.1 にも適用する&lt;/a&gt;のパッチを使った方がよさそうです。Mac OS X 標準の Python との互換性があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://trac.edgewall.org/wiki/TracInstall&#34;&gt;TracInstall&lt;/a&gt; に従って、Mac OS X で &lt;a href=&#34;http://trac.edgewall.org/&#34;&gt;Trac&lt;/a&gt; を動かそうとしている。&lt;a href=&#34;http://weblog.metareal.org/category/subversion/&#34;&gt;以前試したときは頓挫した&lt;/a&gt;のだが、今回は Python を含む&lt;strong&gt;すべてのライブラリ&lt;/strong&gt;を一からインストールして、じっくりやってみることにした。&lt;/p&gt;

&lt;p&gt;とりあえず、&lt;code&gt;tracd&lt;/code&gt; を起動するところまでは問題なくいったのだけれど、URL にアクセスしてみると早速こんなエラーが。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 406, in dispatch_request
    dispatcher.dispatch(req)
  File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 207, in dispatch
    populate_hdf(req.hdf, self.env, req)
  File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 77, in populate_hdf
    &#39;time&#39;: format_datetime(),
  File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/util/datefmt.py&amp;quot;, line 65, in format_datetime
    return unicode(text, encoding, &#39;replace&#39;)
LookupError: unknown encoding: X-MAC-JAPANESE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;じっくりやってみる、と書いた矢先にくじけそうになりましたが、諦めずに原因を追ってみますね。&lt;/p&gt;

&lt;p&gt;その前に、今回試したバージョンは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 2.5.1&lt;/li&gt;
&lt;li&gt;Trac 0.10.4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h3 id=&#34;ソースコードを読む&#34;&gt;ソースコードを読む&lt;/h3&gt;

&lt;p&gt;スタックトレースから例外の発生箇所は簡単に分かるので、ソースコードを読んでみる (&lt;code&gt;/trac/util/datefmt.py&lt;/code&gt;) 。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def format_datetime(t=None, format=&#39;%x %X&#39;, gmt=False):
    if t is None:
        t = time.time()
    if not isinstance(t, (list, tuple, time.struct_time)):
        if gmt:
            t = time.gmtime(float(t))
        else:
            t = time.localtime(float(t))

    text = time.strftime(format, t)
    encoding = locale.getpreferredencoding() or sys.getdefaultencoding()
    if sys.platform != &#39;win32&#39;:
        encoding = locale.getlocale(locale.LC_TIME)[1] or encoding
        # the above is broken on win32, e.g. we&#39;d get &#39;437&#39; instead of &#39;cp437&#39;
    return unicode(text, encoding, &#39;replace&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回のエラーはビルトイン関数の &lt;code&gt;unicode&lt;/code&gt; が &lt;code&gt;X-MAC-JAPANESE&lt;/code&gt; エンコーディングをサポートしていないのが原因のようだ。&lt;code&gt;X-MAC-JAPANESE&lt;/code&gt; は Mac ユーザにとってはお馴染みの MacJapanese（ほぼ Shift-JIS）のことだろう。たしかにリファレンスの &lt;a href=&#34;http://docs.python.org/lib/standard-encodings.html&#34;&gt;4.8.3 Standard Encodings&lt;/a&gt; を読んでもそれらしきエンコーディングがない。&lt;/p&gt;

&lt;p&gt;となると、考えられる解決方法はふたつ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MacJapanese をサポートするコーデックを追加&lt;/li&gt;
&lt;li&gt;そもそも、&lt;code&gt;locale.getpreferredencoding()&lt;/code&gt; でサポートしていないエンコーディングを返さない。この場合は &lt;code&gt;shift_jis&lt;/code&gt; を返してしまっていい気がする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;まあ、1. が真っ当なんだろうけど、2. でも問題ないというか、むしろ、&lt;code&gt;getpreferredencoding&lt;/code&gt; という名前のメソッドがサポートされていないエンコーディングを返すよりいいんじゃないだろうか。&lt;/p&gt;

&lt;h3 id=&#34;localmodule-c-を変更&#34;&gt;_localmodule.c を変更&lt;/h3&gt;

&lt;p&gt;とりあえず、Python 2.5.1 の &lt;code&gt;Modules/_localemodule.c&lt;/code&gt; で、&lt;code&gt;X-MAC-JAPANESE&lt;/code&gt; の場合は &lt;code&gt;shift_jis&lt;/code&gt; を返すように変更してみた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--- Modules/_localemodule.c.orig        2007-07-19 02:47:21.000000000 +0900
+++ Modules/_localemodule.c     2007-07-19 03:17:28.000000000 +0900
@@ -426,6 +426,7 @@
     case kCFStringEncodingMacCyrillic: return &amp;quot;mac-cyrillic&amp;quot;;
     case kCFStringEncodingMacTurkish: return &amp;quot;mac-turkish&amp;quot;;
     case kCFStringEncodingMacIcelandic: return &amp;quot;mac-icelandic&amp;quot;;
+    case kCFStringEncodingMacJapanese: return &amp;quot;shift_jis&amp;quot;;
     /* XXX which one is mac-latin2? */
     }
     if (!name) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに、このへんのコードでは Mac OS X のフレームワークである &lt;a href=&#34;http://developer.apple.com/corefoundation/&#34;&gt;Core Foundation&lt;/a&gt; が利用されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devworld.apple.com/documentation/CoreFoundation/Reference/CFStringRef/Reference/reference.html&#34;&gt;CFString Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://homepage.mac.com/mkino2/core/index.html&#34;&gt;CoreFoundation の秘密&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>