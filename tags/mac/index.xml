<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mac on METAREAL</title>
    <link>https://ishikawa.github.io/tags/mac/</link>
    <description>Recent content in mac on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Tue, 09 Dec 2008 03:37:00 +0900</lastBuildDate><atom:link href="https://ishikawa.github.io/tags/mac/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Safari で開いているページのリンクを Evernote クライアントに送る</title>
      <link>https://ishikawa.github.io/2008/12/09/copy-link-to-evernote-client-applescript/</link>
      <pubDate>Tue, 09 Dec 2008 03:37:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2008/12/09/copy-link-to-evernote-client-applescript/</guid>
      <description>最近、プログラミング関係のまとめやインストール手順の記録といったものには Evernote を利用している。
画像中の手書き文字認識や「脳を拡張する」といった誇大広告ばかりが取り沙汰されるサービスだが、単純にメモツールとして優れており、特に Mac クライアントと iPhone クライアントの出来がすばらしい。
Evernote: Mac クライアント プログラミング関係の話題をノートにまとめていると、興味深いページへのリンクを多く埋め込むことになる。ノートの編集は Mac のクライアントで行うことが多いのだが、この作業がけっこう面倒だ：
 Safari で開いているページのタイトルをコピーして、Evernote クライアントにペースト コピーしたタイトルを選択 リンクを追加するためのシートを表示 Safari で開いているページの URL をコピーして、Evernote クライアントにペースト OK ボタンをクリック  この手順を毎回、繰り返さなければならない。慣れれば無意識に出来るような単純作業ではあるが、単純作業なら自動化した方がいい。
AppleScript Mac で自動化といえば AppleScript の出番なのだが、残念ながら Mac 向け Evernote クライアントの AppleScript 対応は今回の要件には不十分である。そのため、今回は System Events による GUI スクリプティングにより、上記手順のキー操作やボタンクリックをエミュレートすることにした。
-- EvernoteCopyLink.applescript -- Copy title and URL in the front most window of Safari to Evernote with link -- Author: Takanori Ishikawa on copyLinkToEvernote(theTitle, theURL) tell application &amp;quot;System Events&amp;quot; -- copy &amp;amp;amp; paste set the clipboard to theTitle as text keystroke &amp;quot;v&amp;quot; using command down tell process &amp;quot;Evernote&amp;quot; -- Select pasted text -- Note 1: &#39;ASCII character 28&#39; means &#39;move left&#39;.</description>
    </item>
    
    <item>
      <title>Python でプロパティリストを読み込む</title>
      <link>https://ishikawa.github.io/2008/08/04/propertylist-parser-for-python/</link>
      <pubDate>Tue, 05 Aug 2008 12:21:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2008/08/04/propertylist-parser-for-python/</guid>
      <description>Python でプロパティリストを読み込み、オブジェクトに変換するライブラリ plist_parser を書いた。GitHub で公開している。Python 2.4 以降で動作確認済み。ただし、対応するフォーマットは XML のみで、書き込みにも対応していない。
使い方は至って単純だ。たとえば、以下のプロパティリストは iTunes Music Library.xml から一部抜粋したものだが、
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;Track ID&amp;lt;/key&amp;gt; &amp;lt;integer&amp;gt;4154&amp;lt;/integer&amp;gt; &amp;lt;key&amp;gt;Artist&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;Megadeth&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;Name&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;Architecture Of Aggression&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;Date Added&amp;lt;/key&amp;gt; &amp;lt;date&amp;gt;2008-06-23T12:20:17Z&amp;lt;/date&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt;  このプロパティリストが music.xml という名前で保存されているとして、このファイルを読み込んでオブジェクトに変換するコードは以下のとおり。
from plist_parser import XmlPropertyListParser, \ PropertyListParseError f = open(&#39;music.plist&#39;) try: print XmlPropertyListParser().parse(f) # =&amp;gt; # { # &#39;Date Added&#39;: datetime.datetime(2008, 6, 23, 12, 20, 17), # &#39;Track ID&#39;: 4154, # &#39;Name&#39;: &#39;Architecture Of Aggression&#39;, # &#39;Artist&#39;: &#39;Megadeth&#39; # } except PropertyListParseError: raise finally: f.</description>
    </item>
    
    <item>
      <title>Mac の Python をビルドするときに GNU Readline ライブラリを有効にする</title>
      <link>https://ishikawa.github.io/2008/04/11/building-readline-enabled-python-on-mac/</link>
      <pubDate>Fri, 11 Apr 2008 10:05:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2008/04/11/building-readline-enabled-python-on-mac/</guid>
      <description>Mac OS X では GNU の Readline ライブラリがインストールには含まれておらず、Readline 互換の Libedit というライブラリへのシンボリックリンクとなっている（こうなっている理由はライセンス上の問題からだと思われる。GNU の Readline ライブラリは GPL で、Libedit は BSD ライセンスだ）。
しかし、これが原因で Readline 対応のプログラムがコンパイルできない、コンパイルできてもヒストリ機能などが使えない、といった問題がしばしば起こる。
Python は後者の例で、configure スクリプトはちゃんと readline ライブラリを認識し make も問題なく通るのだが、実際には Readline ライブラリが無効になったバイナリがインストールされてしまう。
% ./configure ... checking for readline in -lreadline... yes checking for rl_callback_handler_install in -lreadline... yes checking for rl_pre_input_hook in -lreadline... yes checking for rl_completion_matches in -lreadline... no ... % make ... % find . -name readline.so # readline.so が出来ていない  ヒストリ機能やキャレット移動のショートカットが使えないのは、やはり不便だ。これはなんとかしたい。</description>
    </item>
    
    <item>
      <title>Apple によるロケール周りの変更点を Python 2.5.2 にも適用する</title>
      <link>https://ishikawa.github.io/2008/04/02/fixup-python-locale-problems-by-apple-darwin-patch-for-2-5-2/</link>
      <pubDate>Wed, 02 Apr 2008 10:23:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2008/04/02/fixup-python-locale-problems-by-apple-darwin-patch-for-2-5-2/</guid>
      <description>最近 Python を 2.5.2 にアップデートして同じ作業を繰り返したことと、Apple によるロケール周りの変更点を Python 2.5.1 にも適用するのときはパッチの適用方法について言及がなかったこともあり、そのへんも含めて手順をまとめておく。
まずは Python 2.5.2 をダウンロードし展開。
 % curl -LO http://www.python.org/ftp/python/2.5.2/Python-2.5.2.tar.bz2 % tar xjf Python-2.5.2.tar.bz2  Apple によるロケール周りの変更点を Python 2.5.1 にも適用するで公開したパッチをあてる。
 % curl -LO http://www.metareal.org/wp-content/uploads/2007/09/python251_apple_locale.txt % cd Python-2.5.2 % patch -p2 -d . &amp;lt; ../python251_apple_locale.txt  最後の patch コマンドによりパッチを適用している。-p2 オプションの指定をしないとパッチがうまく適用されないので注意。あとは通常どおり confgure, make すればいい。
 % ./configure % make % sudo make install  2.5.3 がリリースされたら、また同じパターンで記事が一本できるな。
【追記】こうしてインストールされた Python インタプリタではヒストリ機能などが有効になっていないかもしれない。その場合は Mac の Python をビルドするときに GNU Readline ライブラリを有効にするをどうぞ。</description>
    </item>
    
    <item>
      <title>ffmpeg を MacPorts でインストール</title>
      <link>https://ishikawa.github.io/2007/12/09/install-ffmpeg-using-macports/</link>
      <pubDate>Sun, 09 Dec 2007 09:57:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/12/09/install-ffmpeg-using-macports/</guid>
      <description>動画の変換がやりたくて Mac に ffmpeg をインストールした。そのときのメモ。
MacPorts でインストールするのがよさげ。variants のおかげで、H.264 や AAC を有効にするのも簡単だ。
% sudo port install x264 % sudo port install faac % sudo port install faad2 % sudo port install a52dec % sudo port install ffmpeg +faac +faad +a52 +x264  関連するライブラリを先にインストールして、+faac のように指定してやるだけ。</description>
    </item>
    
    <item>
      <title>Mail.app や iGTD の vacuum を cron で自動化する</title>
      <link>https://ishikawa.github.io/2007/12/08/vacuum-analyze-sqlite-automatically-by-cron/</link>
      <pubDate>Sat, 08 Dec 2007 10:00:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/12/08/vacuum-analyze-sqlite-automatically-by-cron/</guid>
      <description>Warning
この方法でデータベースを VACUUM すると、Mail.app で問題が起こるようだ。Mail.app を起動中に cron が実行されるとメールを送信できない、下書き保存できない、などの問題があった。というわけで、この方法は使わないか、問題が起こらないように改良する必要がある。
「Mail.app を vacuum して高速化」や「iGTD も vacuum すると速くなる」でも書いたように、Mac のアプリケーションのいくつかは、ターミナルから VACUUM ANALYZE という SQL を実行することで高速に動作するようになる。
しかし、このコマンドを毎回手動で実行するのは面倒なので、自動化することにした。自動化、といっても大層なものではなく crontab にコマンドを書いておき、毎日実行されるようにしただけ。
% **crontab -e** 0 15 * * * sqlite3 ~/Library/Application\ Support/iGTD/iGTD.sql &amp;quot;vacuum analyze&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 0 15 * * * sqlite3 ~/Library/Mail/Envelope\ Index &amp;quot;vacuum analyze&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1  sqlite コマンドを直接書いているので見苦しいが、別スクリプトにした場合の管理を考えると面倒だった。ここでは標準エラー出力を /dev/null に捨てている（ただし、アプリケーションがデータベースをロックしていると、VACUUM ANALYZE は &amp;ldquo;database is locked&amp;rdquo; というエラーで即座に終了する）。</description>
    </item>
    
    <item>
      <title>iGTD も vacuum すると速くなる</title>
      <link>https://ishikawa.github.io/2007/12/05/optimize-the-igtd-database/</link>
      <pubDate>Thu, 06 Dec 2007 08:08:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/12/05/optimize-the-igtd-database/</guid>
      <description>日々の ToDo 管理には iGTD を愛用している。だが、最近、目に見えて動作が重くなってしまった。
おそらく、完了したタスクも削除されることはなく、ずっと溜まっているのが原因だろう。iGTD は内部のデータベースとして SQLite を使っているので、Mail.app を vacuum して高速化と同じ方法で高速化できる。
VACUUM ANALYZE 手順は簡単で、ターミナルから以下のコマンドを実行するだけだ（iGTD が起動中なら終了する必要があるかもしれない）。
% sqlite3 ~/Library/Application\ Support/iGTD/iGTD.sql &amp;quot;vacuum analyze&amp;quot;  このコマンドはデータベースから不要な領域を回収し、統計情報を更新することで実行速度を向上させる。これだけで体感的にはかなり速くなった。
参考  SQLite Query Language: ANALYZE SQLite Query Language: VACUUM  </description>
    </item>
    
    <item>
      <title>MacBook に内蔵された iSight を Flash から利用できるようにする</title>
      <link>https://ishikawa.github.io/2007/10/10/setting-flash-camera-with-macbook-isight/</link>
      <pubDate>Thu, 11 Oct 2007 05:20:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/10/10/setting-flash-camera-with-macbook-isight/</guid>
      <description>Flash の flash.media.Camera オブジェクトを使うと、Webcam からの入力をキャプチャすることができる。
しかし、そのままだと MacBook に内蔵された iSight では映像をとることができない。どうやら、設定を変更する必要があるようだ。
 ページに表示された Flash を右クリックして「Adobe Flash Player 設定」を開く。 左下のアイコンから、一番右のカメラをクリック カメラの種類を選択するプルダウンメニューが表示されるので「USB Video Class Video」を選択  これで iSight からの入力を受け取れるようになる。
ちなみに、ここまでして見たかったページは Quasimondo : Incubator : Processing : Minority Cube、Webcam に映した手の動きでキューブを回せる、というデモ。実際に操作してみると、不思議な満足感がある。面白い。</description>
    </item>
    
    <item>
      <title>Apple によるロケール周りの変更点を Python 2.5.1 にも適用する</title>
      <link>https://ishikawa.github.io/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/</link>
      <pubDate>Sun, 09 Sep 2007 11:49:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/09/09/fixup-python-locale-problems-by-apple-darwin-patch/</guid>
      <description>Python: Mac OS X での locale.getpreferredencoding() では、Mac OS X に Python 2.5.1 をソースコードからインストールした場合に発生する、ロケール周りの問題点について書いた。
要約すると、
 locale.getpreferredencoding() の返すエンコーディングが X-MAC-JAPANESE になってしまう Python では X-MAC-JAPANESE がデフォルトではサポートされていないため、locale.getpreferredencoding() を利用したエンコード、デコードができない _localmodule.c を変更して、X-MAC-JAPANESE の代わりに shift_jis を返すようにして解決  という内容だった。
しかし、しばらくして「っき」さんよりコメントをいただいた。
 上記のlocale.getpreferredencoding()の返り値ですが、10.4.9に含まれているOS標準のPython 2.3.5では、デフォルトがUS-ASCIIになっていて、LANG環境変数も見てくれます。
これは、Appleがパッケージングの際に、
http://www.opensource.apple.com/darwinsource/10.4.9.x86/python-16.1.3/
以下に含まれているパッチを適用して、ロケール周りのdefined(APPLE)や ‘darwin’ を無効にしているからです。
 たしかに、前回の記事では Mac OS X に標準でバンドルされている Python にまで考えが及んでいなかった。「っき」さんの指摘通り、互換性のことも考慮すると、Apple のパッケージングを見習うのがよさそうだ。
というわけで、Apple のパッチを適用した Python 2.5.1 のパッチファイルをアップしておく。以降は、このパッチファイルを作成するまでの詳細である。
Mac OS X に標準でパッケージングされている Python Apple Developer Connection の Open Source ページでは Mac OS X のベースとなっている Darwin のソースコードが公開されている。現時点での最新版は Mac OS X 10.</description>
    </item>
    
    <item>
      <title>Mail.app を vacuum して高速化</title>
      <link>https://ishikawa.github.io/2007/08/23/optimize-the-apple-mail-app-database/</link>
      <pubDate>Fri, 24 Aug 2007 05:38:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/08/23/optimize-the-apple-mail-app-database/</guid>
      <description>SQLite の vacuum コマンドで Mail.app を高速化する。ターミナルで、
% cd ~/Library/Mail/; sqlite3 Envelope\ Index &amp;quot;vacuum;&amp;quot;  Automator で自動化する Mail Vacuum なんてのもある。
個人的には、以下のような AppleScript を、
tell application &amp;quot;Terminal&amp;quot; activate do script &amp;quot;cd ~/Library/Mail/; sqlite3 Envelope\\ Index \&amp;quot;vacuum;\&amp;quot;&amp;quot; end tell  Optimize Mail.app.scpt として保存し、QuickSilver から実行できるようにしている。</description>
    </item>
    
    <item>
      <title>iGTD と QuickSilver の連携</title>
      <link>https://ishikawa.github.io/2007/08/15/about-igtd-quicksilver-plugin/</link>
      <pubDate>Wed, 15 Aug 2007 05:18:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/08/15/about-igtd-quicksilver-plugin/</guid>
      <description>iGTD のインストール用ディスクイメージには QuickSilver と連携するためのプラグインが同梱されている（参考：iGTD &amp;amp; Quicksilver）。
このプラグインで追加される Put into iGTD inbox を使えば、QuickSilver で選択したものは何でも（テキスト、ファイル、ブックマーク、あるいはアプリケーションも）iGTD の inbox に放り込むことが可能だ。QuickSilver でテキストを入力すれば、それがそのままタスクの名前になるし、ファイルやブックマークはタスクにリンクが付随したかたちで登録される。
また、タスクを登録するときは、あらかじめ決められたフォーマットに従うことで、たとえば、登録先のコンテキストやプロジェクトを指定することができる。
以下に、使用できるフォーマットをまとめた。
 コンテキストを指定する    @development Remove a bug with link field @dev Remove a bug with link field    プロジェクトを指定する    A nice new feature [igtd] A nice new feature [ig]    ノートを指定する    @dev A nice new feature [igtd]: quicksilver integration @dev A nice new feature**: quicksilver integration** [igtd]    優先度を指定する    @dev A nice new feature**!</description>
    </item>
    
    <item>
      <title>Mac の GTD アプリ、iGTD を試してみた (2)</title>
      <link>https://ishikawa.github.io/2007/08/11/review-my-igtd-experience/</link>
      <pubDate>Sat, 11 Aug 2007 08:59:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/08/11/review-my-igtd-experience/</guid>
      <description>© Takanori Ishikawa, Some rights reserved
前回書いたように、Remember The Milk から iGTD に乗り換えた。
数日使ってみて、コンテキスト（背景）には「仕事」「プライベート」の二種類、そして、三つのプロジェクトを登録してある（シンプルな人生だ）。段々と日常的なワークフローに組み込まれつつある感じ。いまのところ全般的な使い勝手はいい。
もっとも、最初から順風満帆だったわけではなく、最初使ってみたときは戸惑う部分もあった。ヘルプを読むまで分からなかった「直感的に」使えなかった部分をまとめてみる。
 タスクを手動で並び替える。タスクを名前や優先度で並び替えるのは簡単にできる。その項目名をクリックするだけだ。しかし、手動で並び替えをしようとタスクをドラッグ＆ドロップしてもできない。メニューの「View」&amp;gt;「Toggle natural sorting」を選択すると、タスクをドラッグ＆ドロップで並び替えできるようになる（Sorting tasks）。 完了したタスクが表示されないようにする。完了したタスクのチェックボックスをチェックしても、タスクは消えるわけじゃない。タスクの「掃除」をするまでは未完了のまま残ることになる。手動で「Tasks」&amp;gt;「Clean up」を実行するか。自動的に実行されるように、環境設定で設定しておこう（Cleaning up）。  ふたつしかない。荒削りな部分もあるが、UI はまとまっていると思う。
ちょっとした不満 これらはヘルプを読んでも片づかなかった不満。
 フォントサイズ Large だと Priority の表示がずれてしまう 検索 表示中のタスクからしか検索できない（すべてひっくるめて大域的に検索できない） 並び替え プロジェクトやアーカイブ表示で手動による並び替えができない アーカイブ アイデアや興味深いリンクやファイル、といったタスク以外の諸々をまとめておけるアーカイブ。是非欲しかった機能だが、まだまだ発展途上。並び替えができないのも痛いが、アイデアがタスクになったとき（「今日は、このアイデアやってみよう」）に、アーカイブからタスクに移動できない アイコン かわいくない  最後に やはり、デスクトップ・アプリケーションの強みなのだが、
 速い。タスクの粒度がちょっと大きいかなー、と思ったらサクサク分割していける。 常駐しやすい。ひとつの Web アプリケーションをずっと表示している、というのは稀だ。  この二点は GTD アプリケーションとしては重要な反面、Web アプリケーションではなかなか得難いのではないか、と思う。</description>
    </item>
    
    <item>
      <title>Mac の GTD アプリ、iGTD を試してみた</title>
      <link>https://ishikawa.github.io/2007/08/10/igtd-first-impression/</link>
      <pubDate>Fri, 10 Aug 2007 05:29:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/08/10/igtd-first-impression/</guid>
      <description>© Takanori Ishikawa, Some rights reserved
これまで TODO 管理には Remember The Milk を愛用していた。
ユーザーインターフェースはシンプルかつ高機能だし、タスクに期限を設定するとメールやメッセンジャーで通知してくれる。
この機能が非常に便利で重宝していた（かつて、checkpad から移行した理由でもある）。そして、なにより名前が洒落ている。そうだ、牛乳買わなきゃ。
でも、今日、iGTD に乗り換えた。何故か？
何故、Remember The Milk では駄目になったのか  重い。特にログイン後、タスクを表示するときが重い。 パスワード入力が面倒。クッキーは頻繁に削除するので自動ログインは使っていない。もちろん、Safari が自動入力してくれるのだが、ログイン画面で Enter を毎回押すのは、想像する以上の精神的負担だ。 オンラインでないと使えない。Google Gears をインストールすればオフラインでも使えるが、Safari に対応していない（開発中ではある）。  他にも「マニュアルでソートできない」とか細かい不満もあるのだが、こうしてみると、自分にとっての GTD アプリは「思いついたときに、即座に使えること」が重要なのが分かる。
Web アプリケーションと GTD そして、上にあげた不満点は Remember The Milk に限った話ではなく、多かれ少なかれ、すべての Web アプリケーションに当てはまるものばかりだ。今回、デスクトップ・アプリケーションである iGTD に乗り換えたのは必然、といえば必然の流れなのかもしれない。
Web アプリケーションにも利点はある。たとえば、Remember The Milk のメール通知機能は便利なので、これからも「来週控えている用事を忘れないように」といった用途専用に使いつづけるだろう。
そもそも、Remember The Milk はこういった素朴な TODO 管理、というか備忘メモ的な方が向いているのかもしれない（「そうだ、牛乳買わなきゃ」）。
いうなれば防御的。
でも、GTD から受ける印象は、どちらかというと攻撃的だ。積極的にタスクを切りだしては片づけていく。攻撃こそ最大の防御ということか。</description>
    </item>
    
    <item>
      <title>PostgreSQL 7.4 を Intel Mac にインストールする方法</title>
      <link>https://ishikawa.github.io/2007/07/24/postgresql-7-4-11-compilation-failed-on-mac-intel/</link>
      <pubDate>Wed, 25 Jul 2007 04:24:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/07/24/postgresql-7-4-11-compilation-failed-on-mac-intel/</guid>
      <description>理由あって PostgreSQL 7.4 を Mac OS X にインストールすることになった。早速、ダウンロードページから手に入る中で最新の 7.4.17 をダウンロードしてインストールしようとするも、エラーが出てコンパイルできない。
% ./configure % make ... gcc -no-cpp-precomp -O2 -fno-strict-aliasing -Wall -Wmissing-prototypes -Wmissing-declarations -I../../../../src/include -c -o xlog.o xlog.c In file included from ../../../../src/include/storage/spin.h:50, from xlog.c:35: ../../../../src/include/storage/s_lock.h:543:2: error: #error **PostgreSQL does not have native spinlock support on this platform. To continue the compilation, rerun configure using --disable-spinlocks. However, performance will be poor. Please report this to pgsql-bugs@postgresql.org.** In file included from ../../../../src/include/storage/spin.h:50, from xlog.</description>
    </item>
    
    <item>
      <title>Python: Mac OS X での locale.getpreferredencoding() </title>
      <link>https://ishikawa.github.io/2007/07/19/problem-with-python-getpreferredencoding-in-trac-mac-os-x/</link>
      <pubDate>Thu, 19 Jul 2007 10:30:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/07/19/problem-with-python-getpreferredencoding-in-trac-mac-os-x/</guid>
      <description>（追記）この記事に載せているパッチよりも Apple によるロケール周りの変更点を Python 2.5.1 にも適用するのパッチを使った方がよさそうです。Mac OS X 標準の Python との互換性があります。
TracInstall に従って、Mac OS X で Trac を動かそうとしている。以前試したときは頓挫したのだが、今回は Python を含むすべてのライブラリを一からインストールして、じっくりやってみることにした。
とりあえず、tracd を起動するところまでは問題なくいったのだけれど、URL にアクセスしてみると早速こんなエラーが。
Traceback (most recent call last): File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 406, in dispatch_request dispatcher.dispatch(req) File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 207, in dispatch populate_hdf(req.hdf, self.env, req) File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/web/main.py&amp;quot;, line 77, in populate_hdf &#39;time&#39;: format_datetime(), File &amp;quot;/path/to/trac/lib/python2.5/site-packages/trac/util/datefmt.py&amp;quot;, line 65, in format_datetime return unicode(text, encoding, &#39;replace&#39;) LookupError: unknown encoding: X-MAC-JAPANESE  じっくりやってみる、と書いた矢先にくじけそうになりましたが、諦めずに原因を追ってみますね。
その前に、今回試したバージョンは、
 Python 2.</description>
    </item>
    
    <item>
      <title>Safari の履歴検索がすごく便利です</title>
      <link>https://ishikawa.github.io/2007/06/26/safari-spotlighting-web-history/</link>
      <pubDate>Wed, 27 Jun 2007 08:06:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/06/26/safari-spotlighting-web-history/</guid>
      <description>上のスクリーンショット（クリックすると拡大した画像に飛びます）を見れば、一目瞭然。Safari は履歴も検索できる。
これで、「あー、あの Web ページ、はてブか何かで見たんだけど、どこだっけなー」なんて悩みともおさらばできます。て、普通にみんな使ってるんだろうか、この履歴検索。
検索窓が、普段意識しない場所（ブックマークウインドウの下側）にあるものだから、いまのいままで気づかなかったよ。</description>
    </item>
    
    <item>
      <title>.Mac の同期機能がすごく便利です</title>
      <link>https://ishikawa.github.io/2007/06/16/sync-different-mac-with-dotmac/</link>
      <pubDate>Sun, 17 Jun 2007 08:02:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/06/16/sync-different-mac-with-dotmac/</guid>
      <description>MacBook の電源を会社に置いて帰ってしまった。
電源は机の下に隠れているため、急いでいたり、考えごとをしていたりすると、すぐに忘れてしまうのだ。
自宅サーバの iBook G4 とは電源の種類が異なる（MacBook の電源は MagSafe コネクタ）ため、その電源を流用することはできない。しかたがないので、テレビ台の下の暗がりで働いていた自宅サーバの iBook G4 をひっぱりだして、作業用ノートパソコンになってもらった。
.Mac の同期機能を試してみる こういうときに面倒なのが、作業環境の構築。
なにはともあれ、ブラウザのブックマークを移さないといけない。オンラインブックマークサービスも使っているけど、毎日使うような URL はブラウザのブックマークに登録してあるから。
今回のケースでは、いつも使っている MacBook が手許にあるので、ふたつの Mac をローカルエリアで接続して、データを移せばいいし、たぶん、それが一番簡単 &amp;hellip; なのだが、せっかくなので .Mac の同期機能を試してみることにした。
興味本位と、@mac.com のアドレスほしさに購入した .Mac。こういうときにでも役立てないともったいないじゃないか。
システム環境設定で .Mac の同期を有効にする .Mac の同期機能を使うには、あらかじめ同期したい Mac で、この機能を有効にしておかなくちゃいけない。設定はシステム環境設定から行う。
システム環境設定にある「.Mac」をクリックして「同期」タブをクリック、ここで「.Mac と同期」チェックボックスを有効にして、その下のリストから同期したいものをチェックする。
すべての Mac で、この設定をして「いますぐ同期」ボタンをクリックすれば、同期が開始される。
同期するデータに他の Mac との食い違いがあった場合には、コンピューター、あるいは .Mac のものを置き換えるか、追加するか、といった選択ができるので、重要なデータを消してしまった、なんてことは起こりにくいだろう。
キーチェーンも同期できる ここまでだと普通のブックマーク共有で終わってしまうんだが、便利だなー、と思ったのはキーチェーンも同期できること。いろんなオンラインサービスのログイン情報なんかは、ほとんどキーチェーンで管理しているので、すくなくとも Web のブラウジングに関しては、Mac が変わっても困ることはなさそうだ。
それに、一時作業用の Mac でブックマークやパスワードを追加しても、いつもの Mac に反映できるってことか。ちょっと .Mac の価値が分かったかもしれない。</description>
    </item>
    
    <item>
      <title>Terminal で作業中のディレクトリを Finder で開く</title>
      <link>https://ishikawa.github.io/2007/05/31/open-current-directory-in-finder/</link>
      <pubDate>Thu, 31 May 2007 09:02:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/05/31/open-current-directory-in-finder/</guid>
      <description>Terminal で作業中のディレクトリを Finder で表示させたいときがある。そういうときは、
% open .  </description>
    </item>
    
    <item>
      <title>AirMac Extreme</title>
      <link>https://ishikawa.github.io/2007/05/27/meet-the-airmac-extreme/</link>
      <pubDate>Sun, 27 May 2007 10:22:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/05/27/meet-the-airmac-extreme/</guid>
      <description>家の無線 LAN を AirMac Express から AirMac Extreme に変えてみた。特にこれといった動機はなくて、単に新しいモノを試してみたかっただけなんだけど、AirTunes 機能がないのは参ったなあ。おかげで iPod Hi-Fi が宝の持ち腐れ。どうするかは考え中。
これのブログを動かしているサーバも無線でつないでいるので（LAN ケーブルだと邪魔）、しばらくのあいだ、サーバが停まったままだった。AirMac Extreme で無線 LAN をはじめるのは簡単なのだけど、NAT やらを設定するのが面倒臭かった次第。
しかし、通信範囲広いね。Skype で会話しながら実験してみたけど、家から出て 2 ブロック先くらいまでは行けた。</description>
    </item>
    
    <item>
      <title>QuickSilver でスクリーンセイバーを起動</title>
      <link>https://ishikawa.github.io/2007/03/28/launch-screen-saver-from-quicksilver/</link>
      <pubDate>Thu, 29 Mar 2007 01:21:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/03/28/launch-screen-saver-from-quicksilver/</guid>
      <description>わたしは不器用なので、スクリーンセイバーをホットコーナーから起動しようとするたびに失敗する（スクリーンセイバーが起動したとたんに、微妙にマウスを動かしてしまって、起動が解除されてしまう）。
QuickSilver から起動できたら便利だなと思って、スクリーンセイバーを起動する AppleScript を書いて、~/Library/Scripts/ に置いてある。
tell application &amp;quot;Finder&amp;quot; open application file &amp;quot;/System/Library/Frameworks/ScreenSaver.framework/Resources/ScreenSaverEngine.app&amp;quot; as POSIX file end tell  ホットキーにも登録してみたが、いちいち QuickSilver を起動してタイプする方が性にあっているようだ。</description>
    </item>
    
    <item>
      <title>OpenCV 1.0.0 を Mac OS X 10.4 にインストール</title>
      <link>https://ishikawa.github.io/2007/03/27/opencv-on-mac-os-x-tiger/</link>
      <pubDate>Wed, 28 Mar 2007 01:18:00 +0900</pubDate>
      
      <guid>https://ishikawa.github.io/2007/03/27/opencv-on-mac-os-x-tiger/</guid>
      <description>物体認識もできる画像処理ライブラリ OpenCV 1.0.0 を Mac OS X 10.4 にてコンパイルしてみた。
OpenCV のインストール まずは、SourceForge から opencv-1.0.0.tar.gz をダウンロードして解凍。
% tar xvzf opencv-1.0.0.tar.gz % mkdir build % cd build/  libjpeg や libpng がないと JPEG, PNG 画像を扱えないので、DarwanPorts でいれたものを使うように configure
% ../configure CPPFLAGS=&amp;quot;-I/opt/local/include&amp;quot; LDFLAGS=&amp;quot;-L/opt/local/lib&amp;quot; % make  案の定、エラーがでる。
collect2: ld returned 1 exit status make[4]: *** [_cv.la] Error 1 make[3]: *** [all-recursive] Error 1 make[2]: *** [all-recursive] Error 1 make[1]: *** [all-recursive] Error 1 make: *** [all] Error 2  なんか、python のラッパー周辺が原因っぽいので外してコンパイル。</description>
    </item>
    
  </channel>
</rss>
