<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on METAREAL</title>
    <link>https://metareal.blog/tags/javascript/</link>
    <description>Recent content in javascript on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Wed, 24 Dec 2008 01:06:00 +0900</lastBuildDate>
    
	<atom:link href="https://metareal.blog/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WEB&#43;DB PRESS Vol.48</title>
      <link>https://metareal.blog/2008/12/24/web-db-press-vol48/</link>
      <pubDate>Wed, 24 Dec 2008 01:06:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/12/24/web-db-press-vol48/</guid>
      <description>古谷楽人氏より WEB+DB PRESS Vol.48 (amazon.co.jp) を献本いただきました。ありがとうございます。わたしは当雑誌、というか雑誌全般の熱心な読者ではないのですが（ごめんなさい）、ひさしぶりの技術系雑誌を楽しく読ませてもらいました。
WEB+DB PRESS Vol.48 で氏は「[最速]JavaScript エンジン徹底比較」と題して、最近のブラウザ事情に聡いプログラマなら気になるであろう、最新 JavaScript エンジンの比較と検証記事を執筆されています。以下では、記事内容の簡単な紹介と一読した感想などを書いていきます。
[最速]JavaScript エンジン徹底比較 （ここから文体をいつもどおりに戻して&amp;hellip;）記事は三章から構成されており、それぞれの章題は：
 JavaScript エンジンの比較 SquirrelFish Extreme / WebKit の最適化手法 注目の Google Chrome に搭載された V8  である。
章題からも推測できるように、第一章が複数ベンチマークスイートによる各 JavaScript エンジンのパフォーマンス比較、第二章と第三章ではコンパイラと仮想機械の一般的な説明から始まり、WebKit の SquirrelFish Extreme、および Google の V8 が用いる最適化手法について多くのページが割かれている。
個々のトピックについては WEB 上にも詳細に解説されたサイトがあるものの、雑誌という紙媒体で、こうして一本にまとめられた情報は珍しいのではないだろうか&amp;hellip;って、普段、雑誌を読まない人が書いても説得力に乏しい。スミマセン。もっとも、珍しかろうが珍しくなかろうが、日本語で読める貴重な情報源のひとつであることに変わりはない。 特に、SquirrelFish Extreme で採用されている Polymorphic Inline Cache (PIC) や V8 の高速なプロパティ・アクセスを実現するための Hidden Class の解説は、現代的な動的言語の裏舞台を知る、という意味で興味深い。たとえ、言語処理系の実装詳細に興味がなくとも、普段使っている道具がどのように作られているかを知ることは益になるだろう。
最後に 今回、ひさしぶりに技術系雑誌を読んでみて、プロのライターと編集者による情報のパッケージングと、紙という媒体とレイアウトには、他のものには代えがたい価値がある、と感じた。腰を落ち着けて、プログラミングのさまざまなトピックスに触れるというのは、やはり、ワクワクする体験だ。</description>
    </item>
    
    <item>
      <title>Google Chrome に搭載されたオープンソースの JavaScript エンジン &#34;v8&#34; を試す</title>
      <link>https://metareal.blog/2008/09/03/getting-started-with-v8-google-open-source-javascript-engine/</link>
      <pubDate>Wed, 03 Sep 2008 09:28:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/09/03/getting-started-with-v8-google-open-source-javascript-engine/</guid>
      <description>その発表から世間を騒がせた、Google の Web ブラウザ Chrome が遂に公開された。
Mac ユーザなうえに、日々の Web ブラウジングは Safari と iPhone で満足していることもあり、Chrome 自体への興味は薄い。しかし、オープンソースの JavaScript エンジンも独自開発している、となると話は別だ。しかも、Strongtalk や HotSpot Java VM の開発者が関わっている、というのだから俄然興味が湧いてくる（参考記事）。
Google が開発、公開している JavaScript 処理系は、その名も v8。
v8 の特徴 では、v8 には既存の処理系に比べて、どのような利点があるのだろうか。Google がわざわざ独自に開発し、Chrome という重要なプロダクトに搭載して公開するくらいだから、そこには他の処理系では達成できないアドバンテージがあるはずである。
Google Code で公開されている文書 Design Elements から概観をつかんでみよう。
オブジェクトのプロパティへのアクセスが高速 JavaScript ではオブジェクトのプロパティを自由に追加・削除できる。
これを実現するためには、ハッシュ表や二分木といった辞書による実装が一般的だが、そうするとプロパティにアクセスするたびに辞書を検索しなくてはいけない。
v8 では hidden class という実装テクニックを用いることにより、オブジェクトのプロパティへのアクセス方法が、オブジェクトの格納されているメモリのオフセットへのアクセスとなる。そのため、無駄な検索を省くことができ、高速なアクセスを実現している。
動的なマシンコード生成 JavaScript のコードは最初に実行されるときにマシンコードに変換される。バイトコードやインタプリタはない。また、プロパティへのアクセスは特別扱いされ、インライン・キャッシュという Smalltalk 実装系由来の技法が使われているらしい（参考：Efficient Implementation of the Smalltalk-80 System）
効率的なガベージコレクション v8 のガベージコレクションの特徴は以下のとおりである：
 stop-the-world ガベージコレクション中はプログラムが停止する 世代別ガベージコレクション 一度のガベージコレクションではオブジェクトの一部のみを検査することにより、プログラム停止時間を短縮 &amp;ldquo;保守的&amp;quot;ではない このため、未使用のオブジェクトをポインタと判定してしまい、メモリリークすることがない メモリ・コンパクションができる メモリのフラグメンテーションを防ぐ  総じて、バランスの良い実装を選びながら、特にメモリ効率に気をつかっている印象を受ける。</description>
    </item>
    
    <item>
      <title>Flickr の JSON フィードで自作ブログパーツ</title>
      <link>https://metareal.blog/2008/06/15/display-flickr-photos-on-your-website-using-json-feed-api/</link>
      <pubDate>Sun, 15 Jun 2008 10:09:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/06/15/display-flickr-photos-on-your-website-using-json-feed-api/</guid>
      <description>写真を撮るのが好きじゃない。
カメラは荷物になるし、壊れやすいから気をつかう。いざ撮影になると、バッグから取り出して、電源ボタンを押す、レンズを向ける、ピントを合わせて、と面倒だ。衆人環視の中、うんうん唸りながらシャッターを切るのも粋じゃない。
では、何が楽しくて写真を撮るのかといえば、補正が楽しい。Photoshop Elements の自動補正がよく出来ていて、何も考えずにボタンを押していくだけで、それなりの見栄えになってくれる。これは楽しい（ただし、たまに自力で補正に挑戦しても、自動補正の方がキレイで気分が悪い）。
そのうち、出来上がった写真を他人に見せびらかしたくなるのが自然の流れ。写真を Flickr にアップロードするようになった。さらに、このブログをリニューアルするさいには、Flickr にアップロードした写真を表示するブログパーツを追加するつもりだった。
公式のブログパーツは Flickr Badge という名前で Flash 版と HTML 版が用意されている。しかし、いくつかの理由により、どちらも使う気になれなかった。幸い、Flickr ではさまざまなフィードが提供されている。これらを利用すれば、自作のブログパーツをつくるのは難しくない。
公式ブログパーツの不満点 提供されているもので満足なら自作する必要はない。公式ブログパーツの不満点も挙げておこう。
まずは、Flash 版だが、
 サムネイルがちいさい 一定時間ごとにアニメーションで拡大するのは面白いが、読者からすれば煩わしいものだ  という不満がある。
一方、HTML 版はというと、サムネイルの大きさは選択可能、レイアウトも CSS で設定できるので自由度も高い。ただし、ブログパーツを挿入するための JavaScript が好みじゃない（以下、一部整形済み）。
var b_txt = &amp;#39;&amp;#39;; b_txt+= &amp;#39;&amp;lt;div class=&amp;#34;flickr_badge_image&amp;#34; id=&amp;#34;flickr_badge_image1&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;http://www.flickr.com/photos/ishikawa_takanori/2555186680/&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;http://farm4.static.flickr.com/3006/2555186680_7c18b8cc1a_s.jpg&amp;#34; alt=&amp;#34;A photo on Flickr&amp;#34; title=&amp;#34;BUFFET STYLE&amp;#34; height=&amp;#34;75&amp;#34; width=&amp;#34;75&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;; b_txt+= &amp;#39;&amp;lt;div class=&amp;#34;flickr_badge_image&amp;#34; id=&amp;#34;flickr_badge_image2&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;http://www.flickr.com/photos/ishikawa_takanori/2555186616/&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;http://farm4.static.flickr.com/3140/2555186616_823d69311e_s.jpg&amp;#34; alt=&amp;#34;A photo on Flickr&amp;#34; title=&amp;#34;spaghetti with Genova style basil sauce&amp;#34; height=&amp;#34;75&amp;#34; width=&amp;#34;75&amp;#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;; b_txt+= &amp;#39;&amp;lt;div class=&amp;#34;flickr_badge_image&amp;#34; id=&amp;#34;flickr_badge_image3&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;http://www.</description>
    </item>
    
    <item>
      <title>280Slides in Objective-J</title>
      <link>https://metareal.blog/2008/06/06/280slides-in-objective-j/</link>
      <pubDate>Fri, 06 Jun 2008 12:42:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/06/06/280slides-in-objective-j/</guid>
      <description>280Slides という Web サービスがすごい。
 Dru’s Blog » New Web Site in Objective-C via Javascript New 280 Slides Web Site translates Objective-C to Javascript | reddit  Keynote 風のプレゼンテーションツールとしての UI も素晴らしいが、圧巻なのは、その実装技術。
「どんな JavaScript や Flash を使ってるんだ？」と思うだろう。さあ、FireBug なり Safari の Web インスペクタなりで、ページに読み込まれているスクリプトを確認してみよう。その大半が馴染みのない拡張子 .j であることに驚くに違いない。
 main.j Document.j DocumentController.j  上にあげたのは、.j ファイルの一例だが、あなたが Mac OS X の開発者であれば、見覚えのある名前ばかりだろう。これは Mac OS X の MVC フレームワーク Cocoa を構成するクラス名と酷似している。
Objective-J 試しに DocumentController.j を覗いてみようか。
// // DocumentController.j // Editor // // Created by Francisco Tolmasky.</description>
    </item>
    
    <item>
      <title>JavaScript ベンチマーク SunSpider 0.9</title>
      <link>https://metareal.blog/2007/12/19/new-javascript-benchmark-sunspider/</link>
      <pubDate>Thu, 20 Dec 2007 08:28:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/12/19/new-javascript-benchmark-sunspider/</guid>
      <description>WebKit の開発者たちは素晴らしいレンダリング・エンジンだけではなく、Drosera や Web Inspector などの Web 開発者向けツールも提供してきたが、今度は JavaScript ベンチマークをリリースしたようだ。
このベンチマークはJavaScript 言語のコアに絞ったベンチマークを提供しており、これまでの、Web 開発者が使うツールというよりは言語処理系開発者向けのツールといえる。
SunSpider 0.9 このベンチマークは Surfin’ Safari のブログ上で公開がアナウンスされている。
 Surfin’ Safari - Blog Archive » Announcing SunSpider 0.9  この記事では、他にも多くの JavaScript ベンチマークが存在することを認めたうえで、SunSpider には以下のような特徴があるとしている。
 マイクロベンチマークではなく、実際にアプリケーションで使用されているコードである テスト対象に DOM は含まず、JavaScript 言語のコアのベンチマークに焦点を合わせている ブラウザ／コンソール両方で簡単に実行できる 実行時間のブレも計測できるので、どの程度安定した計測なのかが分かる  このページでベンチマークを実行することができる。実際に実行してみると計測結果をパーマリンクとして保存できたり、それらを比較できたりと興味深い。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API（目次）</title>
      <link>https://metareal.blog/2007/09/23/prototype-1-6-0-event-overhaul-release-toc/</link>
      <pubDate>Mon, 24 Sep 2007 12:10:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/09/23/prototype-1-6-0-event-overhaul-release-toc/</guid>
      <description>Prototype 1.6.0 RC の変更点、特にイベント周りの API の変更についてまとめた記事のインデックス。
 Event.observe で登録したコールバックの this イベントオブジェクトの拡張 Event.stopObserving で複数のイベント登録を解除できるようになった カスタム・イベント クロスブラウザな DOMContentLoaded イベント  </description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API (4)</title>
      <link>https://metareal.blog/2007/09/23/prototype-1-6-0-event-overhaul-release-take-4/</link>
      <pubDate>Mon, 24 Sep 2007 12:02:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/09/23/prototype-1-6-0-event-overhaul-release-take-4/</guid>
      <description>Prototype 1.6.0 RC のイベント API について紹介するシリーズも今回が最後。
カスタム・イベント あらかじめ定義された組み込みのイベント click や submit 以外にも、ユーザーが好きなイベントを発生させることができるようになった。
たとえば、こんな HTML があるとして、
&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt; &amp;lt;h1&amp;gt;&amp;lt;span id=&amp;quot;title&amp;quot;&amp;gt;Release notes&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt; ... &amp;lt;/div&amp;gt; Element#fire（実体は Event.fire）メソッドを使って、タイトルが変更された、という通知を送る（イベントを発生させる）ことができる。
$(&amp;quot;title&amp;quot;).fire(&amp;quot;titleChanged&amp;quot;); 当然、受け手も必要なわけで、組み込みのイベントと同様、Element#observe でコールバック関数を登録できる。
$(&amp;quot;container&amp;quot;).observe(&amp;quot;titleChanged&amp;quot;, function(event) { this.highlight({ duration: 0.5 }); }); ちなみに、Event.fire メソッドは内部で次のどちらかの処理を行う。
 ブラウザが DOM Events をサポートしていれば、document.createEvent でイベントを作成し、element.dispatchEvent でイベントを発生 そうでなければ、document.createEventObject でイベントを作成し、element.fireEvent でイベントを発生  クロスブラウザな DOMContentLoaded イベント window.onload 前でも DOM 処理が可能なら通知してくれる domready.js でも紹介した DOMContentLoaded がサポートされた。
document.observe(&amp;quot;contentloaded&amp;quot;, function() { ... }) 従来の Element#observe メソッドを通して、透過的に扱うことができる。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API (3)</title>
      <link>https://metareal.blog/2007/09/22/prototype-1-6-0-event-overhaul-release-take-3/</link>
      <pubDate>Sat, 22 Sep 2007 09:28:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/09/22/prototype-1-6-0-event-overhaul-release-take-3/</guid>
      <description>Prototype 1.6.0 RC イベント API の進化、更なるつづき。
Event.stopObserving で複数のイベント登録を解除できるようになった イベントのコールバック関数は Event.observe や Element#observe で登録し、
 Event.stopObserving Element#stopObserving  で登録を解除できる。
これまで stopObserving() で登録を解除するには observe() に渡した引数と同じものを渡す必要があった。つまり、
Event.observe(&#39;signinForm&#39;, &#39;submit&#39;, checkForm); でコールバック関数 checkForm を登録した場合は、
Event.stopObserving(&#39;signinForm&#39;, &#39;submit&#39;, checkForm); としていたはず。
1.6.0 では引数を省略することで、対応するコールバック関数すべてを解除できるようになった。
// checkForm を解除 Event.stopObserving(&#39;signinForm&#39;, &#39;submit&#39;, checkForm); // signinForm の submit イベントに登録されたコールバック関数を解除 Event.stopObserving(&#39;signinForm&#39;, &#39;submit&#39;); // signinForm に登録されたコールバック関数を解除 Event.stopObserving(&#39;signinForm&#39;); これまで removeEventListener や detachEvent の単なるラッパーに近かった stopObserving だが、これでだいぶ使いやすくなった。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API (2)</title>
      <link>https://metareal.blog/2007/09/21/prototype-1-6-0-event-overhaul-release-take-2/</link>
      <pubDate>Fri, 21 Sep 2007 05:41:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/09/21/prototype-1-6-0-event-overhaul-release-take-2/</guid>
      <description>随分と間が空いてしまった。前回の記事 Prototype 1.6.0 で大きく進化したイベント API に引き続き、Prototype 1.6.0 RC で導入された、イベント API の変更点を見ていく。
イベントオブジェクトの拡張 これまでも、たとえば $() から返された DOM 要素は Element.extend で色々と便利なメソッドが追加されていたが、1.6.0 からはイベントのコールバックに渡されるイベントオブジェクトでも Event.extend されるようになった。
これからはコールバック関数でこんなふうに書ける。
function onClickListener(event) { if (event.isLeftClick()) { ... } } また、IE の場合は他のモダンブラウザとの差異をなくすため、以下のプロパティも追加されている。
 target relatedTarget pageX pageY  また、Document Object Model Events に準拠した、
 stopPropagation() preventDefault()  メソッドも追加されているようだ。（更につづく）</description>
    </item>
    
    <item>
      <title>WebKit のブラウザ判定と iPhone、そして iPod touch</title>
      <link>https://metareal.blog/2007/09/08/webkit-detect-script-for-iphone-and-ipod-touch/</link>
      <pubDate>Sun, 09 Sep 2007 05:05:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/09/08/webkit-detect-script-for-iphone-and-ipod-touch/</guid>
      <description>Prototype 1.6.0 のブラウザ判定と iPhone では、
 prototype.js には 1.5.1 から、各種ブラウザを判定するための Prototype.Browser が定義されている。
 として prototype.js のブラウザ判定コードを紹介した。iPhone を含む WebKit ベースのブラウザも判別できる。
WebKit Detect script Surfin’ Safari の WebKit Detect script updated for iPhone and iPod touch で知った。WebKit detection script というものがあるらしい。
記事では iPhone と iPod touch もサポートしたよ、と書かれている。ソースコードではこんな感じ、
WebKitDetect.isWebKit = function isWebKit() { return RegExp(&amp;quot; AppleWebKit/&amp;quot;).test(navigator.userAgent); } ... WebKitDetect.isMobile = function isMobile() { return WebKitDetect.isWebKit() &amp;amp;amp;&amp;amp;amp; RegExp(&amp;quot; Mobile/&amp;quot;).test(navigator.userAgent); } つまり、User-Agent に、
 &amp;ldquo;AppleWebKit/&amp;rdquo; があれば WebKit &amp;ldquo;Mobile/&amp;rdquo; があれば携帯端末  ということのようだ。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 で大きく進化したイベント API</title>
      <link>https://metareal.blog/2007/09/02/prototype-1-6-0-event-overhaul-release/</link>
      <pubDate>Sun, 02 Sep 2007 09:55:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/09/02/prototype-1-6-0-event-overhaul-release/</guid>
      <description>Prototype 1.6.0 RC にはいくつもの変更点がある。
特に イベント周りの API で顕著だ。Event.observe メソッドなど、お馴染みの API が大幅に手を加えられている。
Event.observe で登録したコールバックの this いままで Event.observe でコールバック関数を登録するときは、コールバックが呼ばれたときの this を固定するため（と、引数に event が確実に渡ってくるように）、
var element = $(&#39;mybutton&#39;); Event.observe(element, &#39;click&#39;, onClickEventListener.bindAsEventListener(element)); Function#bindAsEventListener を使っていたと思う。
これが 1.6.0 では、Event.observe や Element.observe で登録したコールバック関数はすべてのブラウザで、this がイベントの発生した DOM 要素となるように変更された。
そのため、上記のコードはシンプルに、
var element = $(&#39;mybutton&#39;); Event.observe(element, &#39;click&#39;, onClickEventListener); と書けるようになった。
もっとも、コールバック関数を登録するオブジェクト（コントローラー）自身を this にすることの方が多いかもしれない。その場合は bind する必要がある。
var element = $(&#39;mybutton&#39;); Event.observe(element, &#39;click&#39;, onClickEventListener.bind(this)); コールバック関数の this を固定する処理 すでに Function#bind や Function#bindAsEventListener が紹介されつくしているご時世に今更な感もあるが、Event.observe で登録したコールバック関数の this を固定している処理を見てみよう。</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 のブラウザ判定と iPhone </title>
      <link>https://metareal.blog/2007/09/01/prototype-1-6-0-has-detection-for-iphone/</link>
      <pubDate>Sat, 01 Sep 2007 08:30:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/09/01/prototype-1-6-0-has-detection-for-iphone/</guid>
      <description>prototype.js には 1.5.1 から、各種ブラウザを判定するための Prototype.Browser が定義されている。
var Prototype = { ... Browser: { IE: !!(window.attachEvent &amp;amp;&amp;amp; !window.opera), Opera: !!window.opera, WebKit: navigator.userAgent.indexOf(&#39;AppleWebKit/&#39;) &amp;gt; -1, Gecko: navigator.userAgent.indexOf(&#39;Gecko&#39;) &amp;gt; -1 &amp;amp;&amp;amp; navigator.userAgent.indexOf(&#39;KHTML&#39;) == -1, ... 使い方は一目瞭然だろう。
たとえば Internet Explorer の場合は Prototype.Browser.IE が、Safari など WebKit を利用しているブラウザでは Prototype.Browser.WebKit が true になる。
Prototype 1.6.0 RC での Prototype.Browser そして、Prototype 1.6.0 RC では、ここに新しい定義が追加された。
iPhone だ。
var Prototype = { Version: &#39;1.6.0_rc0&#39;, Browser: { IE: !!(window.attachEvent &amp;amp;&amp;amp; !window.opera), Opera: !</description>
    </item>
    
    <item>
      <title>Prototype 1.6.0 と DOMContentLoaded</title>
      <link>https://metareal.blog/2007/08/22/prototype-1-6-0-features-dom-content-loaded-event/</link>
      <pubDate>Wed, 22 Aug 2007 05:32:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/08/22/prototype-1-6-0-features-dom-content-loaded-event/</guid>
      <description>Prototype 1.6.0 のリリース候補版が公開されたようだ。
 Prototype JavaScript framework: Prototype 1.6.0 release candidate Riding Rails: Prototype 1.6.0 release candidate  変更点が多い。目を引くものとしては、クラスの継承がサポートされた。新しい Class.create では親クラスを指定できる。いままでは Object.extend によるコピーで擬似的な継承をしていただけなので、これは嬉しいかもしれない。
クロスブラウザな DOMContentLoaded イベント また、「window.onload 前でも DOM 処理が可能なら通知してくれる domready.js」という記事でも書いた、DOMContentLoaded がサポートされた。
document.observe(&amp;quot;contentloaded&amp;quot;, function() { ... }) 従来の Element#observe メソッドを通して、透過的に扱うことができる。これで、先の記事にアップしていた domready.js は不要になるだろう。
1.6.0 には他にも色々面白そうな機能が追加されている。暇があるときに追々調べていくつもり。</description>
    </item>
    
    <item>
      <title>prototype.js の $$ 関数で CSS 風に DOM プログラミング</title>
      <link>https://metareal.blog/2007/07/15/css-like-dom-programming-with-prototype-get-elements-by-selector/</link>
      <pubDate>Sun, 15 Jul 2007 11:56:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/07/15/css-like-dom-programming-with-prototype-get-elements-by-selector/</guid>
      <description>prototype.js の $$ 関数（実際の処理は Selector.findChildElements）は CSS セレクタを受け取り、セレクタにマッチする要素を配列で返してくれる。
var links = $$(&#39;#contents a&#39;); だが、単純にひとつのセレクタだけではなくて、複数のセレクタを引数に渡したり、CSS と同じく、カンマ区切りで複数指定することもできる（結果は重複要素のない配列となって返ってくる）。
var links = $$(&amp;quot;#contents a&amp;quot;, &amp;quot;#footer .items a&amp;quot;); このコードは、こう書くこともできる。
var links = $$(&amp;quot;#contents a, #footer .items a&amp;quot;); そして、いまさらながら気づいたのは、これらの特徴を利用すれば、DOM の処理を CSS のように宣言的に書くのが可能だ、ということ。
CSS 風に DOM プログラミング たとえば、フォーム入力画面で最初のテキストフィールドまたはテキストエリアを取り出す場合は、
$$( &amp;quot;form input[type=text]&amp;quot;, &amp;quot;form textarea&amp;quot; ).slice(0, 1) と書けるので、以前の domready.js と組み合わせると、読み込み時に最初のテキストフィールドまたはテキストエリアを選択状態にするコードは以下のように書ける。
Event.domReady.add(function() { // Select initial first responder when the window is first placed onscreen. $$( &amp;quot;form input[type=text]&amp;quot;, &amp;quot;form textarea&amp;quot; ).slice(0, 1).</description>
    </item>
    
    <item>
      <title>window.onload 前でも DOM 処理が可能なら通知してくれる domready.js</title>
      <link>https://metareal.blog/2007/07/10/domready-js-cross-browser-ondomcontentloaded/</link>
      <pubDate>Tue, 10 Jul 2007 12:42:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/07/10/domready-js-cross-browser-ondomcontentloaded/</guid>
      <description>DOM 読み込み完了のタイミングで、任意の関数を実行できるようにする JavaScript ライブラリを書いてみた。
 domready.js  mootools の同様の機能を基にしていて、単体として使いやすいように外部ライブラリへの依存性をなくし、prototype.js とも併用できるようにしたもの。
現状、手元の環境では以下のブラウザで動作確認済み。
 IE 7 (XP standalone) IE 6 SP2 Firefox 2.0.0.4 Opera 9.21 Safari 2.0.4 Mac Firefox 2.0.0.4 Mac IE 5.2.3  ただし、Mac IE では window.onload で代用するように実装してある。まあ、スクリプトエラーが出るよりマシだろう。
使い方 まず、domready.js を読み込む。
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/javascripts/domready.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; prototype.js と併用する場合は prototype.js より後に読み込む。
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/javascripts/prototype.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/javascripts/domready.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; あとは、DOM 読み込み完了のタイミングで実行したい関数を Event.domReady.add で登録するだけ。
Event.domReady.add(function() { ... }); 他のイベントと登録方法が異なるのは直感的じゃない、とか言われそうだけど、正直あんまり気にならない。
経緯: window.onload の欠点 多くの Ajax 系実装では、ページ読み込み完了時に初期化などを実行するようになっている。
Event.observe(window, &#39;load&#39;, function() { .</description>
    </item>
    
    <item>
      <title>script.aculo.us の InPlaceEditor で submitOnBlur だと Safari が落ちる</title>
      <link>https://metareal.blog/2007/07/06/inplace-editor-with-submit-on-blur-enabled-crashes-safari/</link>
      <pubDate>Fri, 06 Jul 2007 10:57:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/07/06/inplace-editor-with-submit-on-blur-enabled-crashes-safari/</guid>
      <description>script.aculo.us の InPlaceEditor を試している。
設定でカスタマイズできる部分がけっこうある割に、必要なものがなかったりして（特にコールバック系）微妙に使いづらいんだが、Safari だと不意にクラッシュする、という問題もあったり。
色々調べてみると、どうやら submitOnBlur を設定して、フォーカスリング（テキストフィールドのフォーカス時に、フィールドの周囲に出る青い線）をクリックするとお亡くなりになるらしい。
まあ、普通に Safari のバグだと思うんだが、onblur の処理を適当に遅延させると大丈夫なようなので、ticket:3717 にパッチを送っておいた。</description>
    </item>
    
    <item>
      <title>JavaScript でコードを色づけしてくれるライブラリ google-code-prettify</title>
      <link>https://metareal.blog/2007/06/15/google-code-prettify-syntax-highlighter-written-in-javascript/</link>
      <pubDate>Fri, 15 Jun 2007 09:08:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/06/15/google-code-prettify-syntax-highlighter-written-in-javascript/</guid>
      <description>Ruby のコードを色づけしてくれる Syntax を試しているうちに、このブログでもコードの色づけ（いわゆるシンタックス・ハイライト。はてなダイアリーのスーパー pre 記法みたいなやつね）をやってみたくなった。
誰でも普段は、エディタで色づけされたコードを見慣れてるわけで、やっぱり黒べったりは読みづらいといえば読みづらい。
JavaScript によるコード色づけ ただ、このブログは WordPress で動作している。
WordPress といえば、あれか &amp;hellip; PHP か。なので、Ruby の Syntax ライブラリは使えない。それに、そもそも Syntax は Ruby の字句解析ライブラリとしての用途に重きを置いているためか、デフォルトで対応している言語が少ない（Ruby と XML, YAML だけ）。そのへんの不満もある。
色々迷った末（五分くらい）、JavaScript によるコード色づけを試してみることにした（WordPress のプラグインはですね、種類が多すぎて比較する気にもなれませんでした）。
問題はどのライブラリを使うか。検索してみると、Google Code にいくつか見つかった。
 syntaxhighlighter google-code-prettify  syntaxhighlighter は対応言語は申し分ないのだが、ちょっとオーバースペック気味だ。行番号表示やクリップボードへのコピーとかは、とりあえずいらないだろう。
一方の google-code-prettify はシンプルでいい感じ。早速、試してみることにする。
google-code-prettify 使い方は README を読めば問題ないと思う。このブログでは prototype.js を使って、こんなふうに組み込んだ。
&amp;lt;script src=&amp;quot;http://metareal.org/javascripts/prototype.js&amp;quot; type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;http://metareal.org/javascripts/prettify.js&amp;quot; type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt; Event.observe(window, &#39;load&#39;, function() { prettyPrint(); }); &amp;lt;/script&amp;gt; この通り、HTML も色づけしてくれる。HTML に埋め込んだ JavaScript も認識されてるのはすごいな。しかも、コード部分の指定は pre 要素か code 要素の class 属性に prettyprint を指定するだけ。シンプル。</description>
    </item>
    
    <item>
      <title>Google の検索履歴を記録する JavaScript を読んでみた</title>
      <link>https://metareal.blog/2007/03/31/reading-google-search-history-javascript/</link>
      <pubDate>Sun, 01 Apr 2007 04:59:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/03/31/reading-google-search-history-javascript/</guid>
      <description>Google 検索履歴では、検索クエリーの履歴だけではなく、検索結果で実際にどのページをクリックしたか、も記録している。
検索結果ページのソースコードを読んでみると、履歴の保存は JavaScript で行われているようだ。
改行やインデントを加えて読みやすくしたソースコードを基に、履歴を保存する処理や興味深い部分を紹介する。
検索クエリーの保存 if (document.images) { new Image().src=&amp;quot;/url?sa=Q&amp;amp;client=safari&amp;amp;rls=ja-jp&amp;amp;q=...&amp;quot;; } まずは冒頭。新しい Image を生成することで http://www.google.com/url/ にアクセスさせている。
URL から推測するに検索クエリーを保存しているのだろう。
クリックされたページの URL を保存 クリックされたページの URL を保存する処理は、各リンクの onmousedown に JavaScript を仕込むことで実現している。
&amp;lt;a href=&amp;quot;...&amp;quot; class=l onmousedown=&amp;quot;return asq(event,this,&#39;&#39;,&#39;&#39;,&#39;res&#39;,&#39;1&#39;,&#39;&amp;amp;amp;sig2=...&#39;)&amp;quot;&amp;gt; リンクをクリックすると asq 関数が実行されたのち、ページに遷移する、というわけだ。
asq 関数の実装 では、asq 関数はどのような実装になっているのだろう。それなりに長いので些末な部分は削除したソースは以下の通り。
window.asq = function(d,a,f,g,k,l,m) { if (window.XMLHttpRequest) { var c = window.encodeURIComponent ? encodeURIComponent : escape; var h = &amp;quot;&amp;quot;, i = &amp;quot;&amp;quot;; var b = new XMLHttpRequest; var e = d.</description>
    </item>
    
    <item>
      <title>JSON はみんなが思ってるほど安全ではない</title>
      <link>https://metareal.blog/2007/03/08/json-is-not-as-safe-as-people-think-it-is/</link>
      <pubDate>Thu, 08 Mar 2007 09:33:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/03/08/json-is-not-as-safe-as-people-think-it-is/</guid>
      <description>del.icio.us 経由で今日読んだ記事。
JSON is not as safe as people think it is - Joe Walker&amp;rsquo;s Blog http://getahead.org/blog/joe/2007/03/05/ json_is_not_as_safe_as_people_think_it_is.html
script による CSRF と JavaScript のハック的手法を組み合わせることで、たとえログイン必須にしている JSON データであっても盗まれるかもしれない、という話。
たとえば、
&amp;lt;script type=&#39;text/javascript&#39; src=&#39;http://example.com/jsonservice&#39;&amp;gt;&amp;lt;/script&amp;gt; という script で JSON を読み込めたとする。
このままだと読み込んだ JSON のデータが評価されるだけで、どんなコードも実行されないのでそれほど問題にはならない （評価された JSON のデータはどんな変数にも代入されてないので参照できない）。
しかし、元記事に紹介されている方法で、たとえば Array のコンストラクタを再定義してやると、JSON が評価されるときに 任意のコード（どこかにデータを送信するなど）を実行できてしまう。</description>
    </item>
    
    <item>
      <title>Firefox の &lt;canvas&gt; 要素バグ</title>
      <link>https://metareal.blog/2006/12/22/firefox-canvas-bug/</link>
      <pubDate>Sat, 23 Dec 2006 02:47:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2006/12/22/firefox-canvas-bug/</guid>
      <description>Firefox の &amp;lt;canvas&amp;gt; 要素で width, height 属性を指定せず、スタイルシートで width, height を指定すると、JavaScript での描画で座標がおかしくなる。Firefox 2.0.0.1 で確認。
width, height 属性を指定すれば大丈夫。</description>
    </item>
    
  </channel>
</rss>