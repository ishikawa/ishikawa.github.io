<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on METAREAL</title>
    <link>http://ishikawa.github.io/tags/tips/</link>
    <description>Recent content in Tips on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Sat, 08 Dec 2007 10:00:00 +0900</lastBuildDate>
    <atom:link href="http://ishikawa.github.io/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mail.app や iGTD の vacuum を cron で自動化する</title>
      <link>http://ishikawa.github.io/2007/12/08/vacuum-analyze-sqlite-automatically-by-cron/</link>
      <pubDate>Sat, 08 Dec 2007 10:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/12/08/vacuum-analyze-sqlite-automatically-by-cron/</guid>
      <description>&lt;p&gt;Warning&lt;/p&gt;

&lt;p&gt;この方法でデータベースを VACUUM すると、Mail.app で問題が起こるようだ。Mail.app を起動中に cron が実行されるとメールを送信できない、下書き保存できない、などの問題があった。というわけで、この方法は使わないか、問題が起こらないように改良する必要がある。&lt;/p&gt;

&lt;p&gt;「&lt;a href=&#34;http://weblog.metareal.org/2007/08/23/optimize-the-apple-mail-app-database/&#34;&gt;Mail.app を vacuum して高速化&lt;/a&gt;」や「&lt;a href=&#34;http://weblog.metareal.org/2007/12/05/optimize-the-igtd-database/&#34;&gt;iGTD も vacuum すると速くなる&lt;/a&gt;」でも書いたように、Mac のアプリケーションのいくつかは、ターミナルから &lt;a href=&#34;http://www.sqlite.org/lang_vacuum.html&#34;&gt;VACUUM&lt;/a&gt; &lt;a href=&#34;http://www.sqlite.org/lang_vacuum.html&#34;&gt;ANALYZE&lt;/a&gt; という SQL を実行することで高速に動作するようになる。&lt;/p&gt;

&lt;p&gt;しかし、このコマンドを毎回手動で実行するのは面倒なので、自動化することにした。自動化、といっても大層なものではなく &lt;code&gt;crontab&lt;/code&gt; にコマンドを書いておき、毎日実行されるようにしただけ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% **crontab -e**
0 15 * * * sqlite3 ~/Library/Application\ Support/iGTD/iGTD.sql &amp;quot;vacuum analyze&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
0 15 * * * sqlite3 ~/Library/Mail/Envelope\ Index &amp;quot;vacuum analyze&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sqlite&lt;/code&gt; コマンドを直接書いているので見苦しいが、別スクリプトにした場合の管理を考えると面倒だった。ここでは標準エラー出力を &lt;code&gt;/dev/null&lt;/code&gt; に捨てている（ただし、アプリケーションがデータベースをロックしていると、&lt;code&gt;VACUUM ANALYZE&lt;/code&gt; は &amp;ldquo;database is locked&amp;rdquo; というエラーで即座に終了する）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby の Mongrel でお手軽 HTTP サーバ</title>
      <link>http://ishikawa.github.io/2007/08/30/setup-simple-http-server-with-mongrel/</link>
      <pubDate>Thu, 30 Aug 2007 10:25:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/30/setup-simple-http-server-with-mongrel/</guid>
      <description>&lt;p&gt;先日、やっつけスクリプトのサーバ部分に &lt;a href=&#34;http://mongrel.rubyforge.org/&#34;&gt;Mongrel&lt;/a&gt; を使ってみたんだけど、Rails で使う以外だとドキュメント少ないのね。&lt;/p&gt;

&lt;p&gt;とりあえず、&lt;a href=&#34;http://weblog.metareal.org/2007/08/25/setup-simple-http-server-with-webrick/&#34;&gt;Ruby の Webrick でお手軽 HTTP サーバ&lt;/a&gt;の Mongrel 版はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/local/bin/ruby
require &#39;rubygems&#39;
require &#39;mongrel&#39;

def mongrel(config = {})
  server = Mongrel::HttpServer.new(&#39;localhost&#39;, config[:Port])
  server.register(&amp;quot;/&amp;quot;, Mongrel::DirHandler.new(config[:DocumentRoot]))
  server.run.join
end

mongrel :DocumentRoot =&amp;gt; &#39;/Users/ishikawa/Sites/spotwide&#39;,
        :Port =&amp;gt; 5001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まあ、これくらいなら &lt;a href=&#34;http://mongrel.rubyforge.org/rdoc/index.html&#34;&gt;API ドキュメント&lt;/a&gt;眺めたら書ける（というか載ってる）けど。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby の Webrick でお手軽 HTTP サーバ</title>
      <link>http://ishikawa.github.io/2007/08/25/setup-simple-http-server-with-webrick/</link>
      <pubDate>Sun, 26 Aug 2007 02:12:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/25/setup-simple-http-server-with-webrick/</guid>
      <description>

&lt;p&gt;サイトの HTML や CSS を自分のパソコン上で編集するとき、不便に感じるのは画像や外部 CSS ファイルの指定方法の違いだ。&lt;/p&gt;

&lt;p&gt;サイト上の HTML や CSS では、たとえば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/stylesheets/application.css&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div#header div.logo h1 {
  width: 250px;
  height: 50px;
  background: url(/images/logo.png) no-repeat center center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;になっているのに、自分のパソコン上で編集するときには、これらを&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;./stylesheets/application.css&amp;quot; type=&amp;quot;text/css&amp;quot; media=&amp;quot;screen&amp;quot; charset=&amp;quot;utf-8&amp;quot; /&amp;gt;

...

div#header div.logo h1 {
  width: 250px;
  height: 50px;
  background: url(./images/logo.png) no-repeat center center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いちいち、相対パスに変換しなくてはいけないのだ。面倒だし、誤って別の箇所を削ってしまったり、一部だけ変更し忘れるなんてことがないとも限らない。&lt;/p&gt;

&lt;h3 id=&#34;変更しなくても済むように:4b3ada6c119bb68f66c9df9e9a8ec542&#34;&gt;変更しなくても済むように&lt;/h3&gt;

&lt;p&gt;こういうときは、ローカルに HTTP サーバを用意すると便利だ。&lt;/p&gt;

&lt;p&gt;ローカルに HTTP サーバを用意して、そこで編集中のサイトを表示させるようにすれば、画像や外部 CSS ファイルのパスを実際のサイトのものから書き換えなくても、正常に表示できるようになる。&lt;/p&gt;

&lt;p&gt;そして、Mac には &lt;a href=&#34;http://www.ruby-lang.org/ja/&#34;&gt;Ruby&lt;/a&gt; が標準添付されているので、簡単に HTTP サーバを用意することができる。&lt;/p&gt;

&lt;h3 id=&#34;簡単な-http-サーバを書く:4b3ada6c119bb68f66c9df9e9a8ec542&#34;&gt;簡単な HTTP サーバを書く&lt;/h3&gt;

&lt;p&gt;Ruby には &lt;a href=&#34;http://www.ruby-lang.org/ja/man/?cmd=view;name=webrick&#34;&gt;Webrick&lt;/a&gt; という汎用サーバーフレームワークが標準添付されており、これを使えば、以下のように簡単なスクリプトで HTTP サーバを実装できるのだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/local/bin/ruby
require &#39;webrick&#39;

def webrick(config = {})
  WEBrick::HTTPServer.new(config).instance_eval do |server|
    [:INT, :TERM].each do |signal|
      Signal.trap(signal) { shutdown }
    end
    start
  end
end

webrick :DocumentRoot =&amp;gt; &#39;/path/to/your/document/root&#39;,
        :Port =&amp;gt; 5001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;強調部分がサーバを設定する箇所になる。実際にサーバを実行する環境に合わせて書き換えてほしい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:DocumentRoot&lt;/strong&gt; 編集する HTML や CSS の置かれたディレクトリのルートディレクトリへのパス&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:Port&lt;/strong&gt; サーバを起動するポート番号（普通はこのままでよい）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;:DocumentRoot&lt;/code&gt; を適切なディレクトリに書き換えたら、ターミナルから起動する。ここでは、このスクリプトを &lt;code&gt;server.rb&lt;/code&gt; という名前で保存したとする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ruby ./server.rb
[2007-08-25 17:01:45] INFO  WEBrick 1.3.1
[2007-08-25 17:01:45] INFO  ruby 1.8.6 (2007-03-13) [i686-darwin8.9.1]
[2007-08-25 17:01:45] INFO  WEBrick::HTTPServer#start: pid=446 port=5001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そうして、ブラウザから &lt;code&gt;http://localhost:5001/&lt;/code&gt; にアクセスすれば、ローカルで編集中のサイトが表示されるはずだ。&lt;/p&gt;

&lt;p&gt;また、サーバを終了させたいときはサーバを起動しているターミナルのウインドウで、&lt;strong&gt;Control + C&lt;/strong&gt; で終了させることができる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mail.app を vacuum して高速化</title>
      <link>http://ishikawa.github.io/2007/08/23/optimize-the-apple-mail-app-database/</link>
      <pubDate>Fri, 24 Aug 2007 05:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/23/optimize-the-apple-mail-app-database/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; の &lt;code&gt;vacuum&lt;/code&gt; コマンドで Mail.app を高速化する。ターミナルで、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd ~/Library/Mail/; sqlite3 Envelope\ Index &amp;quot;vacuum;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Automator で自動化する &lt;a href=&#34;http://automatorworld.com/archives/mail-vacuum/&#34;&gt;Mail Vacuum&lt;/a&gt; なんてのもある。&lt;/p&gt;

&lt;p&gt;個人的には、以下のような AppleScript を、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &amp;quot;Terminal&amp;quot;
  activate
  do script &amp;quot;cd ~/Library/Mail/; sqlite3 Envelope\\ Index \&amp;quot;vacuum;\&amp;quot;&amp;quot;
end tell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Optimize Mail.app.scpt&lt;/code&gt; として保存し、QuickSilver から実行できるようにしている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rsync で ssh のポートを指定する方法</title>
      <link>http://ishikawa.github.io/2007/08/20/how-does-rsync-specify-ssh-port-in-command-line/</link>
      <pubDate>Mon, 20 Aug 2007 11:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/20/how-does-rsync-specify-ssh-port-in-command-line/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://rsync.samba.org/&#34;&gt;rsync&lt;/a&gt; で ssh のポートを指定するには &lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--rsh&lt;/code&gt; オプションを使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rsync **-e &amp;quot;ssh -p 2234&amp;quot;** ...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>IE でリンクをクリックするとフォントサイズが小さくなる</title>
      <link>http://ishikawa.github.io/2007/08/08/hit-a-link-and-font-away/</link>
      <pubDate>Wed, 08 Aug 2007 10:15:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/08/08/hit-a-link-and-font-away/</guid>
      <description>

&lt;p&gt;ひさしぶりに Windows IE 6 でブログの確認をしていたら妙なことに気がついた。&lt;strong&gt;リンクをクリックすると、一瞬、クリックしたリンクのフォントサイズが小さくなるのだ&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;図解入りバージョン:6c7eb0128b81359668694779da75e39f&#34;&gt;図解入りバージョン&lt;/h3&gt;

&lt;p&gt;ひさしぶりに Windows IE 6 でブログの確認をしていたら妙なことに気がついた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/1040192167/&#34;&gt;&lt;img src=&#34;http://farm2.static.flickr.com/1071/1040192167_618f353c8f_o.gif&#34; alt=&#34;Hit a link and font away 1&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;リンクをクリックすると、一瞬、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/1040192173/&#34;&gt;&lt;img src=&#34;http://farm2.static.flickr.com/1016/1040192173_1715963324_o.gif&#34; alt=&#34;Hit a link and font away 2&#34; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クリックしたリンクのフォントサイズが小さくなるのだ。&lt;/p&gt;

&lt;h3 id=&#34;考えられる原因とか対策:6c7eb0128b81359668694779da75e39f&#34;&gt;考えられる原因とか対策&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.yahoo.com/yui/&#34;&gt;YUI&lt;/a&gt; の &lt;a href=&#34;http://developer.yahoo.com/yui/reset/&#34;&gt;Reset CSS&lt;/a&gt; や &lt;a href=&#34;http://developer.yahoo.com/yui/fonts/&#34;&gt;Fonts CSS&lt;/a&gt; を使っているせいかも？&lt;/li&gt;
&lt;li&gt;てか、いま気づいたけど、YUI に &lt;a href=&#34;http://developer.yahoo.com/yui/base/&#34;&gt;Base CSS&lt;/a&gt; なんて追加されたのね（&lt;a href=&#34;http://yuiblog.com/blog/2007/07/31/yui-2-3-0-released/&#34;&gt;他にも色々増えたようだ&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;いやいや、メイリオとか日本語の場合だけ駄目とか&lt;/li&gt;
&lt;li&gt;検証する気力がない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず、強制的に &lt;code&gt;font-size&lt;/code&gt; を指定してやることで、この問題は起きなくなるようだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* {font-size:100%;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このブログの場合、上記 CSS を &lt;code&gt;reset.css&lt;/code&gt; の最後に追加した。&lt;/p&gt;

&lt;h3 id=&#34;結論:6c7eb0128b81359668694779da75e39f&#34;&gt;結論&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/Hamachiya2/20070804/browser_crasher&#34;&gt;CSS ハックも可能な IE&lt;/a&gt; って面白いですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terminal で作業中のディレクトリを Finder で開く</title>
      <link>http://ishikawa.github.io/2007/05/31/open-current-directory-in-finder/</link>
      <pubDate>Thu, 31 May 2007 09:02:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/05/31/open-current-directory-in-finder/</guid>
      <description>&lt;p&gt;Terminal で作業中のディレクトリを Finder で表示させたいときがある。そういうときは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% open .
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Google のリダイレクタ</title>
      <link>http://ishikawa.github.io/2007/02/07/google-redirector/</link>
      <pubDate>Thu, 08 Feb 2007 01:15:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/02/07/google-redirector/</guid>
      <description>&lt;p&gt;社内の開発合宿行ったり、そこで風邪もらったりしているうちに、すっかりブログの更新から遠のいてしまった。ぼちぼち復活。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.2ch.net/&#34;&gt;2ちゃんねる&lt;/a&gt;ではリファラ隠しのために、いわゆる &lt;code&gt;ttp&lt;/code&gt; リンクや &lt;code&gt;http://ime.nu/&lt;/code&gt; などのリダイレクタが利用されている。リダイレクタという名前は勝手に使ってるだけで、正式なものか分からないけど、URL の末尾やパラメータに別の URL を指定すると、その URL にリダイレクトしてくれるページのこと。&lt;/p&gt;

&lt;p&gt;もっとも、&lt;code&gt;http://ime.nu/&lt;/code&gt; のように、あいだに警告ページを挟んでリンクを表示する（実際にはリダイレクトしない）ページもリダイレクタと呼んでいる。&lt;/p&gt;

&lt;p&gt;Google にも、このリダイレクタがあるのを、今日はじめて知った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.google.com/url?sa=D&amp;amp;q=http://www.yahoo.co.jp/&#34;&gt;http://www.google.com/url?sa=D&amp;amp;q=http://www.yahoo.co.jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上の例は &lt;a href=&#34;http://www.yahoo.co.jp/&#34;&gt;http://www.yahoo.co.jp/&lt;/a&gt; に飛ばすためのリンク。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>