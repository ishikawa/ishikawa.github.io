<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>v8 on METAREAL</title>
    <link>http://ishikawa.github.io/tags/v8/</link>
    <description>Recent content in v8 on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Wed, 24 Dec 2008 01:06:00 +0900</lastBuildDate>
    
	<atom:link href="http://ishikawa.github.io/tags/v8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WEB&#43;DB PRESS Vol.48</title>
      <link>http://ishikawa.github.io/2008/12/24/web-db-press-vol48/</link>
      <pubDate>Wed, 24 Dec 2008 01:06:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/12/24/web-db-press-vol48/</guid>
      <description>古谷楽人氏より WEB+DB PRESS Vol.48 (amazon.co.jp) を献本いただきました。ありがとうございます。わたしは当雑誌、というか雑誌全般の熱心な読者ではないのですが（ごめんなさい）、ひさしぶりの技術系雑誌を楽しく読ませてもらいました。
WEB+DB PRESS Vol.48 で氏は「[最速]JavaScript エンジン徹底比較」と題して、最近のブラウザ事情に聡いプログラマなら気になるであろう、最新 JavaScript エンジンの比較と検証記事を執筆されています。以下では、記事内容の簡単な紹介と一読した感想などを書いていきます。
[最速]JavaScript エンジン徹底比較 （ここから文体をいつもどおりに戻して&amp;hellip;）記事は三章から構成されており、それぞれの章題は：
 JavaScript エンジンの比較 SquirrelFish Extreme / WebKit の最適化手法 注目の Google Chrome に搭載された V8  である。
章題からも推測できるように、第一章が複数ベンチマークスイートによる各 JavaScript エンジンのパフォーマンス比較、第二章と第三章ではコンパイラと仮想機械の一般的な説明から始まり、WebKit の SquirrelFish Extreme、および Google の V8 が用いる最適化手法について多くのページが割かれている。
個々のトピックについては WEB 上にも詳細に解説されたサイトがあるものの、雑誌という紙媒体で、こうして一本にまとめられた情報は珍しいのではないだろうか&amp;hellip;って、普段、雑誌を読まない人が書いても説得力に乏しい。スミマセン。もっとも、珍しかろうが珍しくなかろうが、日本語で読める貴重な情報源のひとつであることに変わりはない。 特に、SquirrelFish Extreme で採用されている Polymorphic Inline Cache (PIC) や V8 の高速なプロパティ・アクセスを実現するための Hidden Class の解説は、現代的な動的言語の裏舞台を知る、という意味で興味深い。たとえ、言語処理系の実装詳細に興味がなくとも、普段使っている道具がどのように作られているかを知ることは益になるだろう。
最後に 今回、ひさしぶりに技術系雑誌を読んでみて、プロのライターと編集者による情報のパッケージングと、紙という媒体とレイアウトには、他のものには代えがたい価値がある、と感じた。腰を落ち着けて、プログラミングのさまざまなトピックスに触れるというのは、やはり、ワクワクする体験だ。</description>
    </item>
    
    <item>
      <title>Google Chrome に搭載されたオープンソースの JavaScript エンジン &#34;v8&#34; を試す</title>
      <link>http://ishikawa.github.io/2008/09/03/getting-started-with-v8-google-open-source-javascript-engine/</link>
      <pubDate>Wed, 03 Sep 2008 09:28:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/09/03/getting-started-with-v8-google-open-source-javascript-engine/</guid>
      <description>その発表から世間を騒がせた、Google の Web ブラウザ Chrome が遂に公開された。
Mac ユーザなうえに、日々の Web ブラウジングは Safari と iPhone で満足していることもあり、Chrome 自体への興味は薄い。しかし、オープンソースの JavaScript エンジンも独自開発している、となると話は別だ。しかも、Strongtalk や HotSpot Java VM の開発者が関わっている、というのだから俄然興味が湧いてくる（参考記事）。
Google が開発、公開している JavaScript 処理系は、その名も v8。
v8 の特徴 では、v8 には既存の処理系に比べて、どのような利点があるのだろうか。Google がわざわざ独自に開発し、Chrome という重要なプロダクトに搭載して公開するくらいだから、そこには他の処理系では達成できないアドバンテージがあるはずである。
Google Code で公開されている文書 Design Elements から概観をつかんでみよう。
オブジェクトのプロパティへのアクセスが高速 JavaScript ではオブジェクトのプロパティを自由に追加・削除できる。
これを実現するためには、ハッシュ表や二分木といった辞書による実装が一般的だが、そうするとプロパティにアクセスするたびに辞書を検索しなくてはいけない。
v8 では hidden class という実装テクニックを用いることにより、オブジェクトのプロパティへのアクセス方法が、オブジェクトの格納されているメモリのオフセットへのアクセスとなる。そのため、無駄な検索を省くことができ、高速なアクセスを実現している。
動的なマシンコード生成 JavaScript のコードは最初に実行されるときにマシンコードに変換される。バイトコードやインタプリタはない。また、プロパティへのアクセスは特別扱いされ、インライン・キャッシュという Smalltalk 実装系由来の技法が使われているらしい（参考：Efficient Implementation of the Smalltalk-80 System）
効率的なガベージコレクション v8 のガベージコレクションの特徴は以下のとおりである：
 stop-the-world ガベージコレクション中はプログラムが停止する 世代別ガベージコレクション 一度のガベージコレクションではオブジェクトの一部のみを検査することにより、プログラム停止時間を短縮 &amp;ldquo;保守的&amp;rdquo;ではない このため、未使用のオブジェクトをポインタと判定してしまい、メモリリークすることがない メモリ・コンパクションができる メモリのフラグメンテーションを防ぐ  総じて、バランスの良い実装を選びながら、特にメモリ効率に気をつかっている印象を受ける。</description>
    </item>
    
  </channel>
</rss>