<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google on METAREAL</title>
    <link>http://ishikawa.github.io/tags/google/</link>
    <description>Recent content in google on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Tue, 23 Feb 2010 23:26:00 +0900</lastBuildDate>
    
	<atom:link href="http://ishikawa.github.io/tags/google/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Bookmark が快適すぎる</title>
      <link>http://ishikawa.github.io/2010/02/23/google-bookmark-makes-me-feel-so-good/</link>
      <pubDate>Tue, 23 Feb 2010 23:26:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2010/02/23/google-bookmark-makes-me-feel-so-good/</guid>
      <description>Google Bookmark を使いはじめた。シンプルながら快適な使い心地で気に入っている。
 とにかく、ブックマーク編集画面が開くまでが速い ブックマーク先のページも含めて全文検索が可能  ソーシャル要素は考えず、純粋に「ブックマーク」という行為を突き詰めていくと、上記二点が非常に重要であることが分かると思う。
ちなみに、ブックマークレットにはGoogleブックマークに追加するブックマークレット（メモ欄対応版）で配布されているものを別窓で開くようにして使わせてもらっている。感謝。
javascript:var%20u=encodeURIComponent(location.href);var%20ti=encodeURIComponent(document.title);var%20te=encodeURIComponent((window.getSelection&amp;amp;&amp;amp;window.getSelection())||(document.getSelection&amp;amp;&amp;amp;document.getSelection())||(document.selection&amp;amp;&amp;amp;document.selection.createRange&amp;amp;&amp;amp;document.selection.createRange().text));window.open((te!=&#39;&#39;)?&#39;http://www.google.com/bookmarks/mark?op=add&amp;amp;bkmk=&#39;+u+&#39;&amp;amp;title=&#39;+ti+&#39;&amp;amp;annotation=&#39;+te:&#39;http://www.google.com/bookmarks/mark?op=add&amp;amp;bkmk=&#39;+u+&#39;&amp;amp;title=&#39;+ti);  </description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://ishikawa.github.io/2009/11/11/go-vim/</link>
      <pubDate>Wed, 11 Nov 2009 10:29:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2009/11/11/go-vim/</guid>
      <description>Io と並んで、自らの検索能力が試される名前の Go ですが、実用性と簡潔さを兼ねそなえた言語設計は好感がもてます。
% cd $GOROOT % ls misc/vim/ go.vim % cp misc/vim/go.vim ~/.vim/syntax/ % cat &amp;amp;gt; ~/.vim/ftdetect/go.vim au BufRead,BufNewFile *.go set filetype=go  今日はここまで。</description>
    </item>
    
    <item>
      <title>Google Chrome に搭載されたオープンソースの JavaScript エンジン &#34;v8&#34; を試す</title>
      <link>http://ishikawa.github.io/2008/09/03/getting-started-with-v8-google-open-source-javascript-engine/</link>
      <pubDate>Wed, 03 Sep 2008 09:28:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/09/03/getting-started-with-v8-google-open-source-javascript-engine/</guid>
      <description>その発表から世間を騒がせた、Google の Web ブラウザ Chrome が遂に公開された。
Mac ユーザなうえに、日々の Web ブラウジングは Safari と iPhone で満足していることもあり、Chrome 自体への興味は薄い。しかし、オープンソースの JavaScript エンジンも独自開発している、となると話は別だ。しかも、Strongtalk や HotSpot Java VM の開発者が関わっている、というのだから俄然興味が湧いてくる（参考記事）。
Google が開発、公開している JavaScript 処理系は、その名も v8。
v8 の特徴 では、v8 には既存の処理系に比べて、どのような利点があるのだろうか。Google がわざわざ独自に開発し、Chrome という重要なプロダクトに搭載して公開するくらいだから、そこには他の処理系では達成できないアドバンテージがあるはずである。
Google Code で公開されている文書 Design Elements から概観をつかんでみよう。
オブジェクトのプロパティへのアクセスが高速 JavaScript ではオブジェクトのプロパティを自由に追加・削除できる。
これを実現するためには、ハッシュ表や二分木といった辞書による実装が一般的だが、そうするとプロパティにアクセスするたびに辞書を検索しなくてはいけない。
v8 では hidden class という実装テクニックを用いることにより、オブジェクトのプロパティへのアクセス方法が、オブジェクトの格納されているメモリのオフセットへのアクセスとなる。そのため、無駄な検索を省くことができ、高速なアクセスを実現している。
動的なマシンコード生成 JavaScript のコードは最初に実行されるときにマシンコードに変換される。バイトコードやインタプリタはない。また、プロパティへのアクセスは特別扱いされ、インライン・キャッシュという Smalltalk 実装系由来の技法が使われているらしい（参考：Efficient Implementation of the Smalltalk-80 System）
効率的なガベージコレクション v8 のガベージコレクションの特徴は以下のとおりである：
 stop-the-world ガベージコレクション中はプログラムが停止する 世代別ガベージコレクション 一度のガベージコレクションではオブジェクトの一部のみを検査することにより、プログラム停止時間を短縮 &amp;ldquo;保守的&amp;rdquo;ではない このため、未使用のオブジェクトをポインタと判定してしまい、メモリリークすることがない メモリ・コンパクションができる メモリのフラグメンテーションを防ぐ  総じて、バランスの良い実装を選びながら、特にメモリ効率に気をつかっている印象を受ける。</description>
    </item>
    
    <item>
      <title>Google の検索履歴を記録する JavaScript を読んでみた</title>
      <link>http://ishikawa.github.io/2007/03/31/reading-google-search-history-javascript/</link>
      <pubDate>Sun, 01 Apr 2007 04:59:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/03/31/reading-google-search-history-javascript/</guid>
      <description>Google 検索履歴では、検索クエリーの履歴だけではなく、検索結果で実際にどのページをクリックしたか、も記録している。
検索結果ページのソースコードを読んでみると、履歴の保存は JavaScript で行われているようだ。
改行やインデントを加えて読みやすくしたソースコードを基に、履歴を保存する処理や興味深い部分を紹介する。
検索クエリーの保存 if (document.images) { new Image().src=&amp;quot;/url?sa=Q&amp;amp;client=safari&amp;amp;rls=ja-jp&amp;amp;q=...&amp;quot;; }  まずは冒頭。新しい Image を生成することで http://www.google.com/url/ にアクセスさせている。
URL から推測するに検索クエリーを保存しているのだろう。
クリックされたページの URL を保存 クリックされたページの URL を保存する処理は、各リンクの onmousedown に JavaScript を仕込むことで実現している。
&amp;lt;a href=&amp;quot;...&amp;quot; class=l onmousedown=&amp;quot;return asq(event,this,&#39;&#39;,&#39;&#39;,&#39;res&#39;,&#39;1&#39;,&#39;&amp;amp;amp;sig2=...&#39;)&amp;quot;&amp;gt;  リンクをクリックすると asq 関数が実行されたのち、ページに遷移する、というわけだ。
asq 関数の実装 では、asq 関数はどのような実装になっているのだろう。それなりに長いので些末な部分は削除したソースは以下の通り。
window.asq = function(d,a,f,g,k,l,m) { if (window.XMLHttpRequest) { var c = window.encodeURIComponent ? encodeURIComponent : escape; var h = &amp;quot;&amp;quot;, i = &amp;quot;&amp;quot;; var b = new XMLHttpRequest; var e = d.</description>
    </item>
    
    <item>
      <title>Google のリダイレクタ</title>
      <link>http://ishikawa.github.io/2007/02/07/google-redirector/</link>
      <pubDate>Thu, 08 Feb 2007 01:15:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/02/07/google-redirector/</guid>
      <description>社内の開発合宿行ったり、そこで風邪もらったりしているうちに、すっかりブログの更新から遠のいてしまった。ぼちぼち復活。
2ちゃんねるではリファラ隠しのために、いわゆる ttp リンクや http://ime.nu/ などのリダイレクタが利用されている。リダイレクタという名前は勝手に使ってるだけで、正式なものか分からないけど、URL の末尾やパラメータに別の URL を指定すると、その URL にリダイレクトしてくれるページのこと。
もっとも、http://ime.nu/ のように、あいだに警告ページを挟んでリンクを表示する（実際にはリダイレクトしない）ページもリダイレクタと呼んでいる。
Google にも、このリダイレクタがあるのを、今日はじめて知った。
http://www.google.com/url?sa=D&amp;amp;q=http://www.yahoo.co.jp/
上の例は http://www.yahoo.co.jp/ に飛ばすためのリンク。</description>
    </item>
    
  </channel>
</rss>