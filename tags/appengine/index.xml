<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>appengine on METAREAL</title>
    <link>https://metareal.blog/tags/appengine/</link>
    <description>Recent content in appengine on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Thu, 03 Dec 2009 12:42:00 +0900</lastBuildDate><atom:link href="https://metareal.blog/tags/appengine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google AppEngine で Django 1.1 を使う</title>
      <link>https://metareal.blog/2009/12/02/running-django-1-1-on-google-appengine/</link>
      <pubDate>Thu, 03 Dec 2009 12:42:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2009/12/02/running-django-1-1-on-google-appengine/</guid>
      <description>Google AppEngine の SDK および実行環境には、Web アプリケーション・フレームワークの Django がプリインストールされている。
しかし、デフォルトで有効になっているのは 0.96 という相当古いバージョンだ（もっとも、Google AppEngine リリース時点では、これが最新のバージョンであった）。すでにサポートも終了しており、バグや脆弱性の修正もされないため、できれば最新の 1.0/1.1系列を使いたい、という人が大半だろう。
しかし、これまで、バージョン 1.0 以降の Django を Google AppEngine で使うのは骨の折れる作業だった。
 使いたいバージョンの Django を丸ごとアップロードしなくてはいけなかった Django はファイル数が多いため、アップロード可能なファイル数制限を超えやすい デフォルトで有効になる古いバージョンの Django を無効化するために、呪文めいたコードが必要  だが、いまや状況は変わった。SDK 1.2.3 からは Django 1.0 が、SDK 1.2.5 からは Django 1.1 がサポートされ、Google AppEngine でも、簡単に Django 1.x を動かせるようになった。
google.appengine.dist.use_library SDK 1.2.3/1.2.5 からは google.appengine.dist モジュールの use_library 関数を使うことで Django 1.0/1.1 を選択できるようになった。
使い方は簡単で、main.py に以下のような記述を追加するだけだ。
import os os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;settings&#39; from google.appengine.dist import use_library use_library(&#39;django&#39;, &#39;1.</description>
    </item>
    
    <item>
      <title>Google App Engine 1.1.3 の zipserve で静的ファイルをまとめてアップロード</title>
      <link>https://metareal.blog/2008/10/03/google-app-engine-113-zipserve/</link>
      <pubDate>Fri, 03 Oct 2008 05:48:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/10/03/google-app-engine-113-zipserve/</guid>
      <description>Google App Engine SDK 1.1.3 で追加された zipserve を使うと、静的ファイルを zip にまとめてアップロードできるらしい。ただ、Developer&amp;rsquo;s Guide 内を検索してもドキュメントが見つからない。しかたがないので、ソースコードのコメントを頼りに zipserve を試してみる。
zipserve するもの 今回は、このブログのレイアウトに使っている CSS フレームワークの YAML を zipserve したいと思う。ファイル数もそれなりにあり、しかも、まず変更することはないので、zipserve するにはうってつけなのだ。
app.yaml YAML の CSS ファイルは /stylesheets/yaml/ 以下に置いてあるので、まずは app.yaml で以下のように設定する。
- url: /stylesheets/yaml/.* script: $PYTHON_LIB/google/appengine/ext/zipserve  $PYTHON_LIB/google/appengine/ext/zipserve というのが、さきほどソースコードをみた zipserve モジュールなのが分かるだろう。
zip ファイルの作成と設置 アプリケーション側の設定もすんだし、zip ファイルをつくるわけだが、そのまえに実際に配置されるファイルと zip ファイルの対応関係を確認しておこう。
URL で指定されたパスの最初のディレクトリが zip ファイル名、それ以降が zip 内のファイルパスになる。
つまり、今回の例でいうと、/stylesheets/yaml/core/base.css というリクエストに対して、stylesheets.zip から yaml/core/base.css が返されるわけだ。また、zip ファイルはアプリケーションのルートディレクトリに置くようだ。
それでは早速、zip コマンドで zip ファイルをつくってみよう。
% zip -r -9 stylesheets.zip yaml  yaml ディレクトリを含む stylesheets.</description>
    </item>
    
    <item>
      <title>Google App Engine で Django 1.0 を動かす</title>
      <link>https://metareal.blog/2008/10/02/running-django-1-0-on-google-app-engine/</link>
      <pubDate>Thu, 02 Oct 2008 10:26:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/10/02/running-django-1-0-on-google-app-engine/</guid>
      <description>このブログは Google App Engine と Django で動かしているのだが、いままで Django はすこし古い開発版を使っていた。
しかし、先頃めでたく Django 1.0 もリリースされたことだし、このブログも最新の開発版にアップデートすることにした。とりあえず、すこしソースコードを修正するだけで、動くだけは動いたので、変更点を残しておく。もっとも、このブログは機能がすくない分、Django に依存している箇所もすくないので、他のプログラムではこれ以上の修正が必要かもしれない。
また、Django を Google App Engine 上で動かす方法については、もともと、Running Django on Google App Engine を参考にしている。そのため、他の手段、たとえば Google App Engine Helper for Django を使っている人にとっては、この記事は役に立たないだろう。
django.dispatch.dispatcher.connect django.dispatch.dispatcher.connect, django.dispatch.dispatcher.disconnect は使えなくなっていた。
--- ../metareal.django.0.9/main.py 2008-06-06 17:33:42.000000000 +0900 +++ ./main.py 2008-10-02 21:14:00.000000000 +0900 @@ -53,20 +53,17 @@ import django.core.handlers.wsgi import django.core.signals -import django.db -import django.dispatch.dispatcher +from django.db import _rollback_on_exception +from django.core import signals def log_exception(*args, **kwds): logging.</description>
    </item>
    
    <item>
      <title>Django のキャッシュで Google App Engine の Memcache API を使う</title>
      <link>https://metareal.blog/2008/05/29/django-cache-framework-meets-appengine-memcache-api/</link>
      <pubDate>Thu, 29 May 2008 01:48:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/05/29/django-cache-framework-meets-appengine-memcache-api/</guid>
      <description>Google App Engine ブログで新しい動きがあった。トピックは以下の通り。
 アカウント数の制限を撤廃 課金の料金体系について 画像操作のための API Memcache API  どれひとつとっても、重大な発表ばかりだ。プラットホームとしての Google App Engine に注目している方は 1. 2. が特に気になるだろうし、利用者からすれば、3. 4. は待ち焦がれていた機能だろう。
重いページをキャッシュする このブログを Google App Engine に移行して一週間が経った。しかし、Admin Console でログを確認してみると、ところどころで警告が出ている。
 &amp;quot;GET /index.xml HTTP/1.1&amp;quot; 200 117413 - - ... This request used a high amount of CPU, and was roughly 5.5 times over the average request CPU limit. High CPU requests have a small quota, and if you exceed this quota, your app will be temporarily disabled.</description>
    </item>
    
    <item>
      <title>Google App Engine への移行</title>
      <link>https://metareal.blog/2008/05/20/porting-weblog-to-google-app-engine/</link>
      <pubDate>Tue, 20 May 2008 07:39:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/05/20/porting-weblog-to-google-app-engine/</guid>
      <description>ここ数日というもの、Mac の前に座ってやっていたことといえば、Twitter か RSS フィードの消化か、でなければブログの移行作業だ。
もともと、このブログは Wordpress で運営していたのだが、色々と不満もたまってきたので、いつの日かつくりなおしたい、と思っていた。おりしも Django の勉強をはじめたばかりである。ちょうどよい。教材代わりに簡単なブログシステムを細々とつくっていた。
それを更に、Google App Engine に移植しましたよ、というのが今回のお話。
Google App Engine に移植した理由 まずは、Google App Engine（以下、GAE）に移植した理由から説明させてほしい。いままで Wordpress を動かしていたサーバでそのまま新しいブログシステムを動かすこともできた。
それでも、わざわざ時間を割いてまで GAE に移植したのは、GAE が話題になってるとか、Django が使えるらしい、というのも重要だったが、自宅サーバの管理から解放されたい 、という理由が実は一番大きい。
うん、自宅サーバの、しかも個人ブログの管理の手間なんて、たかがしれている（そりゃ、セキュリティとかは神経使うけどさ）。それよりは今後、もし、転居や契約している回線業者を変更する場合を考えると、そのあいだは自宅サーバは停めなきゃならないわけで、いまのうちに GAE に移植しておけば、あとあと困らないだろう、というわけである。
実際の移植作業には 4 日程度を要した。
GAE のオンラインドキュメント を参考に、ほとんど単純作業による変換だったが、細かい変更や思わぬ問題などもあったので、開発中にとったメモを片手につらつらと書いてみる。
Django Django は Running Django on Google App Engine を参考に、開発版のものを動かしている。
GAE では Django の Database API（和訳）は動作せず、GAE の Datastore API を使う必要があるが、当然の帰結として、Database API に依存した機能やアドオンも使えない。Django の売りのひとつである Admin Interface も、サイトマップを手軽に生成できる Sitemap framework も、Generic View でさえ使えない。また、Sites も RequestSite オブジェクトで代替してやらなくてはいけない。</description>
    </item>
    
  </channel>
</rss>
