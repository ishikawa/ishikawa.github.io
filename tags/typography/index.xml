<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typography on METAREAL</title>
    <link>http://ishikawa.github.io/tags/typography/</link>
    <description>Recent content in typography on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Sat, 08 Nov 2008 03:00:00 +0900</lastBuildDate>
    
	<atom:link href="http://ishikawa.github.io/tags/typography/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cocoa で独自の Text View を実装する</title>
      <link>http://ishikawa.github.io/2008/11/08/cocoa-custom-text-view/</link>
      <pubDate>Sat, 08 Nov 2008 03:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/11/08/cocoa-custom-text-view/</guid>
      <description>iPhone も盛り上がっていることだし、ひさしぶりに Cocoa プログラミングを始めてみる。
Mac Dev Center をつらつらと眺めてみると、Managing Concurrency with NSOperation という記事に興味が湧く。NSOperation と NSOperationQueue（優先順位付きキュー）を使うことで、タスクのスケジューリングと並行処理が手軽に行えるようになったようだ。Java の concurrency パッケージに感銘を受けた身としては、こういう拡張は嬉しい。今後、マルチスレッドが必要になったときに、改めて詳しく調べてみよう。
テキストシステム周りも、ひところに比べると充実してきている。Mac OS X 10.3 では NSATSTypesetter が公開された。更に Mac OS X 10.5 では NSTextInputClient プロトコルと Input Method Kit が追加されている（他にもあるかも）。
さて、Cocoa プログラミングのリハビリとして、今回は独自の Text View を実装してみようと思う。
ここでいう Text View とは NSTextView のように、IM からの入力を受け取り、テキストを表示、編集できるクラスのことだ。エディタやワープロといったアプリケーションを開発するときには必要になってくるだろう。
NSView のサブクラス ドキュメントによると、独自の Text View を実装する場合は NSTextView のサブクラスか、NSView のサブクラスを作るようなので、今回は NSView のサブクラスとして作成することにする。
NSView のサブクラスを作るとして、名前は単純に MyTextView としよう。まずは MyTextView.h で、クラスの @interface を書く。
#import &amp;amp;lt;Cocoa/Cocoa.h&amp;amp;gt;  @interface MyTextView : NSView { NSMutableAttributedString *_text; } @end インスタンス変数として NSMutableAttributedString をひとつ持つ。ここに表示、編集するテキストの内容を保持するわけだ（MVC も糞もない設計だが、今回のはあくまで例なので単純さを優先する）。</description>
    </item>
    
    <item>
      <title>NSView の CGContextRef に ATSUI でテキストを描画する方法</title>
      <link>http://ishikawa.github.io/2007/01/14/rendering-unicode-text-into-cgcontextref-with-atsui/</link>
      <pubDate>Mon, 15 Jan 2007 02:00:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/14/rendering-unicode-text-into-cgcontextref-with-atsui/</guid>
      <description>Cocoa の NSView に Apple Type Services for Unicode Imaging (ATSUI) でテキストを描画する方法を紹介する。
ATSUI では描画に Quartz の CGContextRef を設定することができる。CGContextRef は NSGraphicsContext の graphicsPort で取得できるので、以下のようなコードで設定できる。
**CGContextRef context = [[NSGraphicsContext currentContext] graphicsPort];** ATSUAttributeTag tags[] = { kATSUCGContextTag }; ByteCount sizes[] = { sizeof(CGContextRef) }; ATSUAttributeValuePtr values[] = { **&amp;amp;context** }; ATSUSetLayoutControls(layout, 1, tags, sizes, values); 以下のコードでは、NSView の drawRect: で Hello, World を描画している。
- (void) drawRect : (NSRect) rect { NSString *s = @&amp;quot;Hello, World!</description>
    </item>
    
    <item>
      <title>Interface Builder の NSTextView で NSLayoutManager を置き換える</title>
      <link>http://ishikawa.github.io/2007/01/14/how-to-replace-layout-manager/</link>
      <pubDate>Sun, 14 Jan 2007 10:01:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/14/how-to-replace-layout-manager/</guid>
      <description>Cocoa の NSLayoutManager や NSTypesetter をサブクラス化したい場合、Apple のドキュメント &amp;ldquo;Assembling the Text System by Hand&amp;rdquo; にあるように、マニュアルで NSTextView を構築してもいいが面倒だ。それに、このままではスクロールビューでデコレートもされてないのでノーグッド。
どうせなら、Interface Builder で配置した NSTextView の NSLayoutManager を置き換えるのが手っ取り早いだろう。コードは以下のようになる。
- (void) awakeFromNib { _textStorage = [[NSTextStorage alloc] initWithString:@&amp;quot;Cocoa Programming Topics&amp;quot;]; NSLayoutManager *layoutManager = [[MyLayoutManager alloc] init]; [_textStorage addLayoutManager:layoutManager]; [layoutManager release]; ** NSTextContainer *textContainer = [_textView textContainer]; [layoutManager addTextContainer:textContainer]; [textContainer replaceLayoutManager:layoutManager]; **} 肝になるのは NSLayoutManager の addTextContainer: で元々の NSTextContainer を追加したあとに、NSTextContainer の replaceLayoutManager: を呼ぶこと。これで NSLayoutManager を置き換えられる。</description>
    </item>
    
    <item>
      <title>Cocoa の Text System を勉強中</title>
      <link>http://ishikawa.github.io/2007/01/06/learning-cocoa-text-system/</link>
      <pubDate>Sun, 07 Jan 2007 04:13:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/06/learning-cocoa-text-system/</guid>
      <description>Mac OS X のフレームワークである Cocoa の Text System を調べるため、ドキュメントを漁り中。
そのなかで、Text System Overview: Typographical Features of the Cocoa Text System の画像 Figure 4 は、
Rendering Unicode Text With ATSUI: Text Measurements の Figure 1-4 を使うのが適切な気がする。前者だと、垂直方向の例がないので。
というか、Cocoa の Text System を理解するには ATSUI も勉強した方がいいのか？　うーん、大変そうだ。</description>
    </item>
    
  </channel>
</rss>