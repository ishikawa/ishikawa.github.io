<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flash on METAREAL</title>
    <link>http://ishikawa.github.io/tags/flash/</link>
    <description>Recent content in flash on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Tue, 09 Dec 2008 08:34:00 +0900</lastBuildDate>
    
	<atom:link href="http://ishikawa.github.io/tags/flash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C/C&#43;&#43; のコードを ActionScript に変換する Adobe Alchemy を試す</title>
      <link>http://ishikawa.github.io/2008/12/09/adobe-alchemy-first-impression/</link>
      <pubDate>Tue, 09 Dec 2008 08:34:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/12/09/adobe-alchemy-first-impression/</guid>
      <description>Adobe Labs の研究プロジェクト、コードネーム Alchemy を試してみた。同プロジェクトについては、すでに多くの方が書かれており、今更な感もあるが、以前に紹介記事を書いていることだし、備忘録も兼ねて残しておく。
Alchemy について Alchemy プロジェクトで配布されているツールを使うと、C/C++ コードで記述されたプログラムを ActionScript Virtual Machine (AVM2) で動作するように変換できる（AVM2 については Adobe ActionScript Virtual Machine 2 (AVM2) Overview (PDF, 400K) を参照）。
これはつまり、既存の C/C++ プログラムが Flash Player や AIR 上で動作することを意味している。また、C/C++ プログラムのコンパイルには LLVM を利用しており、そこで生成された中間コードが ActionScript 3.0 のソースコードに変換される（そのままバイトコードには変換しない）。その後、生成された ActionScript コードが Alchemy 独自の ActionScript コンパイラで ActionScript Byte Code (ABC) にコンパイルされるようだ。
 既存の C/C++ ライブラリの再利用に。特に OS 非依存なもの（例：オーディオ／ビデオ、XML パース、暗号処理、シミュレーション） CPU バウンドなプログラムなら Alchemy でコンパイルすると 10 倍ほども速くなるかもしれない。これは、LLVM による最適化の恩恵と、ByteArray に関する最適化された命令が理由（ActionScript コンパイラではまだ使われていない） C/C++ コードは ActionScript 3.</description>
    </item>
    
    <item>
      <title>C 言語で書かれたソフトウェアが Flash で動くようになるかもしれない</title>
      <link>http://ishikawa.github.io/2008/07/06/running-legacy-applications-on-flash-player/</link>
      <pubDate>Sun, 06 Jul 2008 09:35:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2008/07/06/running-legacy-applications-on-flash-player/</guid>
      <description>lucille development blog 経由。
Running C and Python Code on The Web によると、Adobe の Scott Petersen 氏が大変興味深いツールを開発中のようだ。このツールを使うと、C 言語で書かれたソフトウェアを Flash Player で実行できるようになる。また、このツールはオープンソースで公開されるとのこと。
LLVM, Tamarin ソフトウェアを Flash Player で実行可能な形式に変換するためには、ソフトウェアのソースコードが必要になる。変換の手順は以下のとおり。
 C 言語で書かれたソースコードを llvm-gcc で LLVM のアセンブリにコンパイルする LLVM のアセンブリを ActionScript で実装した独自 VM 向けの命令群に変換する  ActionScript で実装された独自 VM は、Flash Player の Tamarin VM で実行される、というカラクリだ。
先進的な最適化を備えたバックエンドとして注目を集める LLVM プロジェクトだが、その成果物を、フロントエンドとして利用しているのが面白い（もちろん、LLVM アセンブリの段階でも、定数畳み込みやデッドコード削除といった従来の最適化は施されているはずなので、フロントエンドとしてのみ利点があるわけではない）。
Quake, Nintendo もっとも、命令単位の変換はそれほど難しいものでもないし、実用的なアプリケーションが動作するのかどうか、気になるところだ。そこで、コンパイラだけではなく、インフラも整備されている。
 POSIX API Flash のマルチメディア機能を操作するためのライブラリ ネイティブのバイト配列など、Tamarin VM への機能追加  結果として、さまざまな種類のソフトウェアが、実用的な速度で動作するらしい。
Mozilla で行われたデモでは、Quake や、C 言語で書かれたエミュレータでゼルダが動いていた、しかも、ゲームは操作でき BGM も再現されていた、というのでなかなかのインパクトだ（ただ、2.</description>
    </item>
    
    <item>
      <title>Safari で ExternalInterface を使うときは this に気をつけないと無限ループ</title>
      <link>http://ishikawa.github.io/2007/11/05/safari-external-interface-infinite-loop/</link>
      <pubDate>Tue, 06 Nov 2007 03:23:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/11/05/safari-external-interface-infinite-loop/</guid>
      <description>以下のサイトを参考に、JavaScript から ActionScript のコードを呼び出そうとしている。
 throw Life - JavaScriptからFlash ActionScriptを呼び出す最も簡単なサンプル Firefox &amp;amp; Safari  以前、haXe で遊んでたときは組み込みの JavaScript インターフェースを使っていたので、ExternalInterface を使うのは初めて。
document[&amp;quot;as&amp;quot;].callFlash(); サンプルどおり、こんなふうに呼び出すのは問題ない。だが、もうすこし汎用的にしようと思って、以下のようなクラスを試しにつくってみた。
var SWFInterface = Class.create(); SWFInterface.prototype = { initialize: function(name) { this.name = name; }, call: function(iname) { var embed = document[this.name]; if (embed) { var fn = embed[iname]; alert(fn()); } } }; だが、このクラス経由で呼び出すと Safari が反応しなくなってしまった。
new SWFInterface(&amp;quot;as&amp;quot;).call(&amp;quot;callFlash&amp;quot;); // Safari が反応しなくなる どうやら、呼び出す関数の this は embed 要素に束縛しないといけないようだ。
call: function(iname) { var embed = document[this.</description>
    </item>
    
    <item>
      <title>MacBook に内蔵された iSight を Flash から利用できるようにする</title>
      <link>http://ishikawa.github.io/2007/10/10/setting-flash-camera-with-macbook-isight/</link>
      <pubDate>Thu, 11 Oct 2007 05:20:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/10/10/setting-flash-camera-with-macbook-isight/</guid>
      <description>Flash の flash.media.Camera オブジェクトを使うと、Webcam からの入力をキャプチャすることができる。
しかし、そのままだと MacBook に内蔵された iSight では映像をとることができない。どうやら、設定を変更する必要があるようだ。
 ページに表示された Flash を右クリックして「Adobe Flash Player 設定」を開く。 左下のアイコンから、一番右のカメラをクリック カメラの種類を選択するプルダウンメニューが表示されるので「USB Video Class Video」を選択  これで iSight からの入力を受け取れるようになる。
ちなみに、ここまでして見たかったページは Quasimondo : Incubator : Processing : Minority Cube、Webcam に映した手の動きでキューブを回せる、というデモ。実際に操作してみると、不思議な満足感がある。面白い。</description>
    </item>
    
    <item>
      <title>mod_flv_streaming と Deep Tagging</title>
      <link>http://ishikawa.github.io/2007/01/09/mod-flv-streaming-and-deep-tagging/</link>
      <pubDate>Wed, 10 Jan 2007 03:20:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/09/mod-flv-streaming-and-deep-tagging/</guid>
      <description>lighttpd で Flash Video (.flv) をストリーミング配信 (2)の mod_flv_streaming って、開始フレームを指定するのに、URL のクエリー部分を使うわけだけど、これを mod_rewrite で Pretty URL にしてやれば、いわゆる Deep Tagging もいけそうね。
 Tagging 2.0: Deep Taggingというコンセプト 映像のある場面にコメントやタグをつけられる『Viddler』  </description>
    </item>
    
    <item>
      <title>lighttpd で Flash Video (.flv) をストリーミング配信 (2)</title>
      <link>http://ishikawa.github.io/2007/01/09/flash-video-streaming-with-lighttpd-take-2/</link>
      <pubDate>Tue, 09 Jan 2007 09:18:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/09/flash-video-streaming-with-lighttpd-take-2/</guid>
      <description>前回の記事「lighttpd で Flash Video (.flv) をストリーミング配信」で、とりあえずストリーミング配信できることは書いた。今回は Flash の動画配信について調査したまとめ。
How much? 一番気になっていたのは、あの馬鹿高い「フラッシュなんちゃらサーバ」を購入しないとあかんの？　というところでしたが、yuin さんがコメントしてくれた情報で解決しました。
結論からいえば、みんなの大好きな lighttpd でストリーミング配信ができる。
まあ、要するにタダだよ、と。
動画フォーマット まず、動画フォーマットは Flash Video (.flv) になる。 これについては、.mpeg や .mov からの変換ツールがごろごろあるはずなので詳細は割愛。
とりあえず、リンクだけ。
 FFmpeg .flv に変換。 FLVTool2 .flv を操作。メタデータ追加など。  Flash Player の事情 クライアント (Flash Player) 側では、NetConnection でサーバに接続する。そして、その接続から NetStream インスタンスを生成し、これを Video インスタンスに attachVideo() することで .flv の再生が可能になる。
var nc:NetConnection = new NetConnection(); nc.connect(null); // initialize var stream:NetStream = new NetStream(nc); var video:Video = new Video(300,300); .</description>
    </item>
    
    <item>
      <title>Flash で動画をストリーミング再生</title>
      <link>http://ishikawa.github.io/2007/01/08/flash-video-streaming/</link>
      <pubDate>Tue, 09 Jan 2007 03:03:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/08/flash-video-streaming/</guid>
      <description>Flash で動画をストリーミング再生する方法について調査したときのメモ。
 Flash Player 6 以降 ストリーミング用のファイルは .flv .mpeg や .mov を .flv に変換して使う Flash MX や Flash Professional で変換 たぶん、フリーの変換ソフトが転がってると予想 配信 Flash Media Server 2 が必要？ プロトコルは RTMP (Real Time Messaging Protocol) オープンソースの Flash サーバ Red5 RTMP は Adobe (Macromedia) 独自のプロトコルで、仕様は公開されていない。 Red5 の人たちは頑張って解析しているようだ。Web サイトに仕様についての情報もある。  やっぱり配信部分がネックだなあ。Red5 は動画配信するだけにはオーバースペックな気がするし。。</description>
    </item>
    
    <item>
      <title>lighttpd で Flash Video (.flv) をストリーミング配信</title>
      <link>http://ishikawa.github.io/2007/01/09/flash-video-streaming-with-lighttpd/</link>
      <pubDate>Tue, 09 Jan 2007 02:38:00 +0900</pubDate>
      
      <guid>http://ishikawa.github.io/2007/01/09/flash-video-streaming-with-lighttpd/</guid>
      <description>以前の記事「Flash で動画をストリーミング再生」で yuin さんにコメントで教えてもらった情報：
 あと配信に関しては http://blog.kovyrin.net/2006/10/08/lighttpd-memcoder-flvtool-for-streaming/ http://blog.lighttpd.net/articles/2006/03/09/flv-streaming-with-lighttpd あたりはどうでしょう。
  Using Lighttpd, Mplayer/Mencoder and Flvtool2 to Implement Flash Video Streaming flv streaming with lighttpd The Flash Video Resource: &amp;lsquo;Streaming&amp;rsquo; flv video via PHP, take two  で、とりあえず、lighttpd で .flv のストリーミング配信に成功（yuin さん、ありがとう！）。プレイヤーやら .flv やらはこちらのをそのまま使っているです。
リンク先にも書いてあるように、擬似的なストリーミング配信（実際には、ただの HTTP によるダウンロード）なんだけど、普通に配信するぶんには困らないと思う。開始フレームを URL の start パラメータで指定するので、プレイヤー側の対応も必要、ってとこくらいかな。
今日はもう眠いので、詳しくはまた後日。</description>
    </item>
    
  </channel>
</rss>