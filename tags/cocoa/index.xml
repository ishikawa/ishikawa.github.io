<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cocoa on METAREAL</title>
    <link>http://www.metareal.org/tags/cocoa/</link>
    <description>Recent content in Cocoa on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Sat, 08 Nov 2008 03:00:00 +0900</lastBuildDate>
    <atom:link href="http://www.metareal.org/tags/cocoa/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cocoa で独自の Text View を実装する</title>
      <link>http://www.metareal.org/2008/11/08/cocoa-custom-text-view/</link>
      <pubDate>Sat, 08 Nov 2008 03:00:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2008/11/08/cocoa-custom-text-view/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://developer.apple.com/iphone/program/&#34;&gt;iPhone&lt;/a&gt; も盛り上がっていることだし、ひさしぶりに &lt;a href=&#34;http://developer.apple.com/referencelibrary/Cocoa/&#34;&gt;Cocoa&lt;/a&gt; プログラミングを始めてみる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.apple.com/mac/&#34;&gt;Mac Dev Center&lt;/a&gt; をつらつらと眺めてみると、&lt;a href=&#34;http://developer.apple.com/mac/articles/cocoa/managingconcurrency.html&#34;&gt;Managing Concurrency with NSOperation&lt;/a&gt; という記事に興味が湧く。&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html&#34;&gt;NSOperation&lt;/a&gt; と &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/NSOperationQueue_class/Reference/Reference.html&#34;&gt;NSOperationQueue&lt;/a&gt;（優先順位付きキュー）を使うことで、タスクのスケジューリングと並行処理が手軽に行えるようになったようだ。Java の &lt;a href=&#34;http://java.sun.com/javase/6/docs/api/java/util/concurrent/package-summary.html&#34;&gt;concurrency パッケージ&lt;/a&gt;に感銘を受けた身としては、こういう拡張は嬉しい。今後、マルチスレッドが必要になったときに、改めて詳しく調べてみよう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.apple.com/referencelibrary/Cocoa/idxTextFonts-date.html&#34;&gt;テキストシステム周り&lt;/a&gt;も、ひところに比べると充実してきている。Mac OS X 10.3 では &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSATSTypesetter_Class/Reference/Reference.html&#34;&gt;NSATSTypesetter&lt;/a&gt; が公開された。更に Mac OS X 10.5 では &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/NSTextInputClient_Protocol/Reference/Reference.html&#34;&gt;NSTextInputClient&lt;/a&gt; プロトコルと &lt;a href=&#34;http://developer.apple.com/releasenotes/Cocoa/RN-InputMethodKit/index.html&#34;&gt;Input Method Kit&lt;/a&gt; が追加されている（他にもあるかも）。&lt;/p&gt;

&lt;p&gt;さて、Cocoa プログラミングのリハビリとして、今回は独自の Text View を実装してみようと思う。&lt;/p&gt;

&lt;p&gt;ここでいう Text View とは &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSTextView_Class/Reference/Reference.html&#34;&gt;NSTextView&lt;/a&gt; のように、IM からの入力を受け取り、テキストを表示、編集できるクラスのことだ。エディタやワープロといったアプリケーションを開発するときには必要になってくるだろう。&lt;/p&gt;

&lt;h3 id=&#34;nsview-のサブクラス:11812e693eeb5d1ecb4e7b72cbcfa22b&#34;&gt;NSView のサブクラス&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Conceptual/InputManager/Tasks/TextViewTask.html#//apple_ref/doc/uid/20001040&#34;&gt;ドキュメント&lt;/a&gt;によると、独自の Text View を実装する場合は &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSTextView_Class/Reference/Reference.html&#34;&gt;NSTextView&lt;/a&gt; のサブクラスか、&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/NSView.html&#34;&gt;NSView&lt;/a&gt; のサブクラスを作るようなので、今回は NSView のサブクラスとして作成することにする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NSView&lt;/code&gt; のサブクラスを作るとして、名前は単純に &lt;code&gt;MyTextView&lt;/code&gt; としよう。まずは &lt;code&gt;MyTextView.h&lt;/code&gt; で、クラスの &lt;code&gt;@interface&lt;/code&gt; を書く。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;amp;lt;Cocoa/Cocoa.h&amp;amp;gt;

@interface MyTextView : NSView {
  NSMutableAttributedString *_text;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インスタンス変数として &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableAttributedString_Class/Reference/Reference.html&#34;&gt;NSMutableAttributedString&lt;/a&gt; をひとつ持つ。ここに表示、編集するテキストの内容を保持するわけだ（MVC も糞もない設計だが、今回のはあくまで例なので単純さを優先する）。&lt;/p&gt;

&lt;h3 id=&#34;first-responder:11812e693eeb5d1ecb4e7b72cbcfa22b&#34;&gt;First Responder&lt;/h3&gt;

&lt;p&gt;最初にすることは、このクラスがキー入力を受け取れるようにすることだ。そのためには、キー入力やマウスクリックなどのイベントを受け取るれるように、&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSResponder_Class/Reference/Reference.html#//apple_ref/occ/instm/NSResponder/acceptsFirstResponder&#34;&gt;acceptsFirstResponder&lt;/a&gt; をオーバーライドする必要がある。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (BOOL) acceptsFirstResponder {
  return YES;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、これでキー入力イベントを受け取れるようになったので、今度は &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSResponder_Class/Reference/Reference.html#//apple_ref/occ/instm/NSResponder/keyDown:&#34;&gt;keyDown:&lt;/a&gt; を実装しよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void) keyDown: (NSEvent *) theEvent {
  [self interpretKeyEvents: [NSArray arrayWithObject: theEvent]];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけ。そのまま &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSResponder_Class/Reference/Reference.html#//apple_ref/occ/instm/NSResponder/interpretKeyEvents:&#34;&gt;interpretKeyEvents:&lt;/a&gt; に投げている。&lt;/p&gt;

&lt;h3 id=&#34;interpretkeyevents:11812e693eeb5d1ecb4e7b72cbcfa22b&#34;&gt;interpretKeyEvents:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;interpretKeyEvents:&lt;/code&gt; は &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSInputManager_Class/Reference/Reference.html#//apple_ref/occ/cl/NSInputManager&#34;&gt;NSInputManager&lt;/a&gt; を通して、最終的に、ビューの &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSResponder_Class/Reference/Reference.html#//apple_ref/occ/instm/NSResponder/insertText:&#34;&gt;insertText:&lt;/a&gt; や &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSResponder_Class/Reference/Reference.html#//apple_ref/occ/instm/NSResponder/insertNewline:&#34;&gt;insertNewline:&lt;/a&gt; などを呼び出すので、あとはこれらのメソッドを実装すればいい。&lt;/p&gt;

&lt;p&gt;今回は改行、タブ、削除、通常のテキスト入力など、最低限必要なメソッドだけを実装している。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void) deleteBackward: (id) sender {
  const NSUInteger length = [_text length];

  if (length &amp;amp;gt; 0) {
    [_text deleteCharactersInRange: NSMakeRange(length - 1, 1)];
    [self setNeedsDisplay: YES];
  }
}

- (void) insertNewline: (id) sender {
  [self insertText: @&amp;quot;\n&amp;quot;];
}

- (void) insertTab: (id) sender {
  [self insertText: @&amp;quot;\t&amp;quot;];
}

- (void) insertText: (id) aString {
  [[_text mutableString] appendString: aString];
  [_text addAttribute: NSFontAttributeName
                value: [NSFont userFontOfSize: 18.0f]
                range: NSMakeRange(0, [_text length])];
  [self setNeedsDisplay: YES];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、&lt;code&gt;insertText:&lt;/code&gt; に渡される &lt;code&gt;aString&lt;/code&gt; は &lt;code&gt;NSString&lt;/code&gt; とは限らず、&lt;code&gt;NSAttributedString&lt;/code&gt; の可能性もあるので、本来はそれも考慮したコードにするべきだ。&lt;/p&gt;

&lt;h3 id=&#34;テキストの表示:11812e693eeb5d1ecb4e7b72cbcfa22b&#34;&gt;テキストの表示&lt;/h3&gt;

&lt;p&gt;最後に、描画部分を実装しよう。テキストのレイアウトと描画は &lt;code&gt;NSAttributedString&lt;/code&gt; の &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSAttributedString_AppKitAdditions/Reference/Reference.html#//apple_ref/occ/instm/NSAttributedString/drawInRect:&#34;&gt;drawInRect:&lt;/a&gt; に任せてしまう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void) drawRect: (NSRect) theRect {
  [[NSColor whiteColor] set];
  NSFrameRect(theRect);

  NSRectFill(theRect);
  [[NSColor grayColor] set];
  NSFrameRect(theRect);

  [_text drawInRect: NSMakeRect(
      theRect.origin.x + 5.0f, theRect.origin.y,
      theRect.size.width, theRect.size.height)];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で、簡単ではあるが、テキストの入力と削除が可能な Text View が出来た。&lt;/p&gt;

&lt;p&gt;日本語変換、入力など、更に複雑な操作をサポートするためには、&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Protocols/NSTextInput_Protocol/Reference/Reference.html&#34;&gt;NSTextInput&lt;/a&gt; や、それを拡張した &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/NSTextInputClient_Protocol/Reference/Reference.html&#34;&gt;NSTextInputClient&lt;/a&gt; を実装する必要がある。更に、独自のレイアウトも実装することになるだろう。実用的な Text View を開発するのはかなりの労力がいりそうだ。&lt;/p&gt;

&lt;p&gt;なお、今回のソースコードは &lt;a href=&#34;http://gist.github.com/23017&#34;&gt;gist:23017&lt;/a&gt; に置いてある。&lt;/p&gt;

&lt;h3 id=&#34;参考:11812e693eeb5d1ecb4e7b72cbcfa22b&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Conceptual/EventOverview/Introduction/chapter_1_section_1.html#//apple_ref/doc/uid/10000060i-CH1-DontLinkElementID_45&#34;&gt;Cocoa Event-Handling Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Conceptual/InputManager/InputManager.html#//apple_ref/doc/uid/10000065&#34;&gt;Introduction to Text Input Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>280Slides in Objective-J</title>
      <link>http://www.metareal.org/2008/06/06/280slides-in-objective-j/</link>
      <pubDate>Fri, 06 Jun 2008 12:42:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2008/06/06/280slides-in-objective-j/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://280slides.com/&#34;&gt;280Slides&lt;/a&gt; という Web サービスがすごい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xxeo.com/archives/2008/06/05/new-web-site-in-objective-c-via-javascript.html&#34;&gt;Dru’s Blog » New Web Site in Objective-C via Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/programming/info/6m84p/comments/&#34;&gt;New 280 Slides Web Site translates Objective-C to Javascript | reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keynote 風のプレゼンテーションツールとしての UI も素晴らしいが、圧巻なのは、その実装技術。&lt;/p&gt;

&lt;p&gt;「どんな JavaScript や Flash を使ってるんだ？」と思うだろう。さあ、&lt;a href=&#34;https://addons.mozilla.org/ja/firefox/addon/1843&#34;&gt;FireBug&lt;/a&gt; なり Safari の Web インスペクタなりで、ページに読み込まれているスクリプトを確認してみよう。その大半が馴染みのない拡張子 &lt;code&gt;.j&lt;/code&gt; であることに驚くに違いない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://280slides.com/Editor/1212703678/main.j&#34;&gt;main.j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://280slides.com/Editor/1212703678/Document.j&#34;&gt;Document.j&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://280slides.com/Editor/1212703678/DocumentController.j&#34;&gt;DocumentController.j&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上にあげたのは、&lt;code&gt;.j&lt;/code&gt; ファイルの一例だが、あなたが Mac OS X の開発者であれば、見覚えのある名前ばかりだろう。これは Mac OS X の MVC フレームワーク &lt;a href=&#34;http://developer.apple.com/cocoa/&#34;&gt;Cocoa&lt;/a&gt; を構成するクラス名と酷似している。&lt;/p&gt;

&lt;h3 id=&#34;objective-j:768c3b36853f147cf4a820ec94390722&#34;&gt;Objective-J&lt;/h3&gt;

&lt;p&gt;試しに &lt;a href=&#34;http://280slides.com/Editor/1212703678/DocumentController.j&#34;&gt;DocumentController.j&lt;/a&gt; を覗いてみようか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//
// DocumentController.j
// Editor
//
// Created by Francisco Tolmasky.
// Copyright 2005 - 2008, 280 North, Inc. All rights reserved.
//

import &amp;lt;AppKit/CPDocumentController.j&amp;gt;

import &amp;quot;OpenPanel.j&amp;quot;
import &amp;quot;Themes.j&amp;quot;
import &amp;quot;ThemePanel.j&amp;quot;
import &amp;quot;WelcomePanel.j&amp;quot;

@implementation DocumentController : CPDocumentController
{
    BOOL    _applicationHasFinishedLaunching;
}

- (void)applicationDidFinishLaunching:(CPNotification)aNotification
{
    // FIXME
    // Check [CPApp arguments][0] for &amp;quot;docs&amp;quot; and [self openPresentationWithFilename: args[2]];

    [CPApp runModalForWindow:[[WelcomePanel alloc] init]];

    _applicationHasFinishedLaunching = YES;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どう見ても &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Introduction/chapter_1_section_1.html&#34;&gt;Objective-C&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;もちろん、ブラウザがこんな独自言語をコンパイルできるわけがない。これらのスクリプトは &lt;a href=&#34;http://280slides.com/Editor/1212703678/Frameworks/Objective-J/Objective-J.js&#34;&gt;Objective-J.js&lt;/a&gt; によって、&lt;strong&gt;実行時に JavaScript へと変換（コンパイル）&lt;/strong&gt;される。&lt;/p&gt;

&lt;p&gt;どんなふうになるかは、プリコンパイルされた &lt;a href=&#34;http://280slides.com/Editor/1212703678/Frameworks/AppKit/AppKit.sj&#34;&gt;AppKit.sj&lt;/a&gt; もあるので、参考に覗いてみるといいだろう。&lt;/p&gt;

&lt;h3 id=&#34;dsl-and-framework:768c3b36853f147cf4a820ec94390722&#34;&gt;DSL and Framework&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%9B%BA%E6%9C%89%E8%A8%80%E8%AA%9E&#34;&gt;Domain-Specific Language (DSL)&lt;/a&gt; の有効性は散々言い古されてきたけど、Objective-J が Cocoa という、すでに GUI アプリケーションの分野で定評のあるフレームワークを土台としていることは興味深い（もしかすると今後、このような流れが他にも起こるだろうか？）。&lt;/p&gt;

&lt;p&gt;そして、なにより、こんなことを妄想しこそすれ、本当にやってしまう心意気は賞賛に値する。&lt;/p&gt;

&lt;h3 id=&#34;p-s:768c3b36853f147cf4a820ec94390722&#34;&gt;P.S.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;（2008.06.06 追記）&lt;/strong&gt;この記事を書いたあとで、&lt;a href=&#34;http://gbracha.blogspot.com/2008/04/everyone-is-talking-about-cloud.html&#34;&gt;Room 101: java&amp;rsquo;scrypt&lt;/a&gt; という記事を思い出した。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Javascript is the assembly language of the internet platform (and the browser is the OS).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この記事では他にも &lt;a href=&#34;http://code.google.com/webtoolkit/&#34;&gt;Google Web Toolkit&lt;/a&gt; に言及している。そういえば、Google Web Toolkit (GWT) も Java で書かれたプログラムが（サーバ側で）JavaScript に「コンパイル」されるのだった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xcode でプロジェクトの名前を変更したくなったら</title>
      <link>http://www.metareal.org/2007/08/21/rename-xcode-project/</link>
      <pubDate>Tue, 21 Aug 2007 05:24:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/08/21/rename-xcode-project/</guid>
      <description>

&lt;p&gt;Xcode でプロジェクトの名前を変えたくなった。&lt;/p&gt;

&lt;p&gt;だが、簡単にはいかない。変更箇所が散在している。面倒くさい。以下に手順をまとめてみる。&lt;/p&gt;

&lt;h3 id=&#34;プロジェクト-ファイル名の変更:2e7ea9e12bb3181a4085f487385cb2ab&#34;&gt;プロジェクト・ファイル名の変更&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Finder で Xcode のプロジェクト・ディレクトリの名前を変更する&lt;/li&gt;
&lt;li&gt;.xcodeproj ファイルの名前を変更する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ターゲットの変更:2e7ea9e12bb3181a4085f487385cb2ab&#34;&gt;ターゲットの変更&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Xcode でターゲット名を変更する&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.apple.com/documentation/DeveloperTools/Conceptual/XcodeUserGuide/Contents/Resources/ja.lproj/05_04_bs_build_settings/chapter_32_section_5.html#//apple_ref/doc/uid/TP40002691-SW4&#34;&gt;ターゲットエディタの「ビルド」パネルを表示&lt;/a&gt;し、「PRODUCT」で検索して表示される「プロダクト名」を変更&lt;/li&gt;
&lt;li&gt;「PREFIX」で検索して表示されるプレフィックスヘッダのパスにアプリケーション名が含まれているなら変更。&lt;/li&gt;
&lt;li&gt;プレフィックスヘッダの名前も、この機会に &lt;code&gt;prefix.pch&lt;/code&gt; とかアプリケーション名に依存しない名前にしてしまうのもアリ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ソースコードの変更:2e7ea9e12bb3181a4085f487385cb2ab&#34;&gt;ソースコードの変更&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;クラス名の先頭にアプリケーション名の頭文字とか使ってたら悲惨&lt;/li&gt;
&lt;li&gt;Finder でソースファイル名を変更すると、Xocde 上でのリンクがなくなってしまう&lt;/li&gt;
&lt;li&gt;.nib ファイルから参照されている場合はそちらも変更する必要が&lt;/li&gt;
&lt;li&gt;これもアプリケーション名に依存しないようにしておけばいいんだけど、それはそれで。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;プロパティ設定の変更:2e7ea9e12bb3181a4085f487385cb2ab&#34;&gt;プロパティ設定の変更&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ターゲットエディタの「プロパティ」パネルを表示&lt;/li&gt;
&lt;li&gt;識別子にアプリケーション名が含まれているなら変更する&lt;/li&gt;
&lt;li&gt;主要クラスとかも変える必要があれば変更する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これくらいかな。他にあるかもしれんけど。あとはプロジェクトをクリーンして再ビルド。&lt;/p&gt;

&lt;p&gt;今回の記事を書くにあたってウェブを検索してみると、どうやら、&lt;a href=&#34;http://www.macupdate.com/info.php/id/17683&#34;&gt;Rename Xcode Project&lt;/a&gt; なんて、そのまんまなソフトウェアもあるらしい（試していない）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NSView の CGContextRef に ATSUI でテキストを描画する方法</title>
      <link>http://www.metareal.org/2007/01/14/rendering-unicode-text-into-cgcontextref-with-atsui/</link>
      <pubDate>Mon, 15 Jan 2007 02:00:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/01/14/rendering-unicode-text-into-cgcontextref-with-atsui/</guid>
      <description>&lt;p&gt;Cocoa の &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/index.html?http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSView_Class/Reference/Reference.html&#34;&gt;&lt;code&gt;NSView&lt;/code&gt;&lt;/a&gt; に &lt;a href=&#34;http://developer.apple.com/documentation/Carbon/Reference/ATSUI_Reference/index.html&#34;&gt;Apple Type Services for Unicode Imaging (ATSUI)&lt;/a&gt; でテキストを描画する方法を紹介する。&lt;/p&gt;

&lt;p&gt;ATSUI では描画に Quartz の &lt;a href=&#34;http://developer.apple.com/documentation/GraphicsImaging/Reference/CGContext/Reference/reference.html#//apple_ref/doc/uid/TP30000950-CH2g-C016175&#34;&gt;&lt;code&gt;CGContextRef&lt;/code&gt;&lt;/a&gt; を設定することができる。&lt;code&gt;CGContextRef&lt;/code&gt; は &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSGraphicsContext_Class/index.html?http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSGraphicsContext_Class/Reference/Reference.html&#34;&gt;&lt;code&gt;NSGraphicsContext&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;graphicsPort&lt;/code&gt; で取得できるので、以下のようなコードで設定できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;**CGContextRef context = [[NSGraphicsContext currentContext] graphicsPort];**
ATSUAttributeTag tags[] = { kATSUCGContextTag };
ByteCount sizes[] = { sizeof(CGContextRef) };
ATSUAttributeValuePtr values[] = { **&amp;amp;context** };
ATSUSetLayoutControls(layout, 1, tags, sizes, values);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコードでは、&lt;code&gt;NSView&lt;/code&gt; の &lt;code&gt;drawRect:&lt;/code&gt; で Hello, World を描画している。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void) drawRect : (NSRect) rect
{
  NSString *s = @&amp;quot;Hello, World!&amp;quot;;
  UniChar *text;
  UniCharCount length;
  ATSUStyle style;
  ATSUTextLayout layout;

  // Setup
  ATSUCreateStyle(&amp;amp;style);
  ATSUCreateTextLayout(&amp;amp;layout);

  length = [s length];
  text = (UniChar *)malloc(length * sizeof(UniChar));
  [s getCharacters:text];

  ATSUSetTextPointerLocation(
    layout,
    text,
    kATSUFromTextBeginning,
    kATSUToTextEnd,
    length);
  ATSUSetRunStyle(
    layout,
    style,
    kATSUFromTextBeginning,
    kATSUToTextEnd
  );

  // CGContext
  CGContextRef context = [[NSGraphicsContext currentContext] graphicsPort];
  ATSUAttributeTag tags[] = { kATSUCGContextTag };
  ByteCount sizes[] = { sizeof(CGContextRef) };
  ATSUAttributeValuePtr values[] = { &amp;amp;context };
  ATSUSetLayoutControls(layout, 1, tags, sizes, values);

  // Drawing
  ATSUDrawText(
    layout,
    kATSUFromTextBeginning,
    kATSUToTextEnd,
    X2Fix(10.0f),
    X2Fix(10.0f));

  free(text);
  ATSUDisposeStyle(style);
  ATSUDisposeTextLayout(layout);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Interface Builder の NSTextView で NSLayoutManager を置き換える</title>
      <link>http://www.metareal.org/2007/01/14/how-to-replace-layout-manager/</link>
      <pubDate>Sun, 14 Jan 2007 10:01:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/01/14/how-to-replace-layout-manager/</guid>
      <description>&lt;p&gt;Cocoa の &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSLayoutManager_Class/Reference/Reference.html&#34;&gt;&lt;code&gt;NSLayoutManager&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSTypesetter_Class/Reference/Reference.html&#34;&gt;&lt;code&gt;NSTypesetter&lt;/code&gt;&lt;/a&gt; をサブクラス化したい場合、Apple のドキュメント &amp;ldquo;&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Conceptual/TextArchitecture/index.html?http://developer.apple.com/documentation/Cocoa/Conceptual/TextArchitecture/Tasks/TextEditor.html&#34;&gt;Assembling the Text System by Hand&lt;/a&gt;&amp;rdquo; にあるように、マニュアルで &lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSTextView_Class/Reference/Reference.html&#34;&gt;&lt;code&gt;NSTextView&lt;/code&gt;&lt;/a&gt; を構築してもいいが面倒だ。それに、このままではスクロールビューでデコレートもされてないのでノーグッド。&lt;/p&gt;

&lt;p&gt;どうせなら、Interface Builder で配置した &lt;code&gt;NSTextView&lt;/code&gt; の &lt;code&gt;NSLayoutManager&lt;/code&gt; を置き換えるのが手っ取り早いだろう。コードは以下のようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void) awakeFromNib {
  _textStorage = [[NSTextStorage alloc] initWithString:@&amp;quot;Cocoa Programming Topics&amp;quot;];

  NSLayoutManager *layoutManager = [[MyLayoutManager alloc] init];
  [_textStorage addLayoutManager:layoutManager];
  [layoutManager release];

**  NSTextContainer *textContainer = [_textView textContainer];
  [layoutManager addTextContainer:textContainer];
  [textContainer replaceLayoutManager:layoutManager];
**}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;肝になるのは &lt;code&gt;NSLayoutManager&lt;/code&gt; の &lt;code&gt;addTextContainer:&lt;/code&gt; で元々の &lt;code&gt;NSTextContainer&lt;/code&gt; を追加したあとに、&lt;code&gt;NSTextContainer&lt;/code&gt; の &lt;code&gt;replaceLayoutManager:&lt;/code&gt; を呼ぶこと。これで &lt;code&gt;NSLayoutManager&lt;/code&gt; を置き換えられる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cocoa の Text System を勉強中</title>
      <link>http://www.metareal.org/2007/01/06/learning-cocoa-text-system/</link>
      <pubDate>Sun, 07 Jan 2007 04:13:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/01/06/learning-cocoa-text-system/</guid>
      <description>&lt;p&gt;Mac OS X のフレームワークである Cocoa の Text System を調べるため、ドキュメントを漁り中。&lt;/p&gt;

&lt;p&gt;そのなかで、&lt;a href=&#34;http://developer.apple.com/documentation/Cocoa/Conceptual/TextArchitecture/Concepts/TextSystemFeatures.html#//apple_ref/doc/uid/20001800&#34;&gt;Text System Overview: Typographical Features of the Cocoa Text System&lt;/a&gt; の画像 &lt;strong&gt;Figure 4&lt;/strong&gt; は、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://developer.apple.com/documentation/Carbon/Conceptual/ATSUI_Concepts/atsui_chap2/chapter_2_section_6.html&#34;&gt;Rendering Unicode Text With ATSUI: Text Measurements&lt;/a&gt; の &lt;strong&gt;Figure 1-4&lt;/strong&gt; を使うのが適切な気がする。前者だと、垂直方向の例がないので。&lt;/p&gt;

&lt;p&gt;というか、Cocoa の Text System を理解するには ATSUI も勉強した方がいいのか？　うーん、大変そうだ。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>