<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Imaging on METAREAL</title>
    <link>http://www.metareal.org/tags/imaging/index.xml</link>
    <description>Recent content in Imaging on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <atom:link href="http://www.metareal.org/tags/imaging/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>java.awt.Image を BufferedImage や byte 配列に変換する方法</title>
      <link>http://www.metareal.org/2007/04/02/convert-awt-image-to-buffered-image-or-byte-array/</link>
      <pubDate>Tue, 03 Apr 2007 12:18:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/04/02/convert-awt-image-to-buffered-image-or-byte-array/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://weblog.metareal.org/2007/02/10/create-flickr-quality-thumbnail-with-java-imageio/&#34;&gt;Java ImageIO で Flickr 並みのサムネイル画像をつくる&lt;/a&gt;という記事で、&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;java.awt.Image を BufferedImage や byte 配列に変換する方法は次回。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書いたにも関わらず、そのまま放置になっていた（コメントで指摘されているのに気づいたのも今日だ。すまん）。&lt;/p&gt;

&lt;h3 id=&#34;概要&#34;&gt;概要&lt;/h3&gt;

&lt;p&gt;まずは &lt;a href=&#34;http://sdc.sun.co.jp/java/docs/j2se/1.4/ja/docs/ja/api/java/awt/image/BufferedImage.html&#34;&gt;&lt;code&gt;java.awt.image.BufferedImage&lt;/code&gt;&lt;/a&gt; を &lt;code&gt;byte&lt;/code&gt; 配列に変換する方法を紹介する。&lt;/p&gt;

&lt;p&gt;そのあと、&lt;a href=&#34;http://sdc.sun.co.jp/java/docs/j2se/1.4/ja/docs/ja/api/java/awt/Image.html&#34;&gt;&lt;code&gt;java.awt.Image&lt;/code&gt;&lt;/a&gt; を &lt;code&gt;java.awt.image.BufferedImage&lt;/code&gt; に変換する方法を紹介するので、このふたつを組み合わせれば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Image --&amp;gt; BufferedImage --&amp;gt; byte[]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;が実現できるわけだ。&lt;/p&gt;

&lt;h3 id=&#34;bufferedimage-を-byte-に変換する&#34;&gt;BufferedImage を byte[] に変換する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;BufferedImage&lt;/code&gt; から &lt;code&gt;byte&lt;/code&gt; 配列の変換は、&lt;a href=&#34;http://sdc.sun.co.jp/java/docs/j2se/1.4/ja/docs/ja/api/javax/imageio/ImageWriter.html&#34;&gt;&lt;code&gt;javax.imageio.ImageWriter&lt;/code&gt;&lt;/a&gt; でわりかし素直に実装できる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BufferedImage image = ...;
ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
ImageWriter writer = ImageIOKit.getImageWritersByFormatName(formatName);
ImageOutputStream stream = ImageIO.createImageOutputStream(bytesOut);

try {
  writer.setOutput(stream);
  writer.write(image);
  stream.flush();
} finally {
  writer.dispose();
  if (stream != null) try { stream.close(); } catch (Throwable t) {;}
}

byte[] bytes = bytesOut.toByteArray();
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://sdc.sun.co.jp/java/docs/j2se/1.4/ja/docs/ja/api/javax/imageio/ImageWriteParam.html&#34;&gt;&lt;code&gt;ImageWriteParam&lt;/code&gt;&lt;/a&gt; も組み合わせれば、圧縮率などの設定ができる。&lt;/p&gt;

&lt;h3 id=&#34;image-を-bufferedimage-をに変換する&#34;&gt;Image を BufferedImage をに変換する&lt;/h3&gt;

&lt;p&gt;一筋縄ではいかないのが、Image を BufferedImage をに変換する方法だ。&lt;/p&gt;

&lt;p&gt;以下では、&lt;code&gt;image&lt;/code&gt; 変数が &lt;code&gt;java.awt.Image&lt;/code&gt; のインスタンスであるとして、順を追って説明する。&lt;/p&gt;

&lt;p&gt;まず、&lt;code&gt;image&lt;/code&gt; が &lt;code&gt;BufferedImage&lt;/code&gt; のインスタンスなら、以降は何もする必要がない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (image instanceof BufferedImage) {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、&lt;code&gt;java.awt.Image&lt;/code&gt; のインスタンスは、実際のデータが非同期でロードされているかもしれないので、変換処理を行う前に、&lt;a href=&#34;http://sdc.sun.co.jp/java/docs/j2se/1.4/ja/docs/ja/api/java/awt/MediaTracker.html&#34;&gt;&lt;code&gt;java.awt.MediaTracker&lt;/code&gt;&lt;/a&gt; でロードが完了するまで待機する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// java.awt.MediaTracker でロードを待機
MediaTracker tracker = new MediaTracker(new Component(){});
tracker.addImage(image, 0);
tracker.waitForAll();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここからが実際の変換処理になるが、基本的に、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;新規に &lt;code&gt;BufferedImage&lt;/code&gt; を生成&lt;/li&gt;
&lt;li&gt;生成した &lt;code&gt;BufferedImage&lt;/code&gt; に &lt;code&gt;Image&lt;/code&gt; のピクセルをコピー&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という処理になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PixelGrabber pixelGrabber = new PixelGrabber(image, 0, 0, -1, -1, false);
pixelGrabber.grabPixels();
ColorModel cm = pixelGrabber.getColorModel();

final int w = pixelGrabber.getWidth();
final int h = pixelGrabber.getHeight();
WritableRaster raster = cm.createCompatibleWritableRaster(w, h);
BufferedImage renderedImage =
  new BufferedImage(
    cm,
    raster,
    cm.isAlphaPremultiplied(),
    new Hashtable());
renderedImage.getRaster().setDataElements(0, 0, w, h, pixelGrabber.getPixels());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のコードでは、元の &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/ja/docs/ja/api/java/awt/image/ColorModel.html&#34;&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/a&gt; もサポートするために、&lt;a href=&#34;http://java.sun.com/j2se/1.5.0/ja/docs/ja/api/java/awt/image/PixelGrabber.html&#34;&gt;PixelGrabber&lt;/a&gt; を使っている。&lt;/p&gt;

&lt;p&gt;あとは、ここで生成した &lt;code&gt;BufferedImage&lt;/code&gt; を &lt;code&gt;byte&lt;/code&gt; 配列に変換してやればよい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenCV 1.0.0 を Mac OS X 10.4 にインストール</title>
      <link>http://www.metareal.org/2007/03/27/opencv-on-mac-os-x-tiger/</link>
      <pubDate>Wed, 28 Mar 2007 01:18:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/03/27/opencv-on-mac-os-x-tiger/</guid>
      <description>

&lt;p&gt;物体認識もできる画像処理ライブラリ &lt;a href=&#34;http://www.intel.com/technology/computing/opencv/&#34;&gt;OpenCV 1.0.0&lt;/a&gt; を Mac OS X 10.4 にてコンパイルしてみた。&lt;/p&gt;

&lt;h3 id=&#34;opencv-のインストール&#34;&gt;OpenCV のインストール&lt;/h3&gt;

&lt;p&gt;まずは、&lt;a href=&#34;http://sourceforge.net/projects/opencvlibrary/&#34;&gt;SourceForge&lt;/a&gt; から opencv-1.0.0.tar.gz をダウンロードして解凍。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% tar xvzf opencv-1.0.0.tar.gz
% mkdir build
% cd build/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;libjpeg&lt;/code&gt; や &lt;code&gt;libpng&lt;/code&gt; がないと JPEG, PNG 画像を扱えないので、&lt;a href=&#34;http://darwinports.opendarwin.org/&#34;&gt;DarwanPorts&lt;/a&gt; でいれたものを使うように &lt;code&gt;configure&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ../configure CPPFLAGS=&amp;quot;-I/opt/local/include&amp;quot; LDFLAGS=&amp;quot;-L/opt/local/lib&amp;quot;
% make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;案の定、エラーがでる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect2: ld returned 1 exit status
make[4]: *** [_cv.la] Error 1
make[3]: *** [all-recursive] Error 1
make[2]: *** [all-recursive] Error 1
make[1]: *** [all-recursive] Error 1
make: *** [all] Error 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんか、python のラッパー周辺が原因っぽいので外してコンパイル。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% ../configure --without-swig --without-python CPPFLAGS=&amp;quot;-I/opt/local/include&amp;quot; LDFLAGS=&amp;quot;-L/opt/local/lib&amp;quot;
% make
% sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事成功。&lt;/p&gt;

&lt;h3 id=&#34;サンプル-プログラムを試す&#34;&gt;サンプル・プログラムを試す&lt;/h3&gt;

&lt;p&gt;サンプル・プログラムをコンパイルするために、&lt;code&gt;pkg-config&lt;/code&gt; の探索パスを追加しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/local/lib/pkgconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは &lt;code&gt;samples/c&lt;/code&gt; ディレクトリで &lt;code&gt;build_all.sh&lt;/code&gt; を実行すれば、すべてのサンプル・プログラムをコンパイルしてくれる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd samples/c
% chmod u+x ./build_all.sh
% ./build_all.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mac OS X 向けに Carbon で作られているので、動作も良好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java ImageIO で Flickr 並みのサムネイル画像をつくる</title>
      <link>http://www.metareal.org/2007/02/10/create-flickr-quality-thumbnail-with-java-imageio/</link>
      <pubDate>Sun, 11 Feb 2007 08:38:00 +0900</pubDate>
      
      <guid>http://www.metareal.org/2007/02/10/create-flickr-quality-thumbnail-with-java-imageio/</guid>
      <description>&lt;p&gt;まあ、記事のタイトルがアレですけど&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://java.sun.com/javase/6/docs/technotes/guides/imageio/index.html&#34;&gt;Java の Image I/O&lt;/a&gt; で画像の縮小を行う方法として、&lt;a href=&#34;http://java.sun.com/j2se/1.3/ja/docs/ja/api/java/awt/image/AffineTransformOp.html&#34;&gt;&lt;code&gt;AffineTransformOp&lt;/code&gt;&lt;/a&gt; を利用する方法がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;final double scale = 0.5;
AffineTransformOp transformOp = new AffineTransformOp(AffineTransform.getScaleInstance(scale, scale), null);
BufferedImage dest1 = new BufferedImage(
    (int)(originalImage.getWidth() * scale),
    (int)(originalImage.getHeight() * scale),
    originalImage.getType());
transformOp.filter(originalImage, dest1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし、この方法だとジャギーが目立ってしまい、&lt;a href=&#34;http://flickr.com/&#34;&gt;Flickr&lt;/a&gt; ほどキレイなサムネイルにはならない。&lt;/p&gt;

&lt;p&gt;たとえば、Flickr で見つけた&lt;a href=&#34;http://www.flickr.com/photos/39388734@N00/385464032/&#34;&gt;この写真&lt;/a&gt;。Flickr のサムネイルはこんな感じだが、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AffineTransformOp&lt;/code&gt; を用いた方法だと、こうなってしまう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/2448999922/&#34;&gt;&lt;img src=&#34;http://farm3.static.flickr.com/2064/2448999922_f37cf202e5_o.jpg&#34; alt=&#34;Java ImageIO AffineTransformOp&#34; /&gt;&lt;/a&gt;で、どうするかというと、AWT の &lt;a href=&#34;http://java.sun.com/j2se/1.5.0/ja/docs/ja/api/java/awt/image/AreaAveragingScaleFilter.html&#34;&gt;&lt;code&gt;AreaAveragingScaleFilter&lt;/code&gt;&lt;/a&gt; を使うのがいいようだ。以下、API リファレンスより抜粋：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最近接点アルゴリズムよりもなめらかな結果が得られる、簡単な領域平均化アルゴリズムを使用してイメージをスケーリングする ImageFilter クラスです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;では、試してみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ImageFilter filter = new AreaAveragingScaleFilter(w, h);
ImageProducer im = new FilteredImageSource(image.getSource(), filter);
Image newImage = Toolkit.getDefaultToolkit().createImage(im);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フィルタした結果の &lt;a href=&#34;http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Image.html&#34;&gt;&lt;code&gt;java.awt.Image&lt;/code&gt;&lt;/a&gt; を &lt;a href=&#34;http://java.sun.com/j2se/1.3/ja/docs/ja/api/java/awt/image/BufferedImage.html&#34;&gt;BufferedImage&lt;/a&gt; や &lt;code&gt;byte&lt;/code&gt; 配列に変換する方法は次回。&lt;/p&gt;

&lt;p&gt;こんな感じになる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/ishikawa_takanori/2448999924/&#34;&gt;&lt;img src=&#34;http://farm4.static.flickr.com/3197/2448999924_62c28b86b2_o.jpg&#34; alt=&#34;Java ImageIO AreaAveragingScaleFilter&#34; /&gt;&lt;/a&gt;格段にキレイだ。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>