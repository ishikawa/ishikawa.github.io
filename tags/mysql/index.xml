<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on METAREAL</title>
    <link>https://metareal.blog/tags/mysql/</link>
    <description>Recent content in mysql on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright © 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Thu, 07 Feb 2008 08:37:00 +0900</lastBuildDate><atom:link href="https://metareal.blog/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rails の Migration で MySQL の型を指定する</title>
      <link>https://metareal.blog/2008/02/06/using-mysql-data-types-in-rails-migration/</link>
      <pubDate>Thu, 07 Feb 2008 08:37:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2008/02/06/using-mysql-data-types-in-rails-migration/</guid>
      <description>たとえば、こんな感じの Migration を考えてみる。
class CreatePepsi &amp;lt; ActiveRecord::Migration def self.up create_table :pepsies do |t| t.column :coke, :string, :limit =&amp;gt; 64 t.column :jolt, :integer t.column :created_at, :datetime t.column :updated_at, :datetime end end def self.down drop_table :addresses end end  Rails 2.0 の sexy migration ではこんなふうにも書けるんだけど、個人的に馴染まないので今回はスルー。
class CreatePepsi &amp;lt; ActiveRecord::Migration def self.up create_table :pepsies do |t| t.string :coke, :limit =&amp;gt; 64 t.integer :jolt t.timestamps end end def self.down drop_table :addresses end end  rake db:migrate したときの CREATE TABLE はこうなる。</description>
    </item>
    
    <item>
      <title>InnoDB の AUTO_INCREMENT とロック</title>
      <link>https://metareal.blog/2007/10/08/scalability-issue-with-innodb-auto-increment-column/</link>
      <pubDate>Tue, 09 Oct 2007 12:29:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/10/08/scalability-issue-with-innodb-auto-increment-column/</guid>
      <description>きっかけは MySQL Users Conference Japan 2007 の講演資料「新ストレージエンジン Falcon のアーキテクチャ詳細技術解説」だった。
Falcon とは MySQL 6.0 で搭載予定の新しいストレージエンジンである。
 MySQL AB :: Falcon Storage Engine Guide MySQLの新ストレージエンジン Falcon 徹底リサーチ | マイコミジャーナル  この講演資料で Falcon が InnoDB より優れている点として、
 AUTO_INCREMENT の割当にテーブルロックをかけない
 があげられており、少々驚いた。
これはつまり、InnoDB の AUTO_INCREMENT がテーブルロックをかける、ということであり、そのことをいままで知らなかったからだ。
恥ずかしながら、AUTO_INCREMENT のスケーラビリティについては、いままであまり意識したことがなかった。
InnoDB の特別なテーブルロックモード AUTO-INC リファレンスマニュアルの「13.5.16. InnoDB テーブル上の制約」にもあるように、AUTO_INCREMENT を使うときはテーブルロックが必要だ。
 自動インクリメント カウンタにアクセスする時、InnoDB は、トランザクション全体の最後までではなく、現在の SQL ステートメントの最後まで続く、特別なテーブル ロック モード AUTO-INC を利用します。AUTO-INC テーブル ロックが行われている間は、別のクライアントはテーブルに挿入ができない事に注意してください。
 AUTO_INCREMENT が設定された InnoDB のテーブルでは、AUTO-INC テーブルロックを同時にひとつのトランザクションしか利用できない。これはスケーラビリティの点で問題になりうる。
MySQL 5.</description>
    </item>
    
    <item>
      <title>Rails で MySQL を使うときの注意点</title>
      <link>https://metareal.blog/2007/07/24/notes-on-rubyonrails-with-mysql/</link>
      <pubDate>Tue, 24 Jul 2007 09:29:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2007/07/24/notes-on-rubyonrails-with-mysql/</guid>
      <description>Rails のブログでも取り上げられていた、&amp;quot;Rubyisms - MySQL-dump&amp;quot; が面白かったので、特に興味深かった一時テーブルまわりの要約を載せてみる。要約、というか読みながら書いたメモそのまんまですが。
Rubyisms - MySQL-dump http://mysqldump.azundris.com/archives/72-Rubyisms.html
&amp;ldquo;select *&amp;rdquo; が多すぎる ActiveRecord は、特に何も指定しないと select * で、すべてのカラムを取ってくる。SQL は動的に生成されて、どのカラムが存在するかチェックしているので、スキームが変更されても大丈夫。
でも、必要のないデータまで取ってきてしまう、という問題はあるよね。そして、何が無駄かっていうと、必要のないデータのために一時的なテーブルが使われるかもしれない、ってことなんだ（SQL を EXPLAIN してみて、&amp;ldquo;using temporary&amp;rdquo; となっていれば、そういう事態が発生しているサインだ）。
 TEXT や BLOB をもつテーブルではもっと悪くて、一時テーブルはディスク上に作られる これには tmp_table_size や max_heap_table_size の設定は関係ない  そういう場合は、SQL を二段階に分けるといい
 まず、最初の SQL でレコードの ID だけを SELECT する（int だけなので、このときの一時テーブルはメモリ上に作られる） 次に、その ID で必要な TEXT や BLOB を SELECT するんだ（これは ID による単純な検索なので一時テーブルは使われない） ActiveRecord では find([id1, id2, ...])  では、ActiveRecord で select * を避けるにはどうするか？
 find(...) の最後の引数に指定するハッシュに :select =&amp;gt; [ fieldlist ] として指定する ActiveRecord::Base をサブクラス化して、:select が指定されていなければ、警告を出すようにするのがいいんじゃない？  文字列型がかなり無駄かも たとえ TEXT 型（Migration だと :text 型）を使っていなくても、Migration で :string 型を使っているなら、気をつけた方がいい。</description>
    </item>
    
    <item>
      <title>Mac OS X  Tiger に MySQL 5.0.27 をインストール</title>
      <link>https://metareal.blog/2006/12/27/mysql-on-macosx-tiger/</link>
      <pubDate>Thu, 28 Dec 2006 12:54:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2006/12/27/mysql-on-macosx-tiger/</guid>
      <description>Ruby on Rails で開発するアプリケーションのバックエンドだが、データベースには MySQL を使用するつもりなので、これもインストールしてやる。
MySQL 5.0 のダウンロードページには、Mac OS X 向けのバイナリも配布されているので、通常はこちらを使うのがよさそうだ。
まあ、コンパイルも楽しいので、今回は自前でソースコードからインストールしてみる。
% curl --location &amp;quot;http://dev.mysql.com/get/Downloads/MySQL-5.0/mysql-5.0.27.tar.gz/from/http://mirror.mysql-partners-jp.biz/&amp;quot; &amp;gt; mysql-5.0.27.tar.gz % tar xvzf mysql-5.0.27.tar.gz % cd mysql-5.0.27  configure のオプションはマニュアルに載っていたものを参考にした。
CC=gcc CFLAGS=&amp;quot;-O3 -fno-omit-frame-pointer&amp;quot; CXX=gcc \ CXXFLAGS=&amp;quot;-O3 -fno-omit-frame-pointer -felide-constructors \ -fno-exceptions -fno-rtti&amp;quot; \ ./configure --prefix=/usr/local/mysql \ --with-extra-charsets=complex --enable-thread-safe-client \ --enable-local-infile --disable-shared  あとは、make, make install
% make % sudo make install  </description>
    </item>
    
    <item>
      <title>MySQL/Ruby の test.rb が失敗する理由と対策</title>
      <link>https://metareal.blog/2006/12/28/reason-of-mysql-ruby-test-failure/</link>
      <pubDate>Thu, 28 Dec 2006 10:07:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2006/12/28/reason-of-mysql-ruby-test-failure/</guid>
      <description>前回書いた、MySQL/Ruby の test.rb が失敗する原因を調査する。
まずは、実行結果の出力を調べてみよう。 すべてのテストが失敗しているため長いので、最初のテスト結果のみ抜粋する。
% ruby ./test.rb localhost root newpass ... 1) Failure: test_connect(TC_Mysql) [./test.rb:39]: Exception raised: Class: &amp;lt;Mysql::Error&amp;gt; **Message: &amp;lt;&amp;quot;Access denied for user &#39;ishikawa&#39;@&#39;localhost&#39; (using password: NO)&amp;quot;&amp;gt;** ---Backtrace--- ./test.rb:39:in `connect&#39; ./test.rb:39:in `test_connect&#39; ./test.rb:39:in `test_connect&#39; ...  MySQL のエラーで &amp;ldquo;Access denied for user &amp;lsquo;ishikawa&amp;rsquo;@&amp;lsquo;localhost&amp;rsquo; (using password: NO)&amp;quot;と出力されているので、これは単なるアクセス制御の問題だ。
そして、test.rb のコマンドライン引数で root ユーザを指定しているにも関わらず、実際には ishikawa ユーザでアクセスしようとしている。
うまくいくわけがない。 コマンドライン引数による指定が無視されているわけだ。
何故、コマンドライン引数が無視されるのか コマンドライン引数が無視される原因を調べてみると、どうやら test.rb が使っている Test::Unit が悪さをしているらしい（Test::Unit は Ruby の標準添付ライブラリで、いわゆる xUnit ツールの Ruby 版である）。</description>
    </item>
    
    <item>
      <title>Mac OS X に MySQL/Ruby をインストール &#43; 高速化パッチ</title>
      <link>https://metareal.blog/2006/12/27/mysql-bindings-on-macosx-tiger/</link>
      <pubDate>Thu, 28 Dec 2006 03:14:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2006/12/27/mysql-bindings-on-macosx-tiger/</guid>
      <description>長かった Ruby on Rails 環境構築シリーズもやっと終盤です。
Ruby から MySQL につなぐためのバインディングである MySQL/Ruby をインストールすれば、Ruby on Rails の開発環境構築は一段落。
なお、同様のバインディングである Ruby/MySQL もあり、こちらは Ruby で書かれているためコンパイルが不要。MySQL/Ruby とも、ほぼ互換性がある。ただ、今回はパフォーマンス優先でいきたいと思う。
さて、ダウンロードページから最新版をダウンロード。現時点では mysql-ruby-2.7.3.tar.gz が最新版のようだ。
% curl --location -O http://tmtm.org/downloads/mysql/ruby/mysql-ruby-2.7.3.tar.gz % tar xvzf mysql-ruby-2.7.3.tar.gz % cd mysql-ruby-2.7.3  さきほど「パフォーマンス優先」と書いたけど、RailsExpress.blog の人が MySQL/Ruby を 30% 高速にするパッチを公開している。記事を読んだときから試してみたかったので、これを機会に使ってみよう。
パッチをダウンロードして、MySQL/Ruby の展開先に置いたら、patch コマンドでパッチを適用する。
% curl -O http://railsexpress.de/downloads/mysql-ruby-2.7-less-string-copies-in-each-hash.diff % patch &amp;lt; mysql-ruby-2.7-less-string-copies-in-each-hash.diff patching file mysql.c.in Hunk #1 succeeded at 1009 (offset -1 lines). Hunk #2 succeeded at 1027 (offset -1 lines).</description>
    </item>
    
    <item>
      <title>MySQL をインストールしたあとの作業</title>
      <link>https://metareal.blog/2006/12/27/mysql-post-installation/</link>
      <pubDate>Thu, 28 Dec 2006 02:49:00 +0900</pubDate>
      
      <guid>https://metareal.blog/2006/12/27/mysql-post-installation/</guid>
      <description>初期化 MySQL のインストールが完了したら、マニュアル通り、インストール後の作業を進めていく。
mysql_install_db でデータ格納ディレクトリとアカウントを初期化する。
% cd /usr/local/mysql/ % sudo chown -R mysql:mysql /usr/local/mysql % sudo bin/mysql_install_db --user=mysql  データベースを起動。
% sudo bin/mysqld_safe --user=mysql &amp;amp;  いくつかのコマンドを実行して、動作を確認。
% bin/mysqladmin version % bin/mysqladmin variables % bin/mysqlshow  停止。
% sudo bin/mysqladmin -u root shutdown  アカウントの設定 インストール直後の MySQL には 2 つのアカウントが用意されている。
 root パスワードなし local host からの接続のみ許可 匿名アカウント パスワードなし local host からの接続のみ許可 test または test_ で始まる名前のデータベースへの権限  つまり、最初から用意されているアカウントには、いずれもパスワードが設定されていない。これはセキュリティ的によろしくないので、次のふたつを実行する。
 匿名アカウントの削除 root にパスワードを設定  MySQL を起動し、mysql -u root で接続。</description>
    </item>
    
  </channel>
</rss>
