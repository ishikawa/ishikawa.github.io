<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on METAREAL</title>
    <link>https://metareal.blog/en/tags/python/</link>
    <description>Recent content in python on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright Â© 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Sat, 25 Apr 2020 19:47:00 +0900</lastBuildDate>
    
	<atom:link href="https://metareal.blog/en/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Useful pytest fixtures to help you improve legacy code</title>
      <link>https://metareal.blog/en/post/2020/04/25/useful-pytest-fixtures-to-help-you-improve-legacy-code/</link>
      <pubDate>Sat, 25 Apr 2020 19:47:00 +0900</pubDate>
      
      <guid>https://metareal.blog/en/post/2020/04/25/useful-pytest-fixtures-to-help-you-improve-legacy-code/</guid>
      <description>Recently, I had the opportunity to work on improving legacy code &amp;ndash; in short, code that has no testing at all1. The following improvements were made by me as rough steps.
 Adding Poetry as package manager. Adding tests with pytest. Running tests automatically on CI. Necessary code modifications and refactoring.  In particular, in step 2, the fixture feature of pytest was very useful, and I used it extensively, from generating dummy data to mocking external resource access.</description>
    </item>
    
  </channel>
</rss>