<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test on METAREAL</title>
    <link>https://metareal.blog/en/tags/test/</link>
    <description>Recent content in test on METAREAL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>copyright Â© 2006-Present Takanori Ishikawa.</copyright>
    <lastBuildDate>Sun, 03 May 2020 20:11:54 +0900</lastBuildDate>
    
	<atom:link href="https://metareal.blog/en/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Validating multipart/form-data request with requests-mock</title>
      <link>https://metareal.blog/en/post/2020/05/03/validating-multipart-form-data-with-requests-mock/</link>
      <pubDate>Sun, 03 May 2020 20:11:54 +0900</pubDate>
      
      <guid>https://metareal.blog/en/post/2020/05/03/validating-multipart-form-data-with-requests-mock/</guid>
      <description>When writing tests with Python requests-mock, I often want to test requests which contain data in multipart/form-data format.
multipart/form-data To upload multipart-encoded files, you may write the code like this.
url = &amp;#39;http://httpbin.org/post&amp;#39; files = {&amp;#39;file&amp;#39;: (&amp;#39;settings.json&amp;#39;, open(&amp;#39;settings.json&amp;#39;, &amp;#39;rb&amp;#39;), &amp;#39;application/json&amp;#39;)} r = requests.post(url, files=files) To test that the expected request has been sent, let&amp;rsquo;s examine the body of the above request by using Request History of the requests-mock.
history = requests_mock.</description>
    </item>
    
    <item>
      <title>Useful pytest fixtures to help you improve legacy code</title>
      <link>https://metareal.blog/en/post/2020/04/25/useful-pytest-fixtures-to-help-you-improve-legacy-code/</link>
      <pubDate>Sat, 25 Apr 2020 19:47:00 +0900</pubDate>
      
      <guid>https://metareal.blog/en/post/2020/04/25/useful-pytest-fixtures-to-help-you-improve-legacy-code/</guid>
      <description>Recently, I had the opportunity to work on improving legacy code &amp;ndash; in short, code that has no testing at all1. The following improvements were made by me as rough steps.
 Adding Poetry as package manager. Adding tests with pytest. Running tests automatically on CI. Necessary code modifications and refactoring.  In particular, in step 2, the fixture feature of pytest was very useful, and I used it extensively, from generating dummy data to mocking external resource access.</description>
    </item>
    
  </channel>
</rss>